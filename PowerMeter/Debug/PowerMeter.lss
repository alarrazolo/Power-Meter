
PowerMeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014e  00800100  000009be  00000a52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080024e  0080024e  00000ba0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cf8  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db9  00000000  00000000  00003b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001218  00000000  00000000  00004919  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000648  00000000  00000000  00005b34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ea  00000000  00000000  0000617c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000178f  00000000  00000000  00006a66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  000081f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 40 01 	jmp	0x280	; 0x280 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 34       	cpi	r26, 0x4E	; 78
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ae e4       	ldi	r26, 0x4E	; 78
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 35       	cpi	r26, 0x54	; 84
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 26 01 	call	0x24c	; 0x24c <main>
  9e:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initI2C>:
//#ifndef F_CPU                          /* if not defined in Makefile... */
//#define F_CPU  1000000UL                     /* set a safe default baud rate */
//#endif

void initI2C(void) {
  TWBR = 32;                               /* set bit rate, see p. 242 */
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
                                     /* 8MHz / (16+2*TWBR*1) ~= 100kHz */
  TWCR |= (1 << TWEN);                                       /* enable */
  ac:	ec eb       	ldi	r30, 0xBC	; 188
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <pIC_Start>:
}

void pIC_Start(void){
	
	// set chip select port to output.
	DDRB |= (1<<0);
  b8:	20 9a       	sbi	0x04, 0	; 4
	//set chip select on power meter IC high
	PORTB |= (1<<0);
  ba:	28 9a       	sbi	0x05, 0	; 5
	
	if(!((SPCR >> MSTR)&0x01)) SPI_init();
  bc:	0c b4       	in	r0, 0x2c	; 44
  be:	04 fe       	sbrs	r0, 4
  c0:	0e 94 b1 02 	call	0x562	; 0x562 <SPI_init>
  c4:	08 95       	ret

000000c6 <get_pIC_RegValue>:
	//set_pIC_RegValue(AdjStart, 0x56, 0x78);
	
}


uint16_t get_pIC_RegValue(uint8_t pICRegister){
  c6:	cf 93       	push	r28
	
	//send AND read Byte with register address Byte to read back 16 bit value.
	
	PORTB &= ~(1<<0); // set chip select bit low to initiate SPI communication. 
  c8:	28 98       	cbi	0x05, 0	; 5
	SPI_tradeByte(ReadRegPower | pICRegister); // AND read Byte with register address and send it over SPI
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	0e 94 ca 02 	call	0x594	; 0x594 <SPI_tradeByte>
	uint8_t highByte = SPI_tradeByte(0); // Read MSD Byte first.
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 ca 02 	call	0x594	; 0x594 <SPI_tradeByte>
  d6:	c8 2f       	mov	r28, r24
	uint8_t lowByte = SPI_tradeByte(0); // Read LSD Byte second.
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 ca 02 	call	0x594	; 0x594 <SPI_tradeByte>
	PORTB |= (1<<0); // set chip select bit high to terminate SPI communication.
  de:	28 9a       	sbi	0x05, 0	; 5
	uint16_t full16Byte = (highByte << 8) | lowByte; // Combine MSB and LSB together into 16 bit Byte.
	return full16Byte; // return Byte to function call. 
  e0:	2c 2f       	mov	r18, r28
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	32 2f       	mov	r19, r18
  e6:	22 27       	eor	r18, r18
	
	//printHexByte(pIC_d1bitHigh);
	//printHexByte(pIC_d1bitLow);
	//printString("H\r\n");
	
}
  e8:	a9 01       	movw	r20, r18
  ea:	48 2b       	or	r20, r24
  ec:	ca 01       	movw	r24, r20
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <setup_rf>:
	printString("\r\n");
	printString("\tFrequency: ");
	printWord(get_pIC_RegValue(Freq));
	printString("\tPower Factor: ");
	printSignedWord(get_pIC_RegValue(PowerF));
	printString("\r\n\n");
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <nRF24L01_init>
  fa:	ec 01       	movw	r28, r24
  fc:	85 e2       	ldi	r24, 0x25	; 37
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	99 83       	std	Y+1, r25	; 0x01
 102:	88 83       	st	Y, r24
 104:	22 e0       	ldi	r18, 0x02	; 2
 106:	2a 83       	std	Y+2, r18	; 0x02
 108:	9c 83       	std	Y+4, r25	; 0x04
 10a:	8b 83       	std	Y+3, r24	; 0x03
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	2d 83       	std	Y+5, r18	; 0x05
 110:	9f 83       	std	Y+7, r25	; 0x07
 112:	8e 83       	std	Y+6, r24	; 0x06
 114:	25 e0       	ldi	r18, 0x05	; 5
 116:	28 87       	std	Y+8, r18	; 0x08
 118:	9a 87       	std	Y+10, r25	; 0x0a
 11a:	89 87       	std	Y+9, r24	; 0x09
 11c:	23 e0       	ldi	r18, 0x03	; 3
 11e:	2b 87       	std	Y+11, r18	; 0x0b
 120:	9d 87       	std	Y+13, r25	; 0x0d
 122:	8c 87       	std	Y+12, r24	; 0x0c
 124:	84 e0       	ldi	r24, 0x04	; 4
 126:	8e 87       	std	Y+14, r24	; 0x0e
 128:	e9 e6       	ldi	r30, 0x69	; 105
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	80 83       	st	Z, r24
 132:	e8 9a       	sbi	0x1d, 0	; 29
 134:	ce 01       	movw	r24, r28
 136:	0e 94 c9 01 	call	0x392	; 0x392 <nRF24L01_begin>
 13a:	ce 01       	movw	r24, r28
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <setup_timer>:
 142:	e1 e8       	ldi	r30, 0x81	; 129
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	80 83       	st	Z, r24
 14c:	af e6       	ldi	r26, 0x6F	; 111
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	8c 91       	ld	r24, X
 152:	82 60       	ori	r24, 0x02	; 2
 154:	8c 93       	st	X, r24
 156:	82 e1       	ldi	r24, 0x12	; 18
 158:	9a e7       	ldi	r25, 0x7A	; 122
 15a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 15e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 162:	80 81       	ld	r24, Z
 164:	84 60       	ori	r24, 0x04	; 4
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <print_power_IC_settings>:
 16a:	8e e3       	ldi	r24, 0x3E	; 62
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <printString>
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	92 e0       	ldi	r25, 0x02	; 2
 176:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <printString>
 17a:	81 e5       	ldi	r24, 0x51	; 81
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <printString>
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 188:	0e 94 ff 02 	call	0x5fe	; 0x5fe <printWord>
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	92 e0       	ldi	r25, 0x02	; 2
 190:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <printString>
 194:	81 e6       	ldi	r24, 0x61	; 97
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <printString>
 19c:	86 e4       	ldi	r24, 0x46	; 70
 19e:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 1a2:	0e 94 ff 02 	call	0x5fe	; 0x5fe <printWord>
 1a6:	83 e0       	ldi	r24, 0x03	; 3
 1a8:	92 e0       	ldi	r25, 0x02	; 2
 1aa:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <printString>
 1ae:	83 e7       	ldi	r24, 0x73	; 115
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <printString>
 1b6:	8b e2       	ldi	r24, 0x2B	; 43
 1b8:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 1bc:	0e 94 ff 02 	call	0x5fe	; 0x5fe <printWord>
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	92 e0       	ldi	r25, 0x02	; 2
 1c4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <printString>
 1c8:	83 e8       	ldi	r24, 0x83	; 131
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <printString>
 1d0:	8c e2       	ldi	r24, 0x2C	; 44
 1d2:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 1d6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <printWord>
 1da:	83 e0       	ldi	r24, 0x03	; 3
 1dc:	92 e0       	ldi	r25, 0x02	; 2
 1de:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <printString>
 1e2:	80 e9       	ldi	r24, 0x90	; 144
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <printString>
 1ea:	8b e3       	ldi	r24, 0x3B	; 59
 1ec:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 1f0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <printWord>
 1f4:	83 e0       	ldi	r24, 0x03	; 3
 1f6:	92 e0       	ldi	r25, 0x02	; 2
 1f8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <printString>
 1fc:	8d e9       	ldi	r24, 0x9D	; 157
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <printString>
 204:	80 e3       	ldi	r24, 0x30	; 48
 206:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 20a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <printWord>
 20e:	83 e0       	ldi	r24, 0x03	; 3
 210:	92 e0       	ldi	r25, 0x02	; 2
 212:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <printString>
 216:	85 ec       	ldi	r24, 0xC5	; 197
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <printString>
 21e:	81 e3       	ldi	r24, 0x31	; 49
 220:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 224:	0e 94 ff 02 	call	0x5fe	; 0x5fe <printWord>
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	92 e0       	ldi	r25, 0x02	; 2
 22c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <printString>
 230:	88 ed       	ldi	r24, 0xD8	; 216
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <printString>
 238:	82 e3       	ldi	r24, 0x32	; 50
 23a:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 23e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <printWord>
 242:	83 e0       	ldi	r24, 0x03	; 3
 244:	92 e0       	ldi	r25, 0x02	; 2
 246:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <printString>
 24a:	08 95       	ret

0000024c <main>:
 24c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <initUSART>
 250:	0e 94 53 00 	call	0xa6	; 0xa6 <initI2C>
 254:	0e 94 b1 02 	call	0x562	; 0x562 <SPI_init>
 258:	78 94       	sei
 25a:	0e 94 79 00 	call	0xf2	; 0xf2 <setup_rf>
 25e:	0e 94 5c 00 	call	0xb8	; 0xb8 <pIC_Start>
 262:	0e 94 a1 00 	call	0x142	; 0x142 <setup_timer>
 266:	82 ef       	ldi	r24, 0xF2	; 242
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <printString>
 26e:	0e 94 b5 00 	call	0x16a	; 0x16a <print_power_IC_settings>
 272:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <__data_end>
 276:	88 23       	and	r24, r24
 278:	e1 f3       	breq	.-8      	; 0x272 <main+0x26>
 27a:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <__data_end>
 27e:	f9 cf       	rjmp	.-14     	; 0x272 <main+0x26>

00000280 <__vector_11>:
	
}

// each one second interrupt
ISR(TIMER1_COMPA_vect) {
 280:	1f 92       	push	r1
 282:	0f 92       	push	r0
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	0f 92       	push	r0
 288:	11 24       	eor	r1, r1
 28a:	8f 93       	push	r24
	send_message = true;
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <__data_end>
}
 292:	8f 91       	pop	r24
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <__vector_1>:

// nRF24L01 interrupt
ISR(INT0_vect) {
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	8f 93       	push	r24
	rf_interrupt = true;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <rf_interrupt>
 2b0:	8f 91       	pop	r24
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <nRF24L01_init>:
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~_BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
}
 2bc:	80 e1       	ldi	r24, 0x10	; 16
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 bc 03 	call	0x778	; 0x778 <malloc>
 2c4:	20 e1       	ldi	r18, 0x10	; 16
 2c6:	fc 01       	movw	r30, r24
 2c8:	11 92       	st	Z+, r1
 2ca:	2a 95       	dec	r18
 2cc:	e9 f7       	brne	.-6      	; 0x2c8 <nRF24L01_init+0xc>
 2ce:	08 95       	ret

000002d0 <nRF24L01_send_command>:
 2d0:	cf 92       	push	r12
 2d2:	df 92       	push	r13
 2d4:	ef 92       	push	r14
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	7c 01       	movw	r14, r24
 2e2:	86 2f       	mov	r24, r22
 2e4:	6a 01       	movw	r12, r20
 2e6:	89 01       	movw	r16, r18
 2e8:	d7 01       	movw	r26, r14
 2ea:	ed 91       	ld	r30, X+
 2ec:	fc 91       	ld	r31, X
 2ee:	11 97       	sbiw	r26, 0x01	; 1
 2f0:	90 81       	ld	r25, Z
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	12 96       	adiw	r26, 0x02	; 2
 2f8:	0c 90       	ld	r0, X
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <nRF24L01_send_command+0x30>
 2fc:	22 0f       	add	r18, r18
 2fe:	33 1f       	adc	r19, r19
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <nRF24L01_send_command+0x2c>
 304:	20 95       	com	r18
 306:	29 23       	and	r18, r25
 308:	20 83       	st	Z, r18
 30a:	0e 94 ca 02 	call	0x594	; 0x594 <SPI_tradeByte>
 30e:	f7 01       	movw	r30, r14
 310:	87 87       	std	Z+15, r24	; 0x0f
 312:	01 15       	cp	r16, r1
 314:	11 05       	cpc	r17, r1
 316:	51 f0       	breq	.+20     	; 0x32c <nRF24L01_send_command+0x5c>
 318:	e6 01       	movw	r28, r12
 31a:	0c 0d       	add	r16, r12
 31c:	1d 1d       	adc	r17, r13
 31e:	88 81       	ld	r24, Y
 320:	0e 94 ca 02 	call	0x594	; 0x594 <SPI_tradeByte>
 324:	89 93       	st	Y+, r24
 326:	c0 17       	cp	r28, r16
 328:	d1 07       	cpc	r29, r17
 32a:	c9 f7       	brne	.-14     	; 0x31e <nRF24L01_send_command+0x4e>
 32c:	d7 01       	movw	r26, r14
 32e:	ed 91       	ld	r30, X+
 330:	fc 91       	ld	r31, X
 332:	11 97       	sbiw	r26, 0x01	; 1
 334:	20 81       	ld	r18, Z
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	12 96       	adiw	r26, 0x02	; 2
 33c:	0c 90       	ld	r0, X
 33e:	12 97       	sbiw	r26, 0x02	; 2
 340:	02 c0       	rjmp	.+4      	; 0x346 <nRF24L01_send_command+0x76>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	0a 94       	dec	r0
 348:	e2 f7       	brpl	.-8      	; 0x342 <nRF24L01_send_command+0x72>
 34a:	82 2b       	or	r24, r18
 34c:	80 83       	st	Z, r24
 34e:	1f 96       	adiw	r26, 0x0f	; 15
 350:	8c 91       	ld	r24, X
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	df 90       	pop	r13
 360:	cf 90       	pop	r12
 362:	08 95       	ret

00000364 <nRF24L01_write_register>:
 364:	60 62       	ori	r22, 0x20	; 32
 366:	0e 94 68 01 	call	0x2d0	; 0x2d0 <nRF24L01_send_command>
 36a:	08 95       	ret

0000036c <nRF24L01_clear_interrupts>:

void nRF24L01_clear_interrupts(nRF24L01 *rf) {
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	1f 92       	push	r1
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
 376:	20 e7       	ldi	r18, 0x70	; 112
 378:	29 83       	std	Y+1, r18	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
 37a:	21 e0       	ldi	r18, 0x01	; 1
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	ae 01       	movw	r20, r28
 380:	4f 5f       	subi	r20, 0xFF	; 255
 382:	5f 4f       	sbci	r21, 0xFF	; 255
 384:	67 e0       	ldi	r22, 0x07	; 7
 386:	0e 94 b2 01 	call	0x364	; 0x364 <nRF24L01_write_register>
}
 38a:	0f 90       	pop	r0
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <nRF24L01_begin>:
    nRF24L01 *rf = malloc(sizeof(nRF24L01));
    memset(rf, 0, sizeof(nRF24L01));
    return rf;
}

void nRF24L01_begin(nRF24L01 *rf) {
 392:	ff 92       	push	r15
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	1f 92       	push	r1
 39e:	cd b7       	in	r28, 0x3d	; 61
 3a0:	de b7       	in	r29, 0x3e	; 62
 3a2:	8c 01       	movw	r16, r24
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
 3a4:	dc 01       	movw	r26, r24
 3a6:	ed 91       	ld	r30, X+
 3a8:	fc 91       	ld	r31, X
 3aa:	11 97       	sbiw	r26, 0x01	; 1
 3ac:	42 91       	ld	r20, -Z
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	9c 01       	movw	r18, r24
 3b4:	12 96       	adiw	r26, 0x02	; 2
 3b6:	0c 90       	ld	r0, X
 3b8:	12 97       	sbiw	r26, 0x02	; 2
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <nRF24L01_begin+0x2e>
 3bc:	22 0f       	add	r18, r18
 3be:	33 1f       	adc	r19, r19
 3c0:	0a 94       	dec	r0
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <nRF24L01_begin+0x2a>
 3c4:	24 2b       	or	r18, r20
 3c6:	20 83       	st	Z, r18
 3c8:	13 96       	adiw	r26, 0x03	; 3
 3ca:	ed 91       	ld	r30, X+
 3cc:	fc 91       	ld	r31, X
 3ce:	14 97       	sbiw	r26, 0x04	; 4
 3d0:	42 91       	ld	r20, -Z
 3d2:	9c 01       	movw	r18, r24
 3d4:	15 96       	adiw	r26, 0x05	; 5
 3d6:	0c 90       	ld	r0, X
 3d8:	15 97       	sbiw	r26, 0x05	; 5
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <nRF24L01_begin+0x4e>
 3dc:	22 0f       	add	r18, r18
 3de:	33 1f       	adc	r19, r19
 3e0:	0a 94       	dec	r0
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <nRF24L01_begin+0x4a>
 3e4:	24 2b       	or	r18, r20
 3e6:	20 83       	st	Z, r18
 3e8:	ed 91       	ld	r30, X+
 3ea:	fc 91       	ld	r31, X
 3ec:	11 97       	sbiw	r26, 0x01	; 1
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
 3ee:	40 81       	ld	r20, Z
 3f0:	9c 01       	movw	r18, r24
 3f2:	12 96       	adiw	r26, 0x02	; 2
 3f4:	0c 90       	ld	r0, X
 3f6:	12 97       	sbiw	r26, 0x02	; 2
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <nRF24L01_begin+0x6c>
 3fa:	22 0f       	add	r18, r18
 3fc:	33 1f       	adc	r19, r19
 3fe:	0a 94       	dec	r0
 400:	e2 f7       	brpl	.-8      	; 0x3fa <nRF24L01_begin+0x68>
 402:	24 2b       	or	r18, r20
 404:	20 83       	st	Z, r18
 406:	13 96       	adiw	r26, 0x03	; 3
 408:	ed 91       	ld	r30, X+
 40a:	fc 91       	ld	r31, X
 40c:	14 97       	sbiw	r26, 0x04	; 4
}

inline static void set_low(gpio_pin pin) {
    *pin.port &= ~_BV(pin.pin);
 40e:	30 81       	ld	r19, Z
 410:	ac 01       	movw	r20, r24
 412:	15 96       	adiw	r26, 0x05	; 5
 414:	0c 90       	ld	r0, X
 416:	15 97       	sbiw	r26, 0x05	; 5
 418:	02 c0       	rjmp	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41a:	44 0f       	add	r20, r20
 41c:	55 1f       	adc	r21, r21
 41e:	0a 94       	dec	r0
 420:	e2 f7       	brpl	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	24 2f       	mov	r18, r20
 424:	20 95       	com	r18
 426:	23 23       	and	r18, r19
 428:	20 83       	st	Z, r18
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
 42a:	16 96       	adiw	r26, 0x06	; 6
 42c:	ed 91       	ld	r30, X+
 42e:	fc 91       	ld	r31, X
 430:	17 97       	sbiw	r26, 0x07	; 7
 432:	42 91       	ld	r20, -Z
 434:	9c 01       	movw	r18, r24
 436:	18 96       	adiw	r26, 0x08	; 8
 438:	0c 90       	ld	r0, X
 43a:	18 97       	sbiw	r26, 0x08	; 8
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43e:	22 0f       	add	r18, r18
 440:	33 1f       	adc	r19, r19
 442:	0a 94       	dec	r0
 444:	e2 f7       	brpl	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 446:	24 2b       	or	r18, r20
 448:	20 83       	st	Z, r18
 44a:	19 96       	adiw	r26, 0x09	; 9
 44c:	ed 91       	ld	r30, X+
 44e:	fc 91       	ld	r31, X
 450:	1a 97       	sbiw	r26, 0x0a	; 10
 452:	42 91       	ld	r20, -Z
 454:	9c 01       	movw	r18, r24
 456:	1b 96       	adiw	r26, 0x0b	; 11
 458:	0c 90       	ld	r0, X
 45a:	1b 97       	sbiw	r26, 0x0b	; 11
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 45e:	22 0f       	add	r18, r18
 460:	33 1f       	adc	r19, r19
 462:	0a 94       	dec	r0
 464:	e2 f7       	brpl	.-8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 466:	24 2b       	or	r18, r20
 468:	20 83       	st	Z, r18
}

inline static void set_as_input(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
 46a:	1c 96       	adiw	r26, 0x0c	; 12
 46c:	ed 91       	ld	r30, X+
 46e:	fc 91       	ld	r31, X
 470:	1d 97       	sbiw	r26, 0x0d	; 13
 472:	22 91       	ld	r18, -Z
 474:	1e 96       	adiw	r26, 0x0e	; 14
 476:	0c 90       	ld	r0, X
 478:	02 c0       	rjmp	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	0a 94       	dec	r0
 480:	e2 f7       	brpl	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 482:	80 95       	com	r24
 484:	82 23       	and	r24, r18
 486:	80 83       	st	Z, r24
	// MISO pin automatically overrides to input
	set_as_output(rf->sck);
	set_as_output(rf->mosi);
	set_as_input(rf->miso);
	
	if(!((SPCR >> MSTR)&0x01)) SPI_init();
 488:	0c b4       	in	r0, 0x2c	; 44
 48a:	04 fe       	sbrs	r0, 4
 48c:	0e 94 b1 02 	call	0x562	; 0x562 <SPI_init>

    nRF24L01_send_command(rf, FLUSH_RX, NULL, 0);
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	40 e0       	ldi	r20, 0x00	; 0
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	62 ee       	ldi	r22, 0xE2	; 226
 49a:	c8 01       	movw	r24, r16
 49c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <nRF24L01_send_command>
    nRF24L01_send_command(rf, FLUSH_TX, NULL, 0);
 4a0:	20 e0       	ldi	r18, 0x00	; 0
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	61 ee       	ldi	r22, 0xE1	; 225
 4aa:	c8 01       	movw	r24, r16
 4ac:	0e 94 68 01 	call	0x2d0	; 0x2d0 <nRF24L01_send_command>
    nRF24L01_clear_interrupts(rf);
 4b0:	c8 01       	movw	r24, r16
 4b2:	0e 94 b6 01 	call	0x36c	; 0x36c <nRF24L01_clear_interrupts>

    uint8_t data;
    data = _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | _BV(PRIM_RX);
 4b6:	8f e0       	ldi	r24, 0x0F	; 15
 4b8:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, CONFIG, &data, 1);
 4ba:	21 e0       	ldi	r18, 0x01	; 1
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	ae 01       	movw	r20, r28
 4c0:	4f 5f       	subi	r20, 0xFF	; 255
 4c2:	5f 4f       	sbci	r21, 0xFF	; 255
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	c8 01       	movw	r24, r16
 4c8:	0e 94 b2 01 	call	0x364	; 0x364 <nRF24L01_write_register>

    // enable Auto Acknowlegde on all pipes
    data = _BV(ENAA_P0) | _BV(ENAA_P1) | _BV(ENAA_P2)
 4cc:	0f 2e       	mov	r0, r31
 4ce:	ff e3       	ldi	r31, 0x3F	; 63
 4d0:	ff 2e       	mov	r15, r31
 4d2:	f0 2d       	mov	r31, r0
 4d4:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(ENAA_P3) | _BV(ENAA_P4) | _BV(ENAA_P5);
    nRF24L01_write_register(rf, EN_AA, &data, 1);
 4d6:	21 e0       	ldi	r18, 0x01	; 1
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	ae 01       	movw	r20, r28
 4dc:	4f 5f       	subi	r20, 0xFF	; 255
 4de:	5f 4f       	sbci	r21, 0xFF	; 255
 4e0:	61 e0       	ldi	r22, 0x01	; 1
 4e2:	c8 01       	movw	r24, r16
 4e4:	0e 94 b2 01 	call	0x364	; 0x364 <nRF24L01_write_register>
	
	//set to low power: 0x09
	data = 0x09;
 4e8:	89 e0       	ldi	r24, 0x09	; 9
 4ea:	89 83       	std	Y+1, r24	; 0x01
	nRF24L01_write_register(rf, RF_SETUP, &data, 1);
 4ec:	21 e0       	ldi	r18, 0x01	; 1
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	ae 01       	movw	r20, r28
 4f2:	4f 5f       	subi	r20, 0xFF	; 255
 4f4:	5f 4f       	sbci	r21, 0xFF	; 255
 4f6:	66 e0       	ldi	r22, 0x06	; 6
 4f8:	c8 01       	movw	r24, r16
 4fa:	0e 94 b2 01 	call	0x364	; 0x364 <nRF24L01_write_register>
	
	//Change channel to 0x60
	data = 0x60;
 4fe:	80 e6       	ldi	r24, 0x60	; 96
 500:	89 83       	std	Y+1, r24	; 0x01
	nRF24L01_write_register(rf, RF_CH, &data, 1);
 502:	21 e0       	ldi	r18, 0x01	; 1
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	ae 01       	movw	r20, r28
 508:	4f 5f       	subi	r20, 0xFF	; 255
 50a:	5f 4f       	sbci	r21, 0xFF	; 255
 50c:	65 e0       	ldi	r22, 0x05	; 5
 50e:	c8 01       	movw	r24, r16
 510:	0e 94 b2 01 	call	0x364	; 0x364 <nRF24L01_write_register>

    // enable Dynamic Payload on all pipes
    data = _BV(DPL_P0) | _BV(DPL_P1) | _BV(DPL_P2)
 514:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(DPL_P3) | _BV(DPL_P4) | _BV(DPL_P5);
    nRF24L01_write_register(rf, DYNPD, &data, 1);
 516:	21 e0       	ldi	r18, 0x01	; 1
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	ae 01       	movw	r20, r28
 51c:	4f 5f       	subi	r20, 0xFF	; 255
 51e:	5f 4f       	sbci	r21, 0xFF	; 255
 520:	6c e1       	ldi	r22, 0x1C	; 28
 522:	c8 01       	movw	r24, r16
 524:	0e 94 b2 01 	call	0x364	; 0x364 <nRF24L01_write_register>

    // enable Dynamic Payload (global)
    data = _BV(EN_DPL);
 528:	84 e0       	ldi	r24, 0x04	; 4
 52a:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, FEATURE, &data, 1);
 52c:	21 e0       	ldi	r18, 0x01	; 1
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	ae 01       	movw	r20, r28
 532:	4f 5f       	subi	r20, 0xFF	; 255
 534:	5f 4f       	sbci	r21, 0xFF	; 255
 536:	6d e1       	ldi	r22, 0x1D	; 29
 538:	c8 01       	movw	r24, r16
 53a:	0e 94 b2 01 	call	0x364	; 0x364 <nRF24L01_write_register>

    // disable all rx addresses except pipe 1
    data = 0x01;
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, EN_RXADDR, &data, 1);
 542:	21 e0       	ldi	r18, 0x01	; 1
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	ae 01       	movw	r20, r28
 548:	4f 5f       	subi	r20, 0xFF	; 255
 54a:	5f 4f       	sbci	r21, 0xFF	; 255
 54c:	62 e0       	ldi	r22, 0x02	; 2
 54e:	c8 01       	movw	r24, r16
 550:	0e 94 b2 01 	call	0x364	; 0x364 <nRF24L01_write_register>
}
 554:	0f 90       	pop	r0
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	1f 91       	pop	r17
 55c:	0f 91       	pop	r16
 55e:	ff 90       	pop	r15
 560:	08 95       	ret

00000562 <SPI_init>:

#include "SPI.h"

void SPI_init(void){
	// set as master
	SPCR |= _BV(MSTR);
 562:	8c b5       	in	r24, 0x2c	; 44
 564:	80 61       	ori	r24, 0x10	; 16
 566:	8c bd       	out	0x2c, r24	; 44
	// enable SPI
	SPCR |= _BV(SPE);
 568:	8c b5       	in	r24, 0x2c	; 44
 56a:	80 64       	ori	r24, 0x40	; 64
 56c:	8c bd       	out	0x2c, r24	; 44
	// SPI mode 0: Clock Polarity CPOL = 0, Clock Phase CPHA = 0
	SPCR &= ~_BV(CPOL);
 56e:	8c b5       	in	r24, 0x2c	; 44
 570:	87 7f       	andi	r24, 0xF7	; 247
 572:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~_BV(CPHA);
 574:	8c b5       	in	r24, 0x2c	; 44
 576:	8b 7f       	andi	r24, 0xFB	; 251
 578:	8c bd       	out	0x2c, r24	; 44
	// Clock 2X speed
	//SPCR &= ~_BV(SPR0);
	SPCR |= _BV(SPR0);
 57a:	8c b5       	in	r24, 0x2c	; 44
 57c:	81 60       	ori	r24, 0x01	; 1
 57e:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~_BV(SPR1);
 580:	8c b5       	in	r24, 0x2c	; 44
 582:	8d 7f       	andi	r24, 0xFD	; 253
 584:	8c bd       	out	0x2c, r24	; 44
	//SPSR |= _BV(SPI2X);
	SPSR &= ~_BV(SPI2X);
 586:	8d b5       	in	r24, 0x2d	; 45
 588:	8e 7f       	andi	r24, 0xFE	; 254
 58a:	8d bd       	out	0x2d, r24	; 45
	// most significant first (MSB)
	SPCR &= ~_BV(DORD);
 58c:	8c b5       	in	r24, 0x2c	; 44
 58e:	8f 7d       	andi	r24, 0xDF	; 223
 590:	8c bd       	out	0x2c, r24	; 44
 592:	08 95       	ret

00000594 <SPI_tradeByte>:
}

uint8_t SPI_tradeByte(uint8_t byte) {
	SPDR = byte;                       /* SPI starts sending immediately */
 594:	8e bd       	out	0x2e, r24	; 46
	//loop_until_bit_is_set(SPSR, SPIF);                /* wait until done */
	while (!(SPSR & _BV(SPIF)));
 596:	0d b4       	in	r0, 0x2d	; 45
 598:	07 fe       	sbrs	r0, 7
 59a:	fd cf       	rjmp	.-6      	; 0x596 <SPI_tradeByte+0x2>
	/* SPDR now contains the received byte */
	return SPDR;
 59c:	8e b5       	in	r24, 0x2e	; 46
 59e:	08 95       	ret

000005a0 <initUSART>:
	uint8_t i = 0;
	while (myString[i]) {
		printByte(myString[i]);
		i++;
	}
}
 5a0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 5a4:	83 e3       	ldi	r24, 0x33	; 51
 5a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 5aa:	e0 ec       	ldi	r30, 0xC0	; 192
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	80 81       	ld	r24, Z
 5b0:	8d 7f       	andi	r24, 0xFD	; 253
 5b2:	80 83       	st	Z, r24
 5b4:	88 e1       	ldi	r24, 0x18	; 24
 5b6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 5ba:	86 e0       	ldi	r24, 0x06	; 6
 5bc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 5c0:	08 95       	ret

000005c2 <transmitByte>:
 5c2:	e0 ec       	ldi	r30, 0xC0	; 192
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	90 81       	ld	r25, Z
 5c8:	95 ff       	sbrs	r25, 5
 5ca:	fd cf       	rjmp	.-6      	; 0x5c6 <transmitByte+0x4>
 5cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 5d0:	08 95       	ret

000005d2 <printString>:
 5d2:	0f 93       	push	r16
 5d4:	1f 93       	push	r17
 5d6:	cf 93       	push	r28
 5d8:	fc 01       	movw	r30, r24
 5da:	80 81       	ld	r24, Z
 5dc:	88 23       	and	r24, r24
 5de:	59 f0       	breq	.+22     	; 0x5f6 <printString+0x24>
 5e0:	8f 01       	movw	r16, r30
 5e2:	c0 e0       	ldi	r28, 0x00	; 0
 5e4:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <transmitByte>
 5e8:	cf 5f       	subi	r28, 0xFF	; 255
 5ea:	f8 01       	movw	r30, r16
 5ec:	ec 0f       	add	r30, r28
 5ee:	f1 1d       	adc	r31, r1
 5f0:	80 81       	ld	r24, Z
 5f2:	81 11       	cpse	r24, r1
 5f4:	f7 cf       	rjmp	.-18     	; 0x5e4 <printString+0x12>
 5f6:	cf 91       	pop	r28
 5f8:	1f 91       	pop	r17
 5fa:	0f 91       	pop	r16
 5fc:	08 95       	ret

000005fe <printWord>:
  transmitByte('0' + (byte / 100));                        /* Hundreds */
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
  transmitByte('0' + (byte % 10));                             /* Ones */
}

void printWord(uint16_t word) {
 5fe:	0f 93       	push	r16
 600:	1f 93       	push	r17
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
 606:	8c 01       	movw	r16, r24
	  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
 608:	9c 01       	movw	r18, r24
 60a:	32 95       	swap	r19
 60c:	22 95       	swap	r18
 60e:	2f 70       	andi	r18, 0x0F	; 15
 610:	23 27       	eor	r18, r19
 612:	3f 70       	andi	r19, 0x0F	; 15
 614:	23 27       	eor	r18, r19
 616:	a7 e4       	ldi	r26, 0x47	; 71
 618:	b3 e0       	ldi	r27, 0x03	; 3
 61a:	0e 94 ad 03 	call	0x75a	; 0x75a <__umulhisi3>
 61e:	96 95       	lsr	r25
 620:	87 95       	ror	r24
 622:	96 95       	lsr	r25
 624:	87 95       	ror	r24
 626:	96 95       	lsr	r25
 628:	87 95       	ror	r24
 62a:	80 5d       	subi	r24, 0xD0	; 208
 62c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <transmitByte>
	  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 630:	98 01       	movw	r18, r16
 632:	36 95       	lsr	r19
 634:	27 95       	ror	r18
 636:	36 95       	lsr	r19
 638:	27 95       	ror	r18
 63a:	36 95       	lsr	r19
 63c:	27 95       	ror	r18
 63e:	a5 ec       	ldi	r26, 0xC5	; 197
 640:	b0 e2       	ldi	r27, 0x20	; 32
 642:	0e 94 ad 03 	call	0x75a	; 0x75a <__umulhisi3>
 646:	ac 01       	movw	r20, r24
 648:	52 95       	swap	r21
 64a:	42 95       	swap	r20
 64c:	4f 70       	andi	r20, 0x0F	; 15
 64e:	45 27       	eor	r20, r21
 650:	5f 70       	andi	r21, 0x0F	; 15
 652:	45 27       	eor	r20, r21
 654:	9a 01       	movw	r18, r20
 656:	ad ec       	ldi	r26, 0xCD	; 205
 658:	bc ec       	ldi	r27, 0xCC	; 204
 65a:	0e 94 ad 03 	call	0x75a	; 0x75a <__umulhisi3>
 65e:	96 95       	lsr	r25
 660:	87 95       	ror	r24
 662:	96 95       	lsr	r25
 664:	87 95       	ror	r24
 666:	96 95       	lsr	r25
 668:	87 95       	ror	r24
 66a:	9c 01       	movw	r18, r24
 66c:	22 0f       	add	r18, r18
 66e:	33 1f       	adc	r19, r19
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	88 0f       	add	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	82 0f       	add	r24, r18
 67e:	93 1f       	adc	r25, r19
 680:	9a 01       	movw	r18, r20
 682:	28 1b       	sub	r18, r24
 684:	39 0b       	sbc	r19, r25
 686:	c9 01       	movw	r24, r18
 688:	80 5d       	subi	r24, 0xD0	; 208
 68a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <transmitByte>
	  //printString("."); //
	  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 68e:	98 01       	movw	r18, r16
 690:	36 95       	lsr	r19
 692:	27 95       	ror	r18
 694:	36 95       	lsr	r19
 696:	27 95       	ror	r18
 698:	ab e7       	ldi	r26, 0x7B	; 123
 69a:	b4 e1       	ldi	r27, 0x14	; 20
 69c:	0e 94 ad 03 	call	0x75a	; 0x75a <__umulhisi3>
 6a0:	ac 01       	movw	r20, r24
 6a2:	56 95       	lsr	r21
 6a4:	47 95       	ror	r20
 6a6:	9a 01       	movw	r18, r20
 6a8:	ad ec       	ldi	r26, 0xCD	; 205
 6aa:	bc ec       	ldi	r27, 0xCC	; 204
 6ac:	0e 94 ad 03 	call	0x75a	; 0x75a <__umulhisi3>
 6b0:	96 95       	lsr	r25
 6b2:	87 95       	ror	r24
 6b4:	96 95       	lsr	r25
 6b6:	87 95       	ror	r24
 6b8:	96 95       	lsr	r25
 6ba:	87 95       	ror	r24
 6bc:	9c 01       	movw	r18, r24
 6be:	22 0f       	add	r18, r18
 6c0:	33 1f       	adc	r19, r19
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	88 0f       	add	r24, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	82 0f       	add	r24, r18
 6d0:	93 1f       	adc	r25, r19
 6d2:	9a 01       	movw	r18, r20
 6d4:	28 1b       	sub	r18, r24
 6d6:	39 0b       	sbc	r19, r25
 6d8:	c9 01       	movw	r24, r18
 6da:	80 5d       	subi	r24, 0xD0	; 208
 6dc:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <transmitByte>
	  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 6e0:	98 01       	movw	r18, r16
 6e2:	ad ec       	ldi	r26, 0xCD	; 205
 6e4:	bc ec       	ldi	r27, 0xCC	; 204
 6e6:	0e 94 ad 03 	call	0x75a	; 0x75a <__umulhisi3>
 6ea:	ec 01       	movw	r28, r24
 6ec:	d6 95       	lsr	r29
 6ee:	c7 95       	ror	r28
 6f0:	d6 95       	lsr	r29
 6f2:	c7 95       	ror	r28
 6f4:	d6 95       	lsr	r29
 6f6:	c7 95       	ror	r28
 6f8:	9e 01       	movw	r18, r28
 6fa:	0e 94 ad 03 	call	0x75a	; 0x75a <__umulhisi3>
 6fe:	96 95       	lsr	r25
 700:	87 95       	ror	r24
 702:	96 95       	lsr	r25
 704:	87 95       	ror	r24
 706:	96 95       	lsr	r25
 708:	87 95       	ror	r24
 70a:	9c 01       	movw	r18, r24
 70c:	22 0f       	add	r18, r18
 70e:	33 1f       	adc	r19, r19
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	88 0f       	add	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	82 0f       	add	r24, r18
 71e:	93 1f       	adc	r25, r19
 720:	9e 01       	movw	r18, r28
 722:	28 1b       	sub	r18, r24
 724:	39 0b       	sbc	r19, r25
 726:	c9 01       	movw	r24, r18
 728:	80 5d       	subi	r24, 0xD0	; 208
 72a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <transmitByte>
	  transmitByte('0' + (word % 10));                             /* Ones */
 72e:	ce 01       	movw	r24, r28
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	cc 0f       	add	r28, r28
 736:	dd 1f       	adc	r29, r29
 738:	cc 0f       	add	r28, r28
 73a:	dd 1f       	adc	r29, r29
 73c:	cc 0f       	add	r28, r28
 73e:	dd 1f       	adc	r29, r29
 740:	c8 0f       	add	r28, r24
 742:	d9 1f       	adc	r29, r25
 744:	c8 01       	movw	r24, r16
 746:	8c 1b       	sub	r24, r28
 748:	9d 0b       	sbc	r25, r29
 74a:	80 5d       	subi	r24, 0xD0	; 208
 74c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <transmitByte>
}
 750:	df 91       	pop	r29
 752:	cf 91       	pop	r28
 754:	1f 91       	pop	r17
 756:	0f 91       	pop	r16
 758:	08 95       	ret

0000075a <__umulhisi3>:
 75a:	a2 9f       	mul	r26, r18
 75c:	b0 01       	movw	r22, r0
 75e:	b3 9f       	mul	r27, r19
 760:	c0 01       	movw	r24, r0
 762:	a3 9f       	mul	r26, r19
 764:	70 0d       	add	r23, r0
 766:	81 1d       	adc	r24, r1
 768:	11 24       	eor	r1, r1
 76a:	91 1d       	adc	r25, r1
 76c:	b2 9f       	mul	r27, r18
 76e:	70 0d       	add	r23, r0
 770:	81 1d       	adc	r24, r1
 772:	11 24       	eor	r1, r1
 774:	91 1d       	adc	r25, r1
 776:	08 95       	ret

00000778 <malloc>:
 778:	0f 93       	push	r16
 77a:	1f 93       	push	r17
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	82 30       	cpi	r24, 0x02	; 2
 782:	91 05       	cpc	r25, r1
 784:	10 f4       	brcc	.+4      	; 0x78a <malloc+0x12>
 786:	82 e0       	ldi	r24, 0x02	; 2
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <__flp>
 78e:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <__flp+0x1>
 792:	20 e0       	ldi	r18, 0x00	; 0
 794:	30 e0       	ldi	r19, 0x00	; 0
 796:	a0 e0       	ldi	r26, 0x00	; 0
 798:	b0 e0       	ldi	r27, 0x00	; 0
 79a:	30 97       	sbiw	r30, 0x00	; 0
 79c:	19 f1       	breq	.+70     	; 0x7e4 <malloc+0x6c>
 79e:	40 81       	ld	r20, Z
 7a0:	51 81       	ldd	r21, Z+1	; 0x01
 7a2:	02 81       	ldd	r16, Z+2	; 0x02
 7a4:	13 81       	ldd	r17, Z+3	; 0x03
 7a6:	48 17       	cp	r20, r24
 7a8:	59 07       	cpc	r21, r25
 7aa:	c8 f0       	brcs	.+50     	; 0x7de <malloc+0x66>
 7ac:	84 17       	cp	r24, r20
 7ae:	95 07       	cpc	r25, r21
 7b0:	69 f4       	brne	.+26     	; 0x7cc <malloc+0x54>
 7b2:	10 97       	sbiw	r26, 0x00	; 0
 7b4:	31 f0       	breq	.+12     	; 0x7c2 <malloc+0x4a>
 7b6:	12 96       	adiw	r26, 0x02	; 2
 7b8:	0c 93       	st	X, r16
 7ba:	12 97       	sbiw	r26, 0x02	; 2
 7bc:	13 96       	adiw	r26, 0x03	; 3
 7be:	1c 93       	st	X, r17
 7c0:	27 c0       	rjmp	.+78     	; 0x810 <malloc+0x98>
 7c2:	00 93 52 02 	sts	0x0252, r16	; 0x800252 <__flp>
 7c6:	10 93 53 02 	sts	0x0253, r17	; 0x800253 <__flp+0x1>
 7ca:	22 c0       	rjmp	.+68     	; 0x810 <malloc+0x98>
 7cc:	21 15       	cp	r18, r1
 7ce:	31 05       	cpc	r19, r1
 7d0:	19 f0       	breq	.+6      	; 0x7d8 <malloc+0x60>
 7d2:	42 17       	cp	r20, r18
 7d4:	53 07       	cpc	r21, r19
 7d6:	18 f4       	brcc	.+6      	; 0x7de <malloc+0x66>
 7d8:	9a 01       	movw	r18, r20
 7da:	bd 01       	movw	r22, r26
 7dc:	ef 01       	movw	r28, r30
 7de:	df 01       	movw	r26, r30
 7e0:	f8 01       	movw	r30, r16
 7e2:	db cf       	rjmp	.-74     	; 0x79a <malloc+0x22>
 7e4:	21 15       	cp	r18, r1
 7e6:	31 05       	cpc	r19, r1
 7e8:	f9 f0       	breq	.+62     	; 0x828 <malloc+0xb0>
 7ea:	28 1b       	sub	r18, r24
 7ec:	39 0b       	sbc	r19, r25
 7ee:	24 30       	cpi	r18, 0x04	; 4
 7f0:	31 05       	cpc	r19, r1
 7f2:	80 f4       	brcc	.+32     	; 0x814 <malloc+0x9c>
 7f4:	8a 81       	ldd	r24, Y+2	; 0x02
 7f6:	9b 81       	ldd	r25, Y+3	; 0x03
 7f8:	61 15       	cp	r22, r1
 7fa:	71 05       	cpc	r23, r1
 7fc:	21 f0       	breq	.+8      	; 0x806 <malloc+0x8e>
 7fe:	fb 01       	movw	r30, r22
 800:	93 83       	std	Z+3, r25	; 0x03
 802:	82 83       	std	Z+2, r24	; 0x02
 804:	04 c0       	rjmp	.+8      	; 0x80e <malloc+0x96>
 806:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <__flp+0x1>
 80a:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <__flp>
 80e:	fe 01       	movw	r30, r28
 810:	32 96       	adiw	r30, 0x02	; 2
 812:	44 c0       	rjmp	.+136    	; 0x89c <malloc+0x124>
 814:	fe 01       	movw	r30, r28
 816:	e2 0f       	add	r30, r18
 818:	f3 1f       	adc	r31, r19
 81a:	81 93       	st	Z+, r24
 81c:	91 93       	st	Z+, r25
 81e:	22 50       	subi	r18, 0x02	; 2
 820:	31 09       	sbc	r19, r1
 822:	39 83       	std	Y+1, r19	; 0x01
 824:	28 83       	st	Y, r18
 826:	3a c0       	rjmp	.+116    	; 0x89c <malloc+0x124>
 828:	20 91 50 02 	lds	r18, 0x0250	; 0x800250 <__brkval>
 82c:	30 91 51 02 	lds	r19, 0x0251	; 0x800251 <__brkval+0x1>
 830:	23 2b       	or	r18, r19
 832:	41 f4       	brne	.+16     	; 0x844 <malloc+0xcc>
 834:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 838:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 83c:	30 93 51 02 	sts	0x0251, r19	; 0x800251 <__brkval+0x1>
 840:	20 93 50 02 	sts	0x0250, r18	; 0x800250 <__brkval>
 844:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 848:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 84c:	21 15       	cp	r18, r1
 84e:	31 05       	cpc	r19, r1
 850:	41 f4       	brne	.+16     	; 0x862 <malloc+0xea>
 852:	2d b7       	in	r18, 0x3d	; 61
 854:	3e b7       	in	r19, 0x3e	; 62
 856:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 85a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 85e:	24 1b       	sub	r18, r20
 860:	35 0b       	sbc	r19, r21
 862:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <__brkval>
 866:	f0 91 51 02 	lds	r31, 0x0251	; 0x800251 <__brkval+0x1>
 86a:	e2 17       	cp	r30, r18
 86c:	f3 07       	cpc	r31, r19
 86e:	a0 f4       	brcc	.+40     	; 0x898 <malloc+0x120>
 870:	2e 1b       	sub	r18, r30
 872:	3f 0b       	sbc	r19, r31
 874:	28 17       	cp	r18, r24
 876:	39 07       	cpc	r19, r25
 878:	78 f0       	brcs	.+30     	; 0x898 <malloc+0x120>
 87a:	ac 01       	movw	r20, r24
 87c:	4e 5f       	subi	r20, 0xFE	; 254
 87e:	5f 4f       	sbci	r21, 0xFF	; 255
 880:	24 17       	cp	r18, r20
 882:	35 07       	cpc	r19, r21
 884:	48 f0       	brcs	.+18     	; 0x898 <malloc+0x120>
 886:	4e 0f       	add	r20, r30
 888:	5f 1f       	adc	r21, r31
 88a:	50 93 51 02 	sts	0x0251, r21	; 0x800251 <__brkval+0x1>
 88e:	40 93 50 02 	sts	0x0250, r20	; 0x800250 <__brkval>
 892:	81 93       	st	Z+, r24
 894:	91 93       	st	Z+, r25
 896:	02 c0       	rjmp	.+4      	; 0x89c <malloc+0x124>
 898:	e0 e0       	ldi	r30, 0x00	; 0
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	cf 01       	movw	r24, r30
 89e:	df 91       	pop	r29
 8a0:	cf 91       	pop	r28
 8a2:	1f 91       	pop	r17
 8a4:	0f 91       	pop	r16
 8a6:	08 95       	ret

000008a8 <free>:
 8a8:	cf 93       	push	r28
 8aa:	df 93       	push	r29
 8ac:	00 97       	sbiw	r24, 0x00	; 0
 8ae:	09 f4       	brne	.+2      	; 0x8b2 <free+0xa>
 8b0:	81 c0       	rjmp	.+258    	; 0x9b4 <__stack+0xb5>
 8b2:	fc 01       	movw	r30, r24
 8b4:	32 97       	sbiw	r30, 0x02	; 2
 8b6:	13 82       	std	Z+3, r1	; 0x03
 8b8:	12 82       	std	Z+2, r1	; 0x02
 8ba:	a0 91 52 02 	lds	r26, 0x0252	; 0x800252 <__flp>
 8be:	b0 91 53 02 	lds	r27, 0x0253	; 0x800253 <__flp+0x1>
 8c2:	10 97       	sbiw	r26, 0x00	; 0
 8c4:	81 f4       	brne	.+32     	; 0x8e6 <free+0x3e>
 8c6:	20 81       	ld	r18, Z
 8c8:	31 81       	ldd	r19, Z+1	; 0x01
 8ca:	82 0f       	add	r24, r18
 8cc:	93 1f       	adc	r25, r19
 8ce:	20 91 50 02 	lds	r18, 0x0250	; 0x800250 <__brkval>
 8d2:	30 91 51 02 	lds	r19, 0x0251	; 0x800251 <__brkval+0x1>
 8d6:	28 17       	cp	r18, r24
 8d8:	39 07       	cpc	r19, r25
 8da:	51 f5       	brne	.+84     	; 0x930 <__stack+0x31>
 8dc:	f0 93 51 02 	sts	0x0251, r31	; 0x800251 <__brkval+0x1>
 8e0:	e0 93 50 02 	sts	0x0250, r30	; 0x800250 <__brkval>
 8e4:	67 c0       	rjmp	.+206    	; 0x9b4 <__stack+0xb5>
 8e6:	ed 01       	movw	r28, r26
 8e8:	20 e0       	ldi	r18, 0x00	; 0
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	ce 17       	cp	r28, r30
 8ee:	df 07       	cpc	r29, r31
 8f0:	40 f4       	brcc	.+16     	; 0x902 <__stack+0x3>
 8f2:	4a 81       	ldd	r20, Y+2	; 0x02
 8f4:	5b 81       	ldd	r21, Y+3	; 0x03
 8f6:	9e 01       	movw	r18, r28
 8f8:	41 15       	cp	r20, r1
 8fa:	51 05       	cpc	r21, r1
 8fc:	f1 f0       	breq	.+60     	; 0x93a <__stack+0x3b>
 8fe:	ea 01       	movw	r28, r20
 900:	f5 cf       	rjmp	.-22     	; 0x8ec <free+0x44>
 902:	d3 83       	std	Z+3, r29	; 0x03
 904:	c2 83       	std	Z+2, r28	; 0x02
 906:	40 81       	ld	r20, Z
 908:	51 81       	ldd	r21, Z+1	; 0x01
 90a:	84 0f       	add	r24, r20
 90c:	95 1f       	adc	r25, r21
 90e:	c8 17       	cp	r28, r24
 910:	d9 07       	cpc	r29, r25
 912:	59 f4       	brne	.+22     	; 0x92a <__stack+0x2b>
 914:	88 81       	ld	r24, Y
 916:	99 81       	ldd	r25, Y+1	; 0x01
 918:	84 0f       	add	r24, r20
 91a:	95 1f       	adc	r25, r21
 91c:	02 96       	adiw	r24, 0x02	; 2
 91e:	91 83       	std	Z+1, r25	; 0x01
 920:	80 83       	st	Z, r24
 922:	8a 81       	ldd	r24, Y+2	; 0x02
 924:	9b 81       	ldd	r25, Y+3	; 0x03
 926:	93 83       	std	Z+3, r25	; 0x03
 928:	82 83       	std	Z+2, r24	; 0x02
 92a:	21 15       	cp	r18, r1
 92c:	31 05       	cpc	r19, r1
 92e:	29 f4       	brne	.+10     	; 0x93a <__stack+0x3b>
 930:	f0 93 53 02 	sts	0x0253, r31	; 0x800253 <__flp+0x1>
 934:	e0 93 52 02 	sts	0x0252, r30	; 0x800252 <__flp>
 938:	3d c0       	rjmp	.+122    	; 0x9b4 <__stack+0xb5>
 93a:	e9 01       	movw	r28, r18
 93c:	fb 83       	std	Y+3, r31	; 0x03
 93e:	ea 83       	std	Y+2, r30	; 0x02
 940:	49 91       	ld	r20, Y+
 942:	59 91       	ld	r21, Y+
 944:	c4 0f       	add	r28, r20
 946:	d5 1f       	adc	r29, r21
 948:	ec 17       	cp	r30, r28
 94a:	fd 07       	cpc	r31, r29
 94c:	61 f4       	brne	.+24     	; 0x966 <__stack+0x67>
 94e:	80 81       	ld	r24, Z
 950:	91 81       	ldd	r25, Z+1	; 0x01
 952:	84 0f       	add	r24, r20
 954:	95 1f       	adc	r25, r21
 956:	02 96       	adiw	r24, 0x02	; 2
 958:	e9 01       	movw	r28, r18
 95a:	99 83       	std	Y+1, r25	; 0x01
 95c:	88 83       	st	Y, r24
 95e:	82 81       	ldd	r24, Z+2	; 0x02
 960:	93 81       	ldd	r25, Z+3	; 0x03
 962:	9b 83       	std	Y+3, r25	; 0x03
 964:	8a 83       	std	Y+2, r24	; 0x02
 966:	e0 e0       	ldi	r30, 0x00	; 0
 968:	f0 e0       	ldi	r31, 0x00	; 0
 96a:	12 96       	adiw	r26, 0x02	; 2
 96c:	8d 91       	ld	r24, X+
 96e:	9c 91       	ld	r25, X
 970:	13 97       	sbiw	r26, 0x03	; 3
 972:	00 97       	sbiw	r24, 0x00	; 0
 974:	19 f0       	breq	.+6      	; 0x97c <__stack+0x7d>
 976:	fd 01       	movw	r30, r26
 978:	dc 01       	movw	r26, r24
 97a:	f7 cf       	rjmp	.-18     	; 0x96a <__stack+0x6b>
 97c:	8d 91       	ld	r24, X+
 97e:	9c 91       	ld	r25, X
 980:	11 97       	sbiw	r26, 0x01	; 1
 982:	9d 01       	movw	r18, r26
 984:	2e 5f       	subi	r18, 0xFE	; 254
 986:	3f 4f       	sbci	r19, 0xFF	; 255
 988:	82 0f       	add	r24, r18
 98a:	93 1f       	adc	r25, r19
 98c:	20 91 50 02 	lds	r18, 0x0250	; 0x800250 <__brkval>
 990:	30 91 51 02 	lds	r19, 0x0251	; 0x800251 <__brkval+0x1>
 994:	28 17       	cp	r18, r24
 996:	39 07       	cpc	r19, r25
 998:	69 f4       	brne	.+26     	; 0x9b4 <__stack+0xb5>
 99a:	30 97       	sbiw	r30, 0x00	; 0
 99c:	29 f4       	brne	.+10     	; 0x9a8 <__stack+0xa9>
 99e:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <__flp+0x1>
 9a2:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <__flp>
 9a6:	02 c0       	rjmp	.+4      	; 0x9ac <__stack+0xad>
 9a8:	13 82       	std	Z+3, r1	; 0x03
 9aa:	12 82       	std	Z+2, r1	; 0x02
 9ac:	b0 93 51 02 	sts	0x0251, r27	; 0x800251 <__brkval+0x1>
 9b0:	a0 93 50 02 	sts	0x0250, r26	; 0x800250 <__brkval>
 9b4:	df 91       	pop	r29
 9b6:	cf 91       	pop	r28
 9b8:	08 95       	ret

000009ba <_exit>:
 9ba:	f8 94       	cli

000009bc <__stop_program>:
 9bc:	ff cf       	rjmp	.-2      	; 0x9bc <__stop_program>
