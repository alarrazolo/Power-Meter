
PowerMeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014c  00800100  00000aa0  00000b34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aa0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080024c  0080024c  00000c80  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c40  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db9  00000000  00000000  00003b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011c4  00000000  00000000  00004939  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000624  00000000  00000000  00005b00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008da  00000000  00000000  00006124  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016e2  00000000  00000000  000069fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  000080e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 34       	cpi	r26, 0x4C	; 76
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac e4       	ldi	r26, 0x4C	; 76
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 35       	cpi	r26, 0x52	; 82
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <main>
  9e:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initI2C>:
//#ifndef F_CPU                          /* if not defined in Makefile... */
//#define F_CPU  1000000UL                     /* set a safe default baud rate */
//#endif

void initI2C(void) {
  TWBR = 32;                               /* set bit rate, see p. 242 */
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
                                     /* 8MHz / (16+2*TWBR*1) ~= 100kHz */
  TWCR |= (1 << TWEN);                                       /* enable */
  ac:	ec eb       	ldi	r30, 0xBC	; 188
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <pIC_Start>:
}

void pIC_Start(void){
	
	// set chip select port to output.
	DDRB |= (1<<0);
  b8:	20 9a       	sbi	0x04, 0	; 4
	//set chip select on power meter IC high
	PORTB |= (1<<0);
  ba:	28 9a       	sbi	0x05, 0	; 5
	
	if(!((SPCR >> MSTR)&0x01)) SPI_init();
  bc:	0c b4       	in	r0, 0x2c	; 44
  be:	04 fe       	sbrs	r0, 4
  c0:	0e 94 08 03 	call	0x610	; 0x610 <SPI_init>
  c4:	08 95       	ret

000000c6 <get_pIC_RegValue>:
	//set_pIC_RegValue(AdjStart, 0x56, 0x78);
	
}


uint16_t get_pIC_RegValue(uint8_t pICRegister){
  c6:	cf 93       	push	r28
	
	//send AND read Byte with register address Byte to read back 16 bit value.
	
	PORTB &= ~(1<<0); // set chip select bit low to initiate SPI communication. 
  c8:	28 98       	cbi	0x05, 0	; 5
	SPI_tradeByte(ReadRegPower | pICRegister); // AND read Byte with register address and send it over SPI
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	0e 94 21 03 	call	0x642	; 0x642 <SPI_tradeByte>
	uint8_t highByte = SPI_tradeByte(0); // Read MSD Byte first.
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 21 03 	call	0x642	; 0x642 <SPI_tradeByte>
  d6:	c8 2f       	mov	r28, r24
	uint8_t lowByte = SPI_tradeByte(0); // Read LSD Byte second.
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 21 03 	call	0x642	; 0x642 <SPI_tradeByte>
	PORTB |= (1<<0); // set chip select bit high to terminate SPI communication.
  de:	28 9a       	sbi	0x05, 0	; 5
	uint16_t full16Byte = (highByte << 8) | lowByte; // Combine MSB and LSB together into 16 bit Byte.
	return full16Byte; // return Byte to function call. 
  e0:	2c 2f       	mov	r18, r28
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	32 2f       	mov	r19, r18
  e6:	22 27       	eor	r18, r18
	
	//printHexByte(pIC_d1bitHigh);
	//printHexByte(pIC_d1bitLow);
	//printString("H\r\n");
	
}
  e8:	a9 01       	movw	r20, r18
  ea:	48 2b       	or	r20, r24
  ec:	ca 01       	movw	r24, r20
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <setup_rf>:
	printString("/");
	printByte(date);
	printString("/");
	printWord(year);
	printString("\r\n");
}
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	0e 94 ad 01 	call	0x35a	; 0x35a <nRF24L01_init>
  fa:	ec 01       	movw	r28, r24
  fc:	85 e2       	ldi	r24, 0x25	; 37
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	99 83       	std	Y+1, r25	; 0x01
 102:	88 83       	st	Y, r24
 104:	22 e0       	ldi	r18, 0x02	; 2
 106:	2a 83       	std	Y+2, r18	; 0x02
 108:	9c 83       	std	Y+4, r25	; 0x04
 10a:	8b 83       	std	Y+3, r24	; 0x03
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	2d 83       	std	Y+5, r18	; 0x05
 110:	9f 83       	std	Y+7, r25	; 0x07
 112:	8e 83       	std	Y+6, r24	; 0x06
 114:	25 e0       	ldi	r18, 0x05	; 5
 116:	28 87       	std	Y+8, r18	; 0x08
 118:	9a 87       	std	Y+10, r25	; 0x0a
 11a:	89 87       	std	Y+9, r24	; 0x09
 11c:	23 e0       	ldi	r18, 0x03	; 3
 11e:	2b 87       	std	Y+11, r18	; 0x0b
 120:	9d 87       	std	Y+13, r25	; 0x0d
 122:	8c 87       	std	Y+12, r24	; 0x0c
 124:	84 e0       	ldi	r24, 0x04	; 4
 126:	8e 87       	std	Y+14, r24	; 0x0e
 128:	e9 e6       	ldi	r30, 0x69	; 105
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	80 83       	st	Z, r24
 132:	e8 9a       	sbi	0x1d, 0	; 29
 134:	ce 01       	movw	r24, r28
 136:	0e 94 18 02 	call	0x430	; 0x430 <nRF24L01_begin>
 13a:	ce 01       	movw	r24, r28
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <setup_timer>:
 142:	e1 e8       	ldi	r30, 0x81	; 129
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	80 83       	st	Z, r24
 14c:	af e6       	ldi	r26, 0x6F	; 111
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	8c 91       	ld	r24, X
 152:	82 60       	ori	r24, 0x02	; 2
 154:	8c 93       	st	X, r24
 156:	82 e1       	ldi	r24, 0x12	; 18
 158:	9a e7       	ldi	r25, 0x7A	; 122
 15a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 15e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 162:	80 81       	ld	r24, Z
 164:	84 60       	ori	r24, 0x04	; 4
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <print_RF_settings>:
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 40 03 	call	0x680	; 0x680 <printString>
 172:	85 e0       	ldi	r24, 0x05	; 5
 174:	0e 94 00 03 	call	0x600	; 0x600 <getRFRegValue>
 178:	0e 94 0e 04 	call	0x81c	; 0x81c <printHexByte>
 17c:	82 e2       	ldi	r24, 0x22	; 34
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 40 03 	call	0x680	; 0x680 <printString>
 184:	86 e2       	ldi	r24, 0x26	; 38
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 40 03 	call	0x680	; 0x680 <printString>
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	0e 94 00 03 	call	0x600	; 0x600 <getRFRegValue>
 192:	0e 94 0e 04 	call	0x81c	; 0x81c <printHexByte>
 196:	82 e2       	ldi	r24, 0x22	; 34
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 40 03 	call	0x680	; 0x680 <printString>
 19e:	08 95       	ret

000001a0 <print_power_IC_settings>:

void print_power_IC_settings(void){
	printString("Power IC Settings:");
 1a0:	8e e3       	ldi	r24, 0x3E	; 62
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	printString("\r\n");
 1a8:	86 e4       	ldi	r24, 0x46	; 70
 1aa:	92 e0       	ldi	r25, 0x02	; 2
 1ac:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	
	printString("System Status: ");
 1b0:	81 e5       	ldi	r24, 0x51	; 81
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	printWord(get_pIC_RegValue(SysStatus));
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 1be:	0e 94 56 03 	call	0x6ac	; 0x6ac <printWord>
	printString("\r\n");
 1c2:	86 e4       	ldi	r24, 0x46	; 70
 1c4:	92 e0       	ldi	r25, 0x02	; 2
 1c6:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	
	printString("Metering Status: ");
 1ca:	81 e6       	ldi	r24, 0x61	; 97
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	printWord(get_pIC_RegValue(EnStatus));
 1d2:	86 e4       	ldi	r24, 0x46	; 70
 1d4:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 1d8:	0e 94 56 03 	call	0x6ac	; 0x6ac <printWord>
	printString("\r\n");
 1dc:	86 e4       	ldi	r24, 0x46	; 70
 1de:	92 e0       	ldi	r25, 0x02	; 2
 1e0:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	
	printString("Metering Mode: ");
 1e4:	83 e7       	ldi	r24, 0x73	; 115
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	printWord(get_pIC_RegValue(MMode));
 1ec:	8b e2       	ldi	r24, 0x2B	; 43
 1ee:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 1f2:	0e 94 56 03 	call	0x6ac	; 0x6ac <printWord>
	printString("\r\n");
 1f6:	86 e4       	ldi	r24, 0x46	; 70
 1f8:	92 e0       	ldi	r25, 0x02	; 2
 1fa:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	
	printString("Checksum 1: ");
 1fe:	83 e8       	ldi	r24, 0x83	; 131
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	printWord(get_pIC_RegValue(CS1));
 206:	8c e2       	ldi	r24, 0x2C	; 44
 208:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 20c:	0e 94 56 03 	call	0x6ac	; 0x6ac <printWord>
	printString("\r\n");
 210:	86 e4       	ldi	r24, 0x46	; 70
 212:	92 e0       	ldi	r25, 0x02	; 2
 214:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	
	printString("Checksum 2: ");
 218:	80 e9       	ldi	r24, 0x90	; 144
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	printWord((get_pIC_RegValue(CS2)));
 220:	8b e3       	ldi	r24, 0x3B	; 59
 222:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 226:	0e 94 56 03 	call	0x6ac	; 0x6ac <printWord>
	printString("\r\n");
 22a:	86 e4       	ldi	r24, 0x46	; 70
 22c:	92 e0       	ldi	r25, 0x02	; 2
 22e:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	
	printString("Measurement Calibration Start Command: ");
 232:	8d e9       	ldi	r24, 0x9D	; 157
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	printWord((get_pIC_RegValue(AdjStart)));
 23a:	80 e3       	ldi	r24, 0x30	; 48
 23c:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 240:	0e 94 56 03 	call	0x6ac	; 0x6ac <printWord>
	printString("\r\n");
 244:	86 e4       	ldi	r24, 0x46	; 70
 246:	92 e0       	ldi	r25, 0x02	; 2
 248:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	
	printString("Voltage RMS Gain: ");
 24c:	85 ec       	ldi	r24, 0xC5	; 197
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	printWord((get_pIC_RegValue(Ugain)));
 254:	81 e3       	ldi	r24, 0x31	; 49
 256:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 25a:	0e 94 56 03 	call	0x6ac	; 0x6ac <printWord>
	printString("\r\n");
 25e:	86 e4       	ldi	r24, 0x46	; 70
 260:	92 e0       	ldi	r25, 0x02	; 2
 262:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	
	printString("L Line Current RMS Gain: ");
 266:	88 ed       	ldi	r24, 0xD8	; 216
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	printWord((get_pIC_RegValue(IgainL)));
 26e:	82 e3       	ldi	r24, 0x32	; 50
 270:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 274:	0e 94 56 03 	call	0x6ac	; 0x6ac <printWord>
	printString("\r\n");
 278:	86 e4       	ldi	r24, 0x46	; 70
 27a:	92 e0       	ldi	r25, 0x02	; 2
 27c:	0e 94 40 03 	call	0x680	; 0x680 <printString>
 280:	08 95       	ret

00000282 <print_power_data>:

void print_power_data(void){
	
	//printString("Measurement Calibration start: \r\n");
	//printWord(get_pIC_RegValue(AdjStart));
	printString("Voltage: ");
 282:	82 ef       	ldi	r24, 0xF2	; 242
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	printWord(get_pIC_RegValue(Urms));
 28a:	89 e4       	ldi	r24, 0x49	; 73
 28c:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 290:	0e 94 56 03 	call	0x6ac	; 0x6ac <printWord>
	printString("\tCurrent: ");
 294:	8c ef       	ldi	r24, 0xFC	; 252
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	printWord(get_pIC_RegValue(Irms));
 29c:	88 e4       	ldi	r24, 0x48	; 72
 29e:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 2a2:	0e 94 56 03 	call	0x6ac	; 0x6ac <printWord>
	printString("\t Active Power: ");
 2a6:	87 e0       	ldi	r24, 0x07	; 7
 2a8:	92 e0       	ldi	r25, 0x02	; 2
 2aa:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	printWord(get_pIC_RegValue(Pmean));
 2ae:	8a e4       	ldi	r24, 0x4A	; 74
 2b0:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 2b4:	0e 94 56 03 	call	0x6ac	; 0x6ac <printWord>
	printString("\tFrequency: ");
 2b8:	88 e1       	ldi	r24, 0x18	; 24
 2ba:	92 e0       	ldi	r25, 0x02	; 2
 2bc:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	printWord(get_pIC_RegValue(Freq));
 2c0:	8c e4       	ldi	r24, 0x4C	; 76
 2c2:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 2c6:	0e 94 56 03 	call	0x6ac	; 0x6ac <printWord>
	printString("\tPower Factor: ");
 2ca:	85 e2       	ldi	r24, 0x25	; 37
 2cc:	92 e0       	ldi	r25, 0x02	; 2
 2ce:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	printWord(get_pIC_RegValue(PowerF));
 2d2:	8d e4       	ldi	r24, 0x4D	; 77
 2d4:	0e 94 63 00 	call	0xc6	; 0xc6 <get_pIC_RegValue>
 2d8:	0e 94 56 03 	call	0x6ac	; 0x6ac <printWord>
	printString("\r\n");
 2dc:	86 e4       	ldi	r24, 0x46	; 70
 2de:	92 e0       	ldi	r25, 0x02	; 2
 2e0:	0e 94 40 03 	call	0x680	; 0x680 <printString>
 2e4:	08 95       	ret

000002e6 <main>:
uint8_t clockAddressW = 0b11010000; // read bit for DS1307
uint8_t to_address[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2}; // RF channel address.

int main(void)
{
	initUSART();
 2e6:	0e 94 27 03 	call	0x64e	; 0x64e <initUSART>
	initI2C();
 2ea:	0e 94 53 00 	call	0xa6	; 0xa6 <initI2C>
	SPI_init();
 2ee:	0e 94 08 03 	call	0x610	; 0x610 <SPI_init>
	
	//bool on = false;
	sei();
 2f2:	78 94       	sei
	//nRF24L01 *rf = setup_rf();
	setup_rf();
 2f4:	0e 94 79 00 	call	0xf2	; 0xf2 <setup_rf>
	//m90E26 *pIC = setup_powerIC();
	
	pIC_Start();
 2f8:	0e 94 5c 00 	call	0xb8	; 0xb8 <pIC_Start>
	setup_timer();
 2fc:	0e 94 a1 00 	call	0x142	; 0x142 <setup_timer>
	
	printString("Starting Program!\r\n");
 300:	85 e3       	ldi	r24, 0x35	; 53
 302:	92 e0       	ldi	r25, 0x02	; 2
 304:	0e 94 40 03 	call	0x680	; 0x680 <printString>
	
	print_RF_settings();
 308:	0e 94 b5 00 	call	0x16a	; 0x16a <print_RF_settings>
	
	print_power_IC_settings();
 30c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <print_power_IC_settings>
	
    while (1) 
    {
		
		if (send_message) print_power_data();
 310:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <__data_end>
 314:	88 23       	and	r24, r24
 316:	e1 f3       	breq	.-8      	; 0x310 <main+0x2a>
 318:	0e 94 41 01 	call	0x282	; 0x282 <print_power_data>
 31c:	f9 cf       	rjmp	.-14     	; 0x310 <main+0x2a>

0000031e <__vector_11>:
	printString("\r\n");
	
}

// each one second interrupt
ISR(TIMER1_COMPA_vect) {
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	8f 93       	push	r24
	send_message = true;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <__data_end>
}
 330:	8f 91       	pop	r24
 332:	0f 90       	pop	r0
 334:	0f be       	out	0x3f, r0	; 63
 336:	0f 90       	pop	r0
 338:	1f 90       	pop	r1
 33a:	18 95       	reti

0000033c <__vector_1>:

// nRF24L01 interrupt
ISR(INT0_vect) {
 33c:	1f 92       	push	r1
 33e:	0f 92       	push	r0
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	0f 92       	push	r0
 344:	11 24       	eor	r1, r1
 346:	8f 93       	push	r24
	rf_interrupt = true;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <rf_interrupt>
 34e:	8f 91       	pop	r24
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <nRF24L01_init>:
        nRF24L01_send_command(rf, R_RX_PAYLOAD, &message->data,
            message->length);
    }

    return true;
}
 35a:	80 e1       	ldi	r24, 0x10	; 16
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 2d 04 	call	0x85a	; 0x85a <malloc>
 362:	20 e1       	ldi	r18, 0x10	; 16
 364:	fc 01       	movw	r30, r24
 366:	11 92       	st	Z+, r1
 368:	2a 95       	dec	r18
 36a:	e9 f7       	brne	.-6      	; 0x366 <nRF24L01_init+0xc>
 36c:	08 95       	ret

0000036e <nRF24L01_send_command>:
 36e:	cf 92       	push	r12
 370:	df 92       	push	r13
 372:	ef 92       	push	r14
 374:	ff 92       	push	r15
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	7c 01       	movw	r14, r24
 380:	86 2f       	mov	r24, r22
 382:	6a 01       	movw	r12, r20
 384:	89 01       	movw	r16, r18
 386:	d7 01       	movw	r26, r14
 388:	ed 91       	ld	r30, X+
 38a:	fc 91       	ld	r31, X
 38c:	11 97       	sbiw	r26, 0x01	; 1
 38e:	90 81       	ld	r25, Z
 390:	21 e0       	ldi	r18, 0x01	; 1
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	12 96       	adiw	r26, 0x02	; 2
 396:	0c 90       	ld	r0, X
 398:	02 c0       	rjmp	.+4      	; 0x39e <nRF24L01_send_command+0x30>
 39a:	22 0f       	add	r18, r18
 39c:	33 1f       	adc	r19, r19
 39e:	0a 94       	dec	r0
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <nRF24L01_send_command+0x2c>
 3a2:	20 95       	com	r18
 3a4:	29 23       	and	r18, r25
 3a6:	20 83       	st	Z, r18
 3a8:	0e 94 21 03 	call	0x642	; 0x642 <SPI_tradeByte>
 3ac:	f7 01       	movw	r30, r14
 3ae:	87 87       	std	Z+15, r24	; 0x0f
 3b0:	01 15       	cp	r16, r1
 3b2:	11 05       	cpc	r17, r1
 3b4:	51 f0       	breq	.+20     	; 0x3ca <nRF24L01_send_command+0x5c>
 3b6:	e6 01       	movw	r28, r12
 3b8:	0c 0d       	add	r16, r12
 3ba:	1d 1d       	adc	r17, r13
 3bc:	88 81       	ld	r24, Y
 3be:	0e 94 21 03 	call	0x642	; 0x642 <SPI_tradeByte>
 3c2:	89 93       	st	Y+, r24
 3c4:	c0 17       	cp	r28, r16
 3c6:	d1 07       	cpc	r29, r17
 3c8:	c9 f7       	brne	.-14     	; 0x3bc <nRF24L01_send_command+0x4e>
 3ca:	d7 01       	movw	r26, r14
 3cc:	ed 91       	ld	r30, X+
 3ce:	fc 91       	ld	r31, X
 3d0:	11 97       	sbiw	r26, 0x01	; 1
 3d2:	20 81       	ld	r18, Z
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	12 96       	adiw	r26, 0x02	; 2
 3da:	0c 90       	ld	r0, X
 3dc:	12 97       	sbiw	r26, 0x02	; 2
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <nRF24L01_send_command+0x76>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	0a 94       	dec	r0
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <nRF24L01_send_command+0x72>
 3e8:	82 2b       	or	r24, r18
 3ea:	80 83       	st	Z, r24
 3ec:	1f 96       	adiw	r26, 0x0f	; 15
 3ee:	8c 91       	ld	r24, X
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	ff 90       	pop	r15
 3fa:	ef 90       	pop	r14
 3fc:	df 90       	pop	r13
 3fe:	cf 90       	pop	r12
 400:	08 95       	ret

00000402 <nRF24L01_write_register>:
 402:	60 62       	ori	r22, 0x20	; 32
 404:	0e 94 b7 01 	call	0x36e	; 0x36e <nRF24L01_send_command>
 408:	08 95       	ret

0000040a <nRF24L01_clear_interrupts>:
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	1f 92       	push	r1
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
 414:	20 e7       	ldi	r18, 0x70	; 112
 416:	29 83       	std	Y+1, r18	; 0x01
 418:	21 e0       	ldi	r18, 0x01	; 1
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	ae 01       	movw	r20, r28
 41e:	4f 5f       	subi	r20, 0xFF	; 255
 420:	5f 4f       	sbci	r21, 0xFF	; 255
 422:	67 e0       	ldi	r22, 0x07	; 7
 424:	0e 94 01 02 	call	0x402	; 0x402 <nRF24L01_write_register>
 428:	0f 90       	pop	r0
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <nRF24L01_begin>:
 430:	ff 92       	push	r15
 432:	0f 93       	push	r16
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	1f 92       	push	r1
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
 440:	8c 01       	movw	r16, r24
 442:	dc 01       	movw	r26, r24
 444:	ed 91       	ld	r30, X+
 446:	fc 91       	ld	r31, X
 448:	11 97       	sbiw	r26, 0x01	; 1
 44a:	42 91       	ld	r20, -Z
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	9c 01       	movw	r18, r24
 452:	12 96       	adiw	r26, 0x02	; 2
 454:	0c 90       	ld	r0, X
 456:	12 97       	sbiw	r26, 0x02	; 2
 458:	02 c0       	rjmp	.+4      	; 0x45e <nRF24L01_begin+0x2e>
 45a:	22 0f       	add	r18, r18
 45c:	33 1f       	adc	r19, r19
 45e:	0a 94       	dec	r0
 460:	e2 f7       	brpl	.-8      	; 0x45a <nRF24L01_begin+0x2a>
 462:	24 2b       	or	r18, r20
 464:	20 83       	st	Z, r18
 466:	13 96       	adiw	r26, 0x03	; 3
 468:	ed 91       	ld	r30, X+
 46a:	fc 91       	ld	r31, X
 46c:	14 97       	sbiw	r26, 0x04	; 4
 46e:	42 91       	ld	r20, -Z
 470:	9c 01       	movw	r18, r24
 472:	15 96       	adiw	r26, 0x05	; 5
 474:	0c 90       	ld	r0, X
 476:	15 97       	sbiw	r26, 0x05	; 5
 478:	02 c0       	rjmp	.+4      	; 0x47e <nRF24L01_begin+0x4e>
 47a:	22 0f       	add	r18, r18
 47c:	33 1f       	adc	r19, r19
 47e:	0a 94       	dec	r0
 480:	e2 f7       	brpl	.-8      	; 0x47a <nRF24L01_begin+0x4a>
 482:	24 2b       	or	r18, r20
 484:	20 83       	st	Z, r18
 486:	ed 91       	ld	r30, X+
 488:	fc 91       	ld	r31, X
 48a:	11 97       	sbiw	r26, 0x01	; 1
 48c:	40 81       	ld	r20, Z
 48e:	9c 01       	movw	r18, r24
 490:	12 96       	adiw	r26, 0x02	; 2
 492:	0c 90       	ld	r0, X
 494:	12 97       	sbiw	r26, 0x02	; 2
 496:	02 c0       	rjmp	.+4      	; 0x49c <nRF24L01_begin+0x6c>
 498:	22 0f       	add	r18, r18
 49a:	33 1f       	adc	r19, r19
 49c:	0a 94       	dec	r0
 49e:	e2 f7       	brpl	.-8      	; 0x498 <nRF24L01_begin+0x68>
 4a0:	24 2b       	or	r18, r20
 4a2:	20 83       	st	Z, r18
 4a4:	13 96       	adiw	r26, 0x03	; 3
 4a6:	ed 91       	ld	r30, X+
 4a8:	fc 91       	ld	r31, X
 4aa:	14 97       	sbiw	r26, 0x04	; 4
 4ac:	30 81       	ld	r19, Z
 4ae:	ac 01       	movw	r20, r24
 4b0:	15 96       	adiw	r26, 0x05	; 5
 4b2:	0c 90       	ld	r0, X
 4b4:	15 97       	sbiw	r26, 0x05	; 5
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <nRF24L01_begin+0x8c>
 4b8:	44 0f       	add	r20, r20
 4ba:	55 1f       	adc	r21, r21
 4bc:	0a 94       	dec	r0
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <nRF24L01_begin+0x88>
 4c0:	24 2f       	mov	r18, r20
 4c2:	20 95       	com	r18
 4c4:	23 23       	and	r18, r19
 4c6:	20 83       	st	Z, r18
 4c8:	16 96       	adiw	r26, 0x06	; 6
 4ca:	ed 91       	ld	r30, X+
 4cc:	fc 91       	ld	r31, X
 4ce:	17 97       	sbiw	r26, 0x07	; 7
 4d0:	42 91       	ld	r20, -Z
 4d2:	9c 01       	movw	r18, r24
 4d4:	18 96       	adiw	r26, 0x08	; 8
 4d6:	0c 90       	ld	r0, X
 4d8:	18 97       	sbiw	r26, 0x08	; 8
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <nRF24L01_begin+0xb0>
 4dc:	22 0f       	add	r18, r18
 4de:	33 1f       	adc	r19, r19
 4e0:	0a 94       	dec	r0
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <nRF24L01_begin+0xac>
 4e4:	24 2b       	or	r18, r20
 4e6:	20 83       	st	Z, r18
 4e8:	19 96       	adiw	r26, 0x09	; 9
 4ea:	ed 91       	ld	r30, X+
 4ec:	fc 91       	ld	r31, X
 4ee:	1a 97       	sbiw	r26, 0x0a	; 10
 4f0:	42 91       	ld	r20, -Z
 4f2:	9c 01       	movw	r18, r24
 4f4:	1b 96       	adiw	r26, 0x0b	; 11
 4f6:	0c 90       	ld	r0, X
 4f8:	1b 97       	sbiw	r26, 0x0b	; 11
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <nRF24L01_begin+0xd0>
 4fc:	22 0f       	add	r18, r18
 4fe:	33 1f       	adc	r19, r19
 500:	0a 94       	dec	r0
 502:	e2 f7       	brpl	.-8      	; 0x4fc <nRF24L01_begin+0xcc>
 504:	24 2b       	or	r18, r20
 506:	20 83       	st	Z, r18
 508:	1c 96       	adiw	r26, 0x0c	; 12
 50a:	ed 91       	ld	r30, X+
 50c:	fc 91       	ld	r31, X
 50e:	1d 97       	sbiw	r26, 0x0d	; 13
 510:	22 91       	ld	r18, -Z
 512:	1e 96       	adiw	r26, 0x0e	; 14
 514:	0c 90       	ld	r0, X
 516:	02 c0       	rjmp	.+4      	; 0x51c <nRF24L01_begin+0xec>
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	0a 94       	dec	r0
 51e:	e2 f7       	brpl	.-8      	; 0x518 <nRF24L01_begin+0xe8>
 520:	80 95       	com	r24
 522:	82 23       	and	r24, r18
 524:	80 83       	st	Z, r24
 526:	0c b4       	in	r0, 0x2c	; 44
 528:	04 fe       	sbrs	r0, 4
 52a:	0e 94 08 03 	call	0x610	; 0x610 <SPI_init>
 52e:	20 e0       	ldi	r18, 0x00	; 0
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	40 e0       	ldi	r20, 0x00	; 0
 534:	50 e0       	ldi	r21, 0x00	; 0
 536:	62 ee       	ldi	r22, 0xE2	; 226
 538:	c8 01       	movw	r24, r16
 53a:	0e 94 b7 01 	call	0x36e	; 0x36e <nRF24L01_send_command>
 53e:	20 e0       	ldi	r18, 0x00	; 0
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	61 ee       	ldi	r22, 0xE1	; 225
 548:	c8 01       	movw	r24, r16
 54a:	0e 94 b7 01 	call	0x36e	; 0x36e <nRF24L01_send_command>
 54e:	c8 01       	movw	r24, r16
 550:	0e 94 05 02 	call	0x40a	; 0x40a <nRF24L01_clear_interrupts>
 554:	8f e0       	ldi	r24, 0x0F	; 15
 556:	89 83       	std	Y+1, r24	; 0x01
 558:	21 e0       	ldi	r18, 0x01	; 1
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	ae 01       	movw	r20, r28
 55e:	4f 5f       	subi	r20, 0xFF	; 255
 560:	5f 4f       	sbci	r21, 0xFF	; 255
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	c8 01       	movw	r24, r16
 566:	0e 94 01 02 	call	0x402	; 0x402 <nRF24L01_write_register>
 56a:	0f 2e       	mov	r0, r31
 56c:	ff e3       	ldi	r31, 0x3F	; 63
 56e:	ff 2e       	mov	r15, r31
 570:	f0 2d       	mov	r31, r0
 572:	f9 82       	std	Y+1, r15	; 0x01
 574:	21 e0       	ldi	r18, 0x01	; 1
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	ae 01       	movw	r20, r28
 57a:	4f 5f       	subi	r20, 0xFF	; 255
 57c:	5f 4f       	sbci	r21, 0xFF	; 255
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	c8 01       	movw	r24, r16
 582:	0e 94 01 02 	call	0x402	; 0x402 <nRF24L01_write_register>
 586:	89 e0       	ldi	r24, 0x09	; 9
 588:	89 83       	std	Y+1, r24	; 0x01
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	ae 01       	movw	r20, r28
 590:	4f 5f       	subi	r20, 0xFF	; 255
 592:	5f 4f       	sbci	r21, 0xFF	; 255
 594:	66 e0       	ldi	r22, 0x06	; 6
 596:	c8 01       	movw	r24, r16
 598:	0e 94 01 02 	call	0x402	; 0x402 <nRF24L01_write_register>
 59c:	80 e6       	ldi	r24, 0x60	; 96
 59e:	89 83       	std	Y+1, r24	; 0x01
 5a0:	21 e0       	ldi	r18, 0x01	; 1
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	ae 01       	movw	r20, r28
 5a6:	4f 5f       	subi	r20, 0xFF	; 255
 5a8:	5f 4f       	sbci	r21, 0xFF	; 255
 5aa:	65 e0       	ldi	r22, 0x05	; 5
 5ac:	c8 01       	movw	r24, r16
 5ae:	0e 94 01 02 	call	0x402	; 0x402 <nRF24L01_write_register>
 5b2:	f9 82       	std	Y+1, r15	; 0x01
 5b4:	21 e0       	ldi	r18, 0x01	; 1
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	ae 01       	movw	r20, r28
 5ba:	4f 5f       	subi	r20, 0xFF	; 255
 5bc:	5f 4f       	sbci	r21, 0xFF	; 255
 5be:	6c e1       	ldi	r22, 0x1C	; 28
 5c0:	c8 01       	movw	r24, r16
 5c2:	0e 94 01 02 	call	0x402	; 0x402 <nRF24L01_write_register>
 5c6:	84 e0       	ldi	r24, 0x04	; 4
 5c8:	89 83       	std	Y+1, r24	; 0x01
 5ca:	21 e0       	ldi	r18, 0x01	; 1
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	ae 01       	movw	r20, r28
 5d0:	4f 5f       	subi	r20, 0xFF	; 255
 5d2:	5f 4f       	sbci	r21, 0xFF	; 255
 5d4:	6d e1       	ldi	r22, 0x1D	; 29
 5d6:	c8 01       	movw	r24, r16
 5d8:	0e 94 01 02 	call	0x402	; 0x402 <nRF24L01_write_register>
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	89 83       	std	Y+1, r24	; 0x01
 5e0:	21 e0       	ldi	r18, 0x01	; 1
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	ae 01       	movw	r20, r28
 5e6:	4f 5f       	subi	r20, 0xFF	; 255
 5e8:	5f 4f       	sbci	r21, 0xFF	; 255
 5ea:	62 e0       	ldi	r22, 0x02	; 2
 5ec:	c8 01       	movw	r24, r16
 5ee:	0e 94 01 02 	call	0x402	; 0x402 <nRF24L01_write_register>
 5f2:	0f 90       	pop	r0
 5f4:	df 91       	pop	r29
 5f6:	cf 91       	pop	r28
 5f8:	1f 91       	pop	r17
 5fa:	0f 91       	pop	r16
 5fc:	ff 90       	pop	r15
 5fe:	08 95       	ret

00000600 <getRFRegValue>:
    nRF24L01_write_register(rf, STATUS, &data, 1);
}

uint8_t getRFRegValue(uint8_t rfRegister){
	
	PORTB &= ~(1<<2);
 600:	2a 98       	cbi	0x05, 2	; 5
	SPI_tradeByte(R_REGISTER | rfRegister);
 602:	0e 94 21 03 	call	0x642	; 0x642 <SPI_tradeByte>
	uint8_t rf_d1bit = SPI_tradeByte(0);
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	0e 94 21 03 	call	0x642	; 0x642 <SPI_tradeByte>
	PORTB |= (1<<2);
 60c:	2a 9a       	sbi	0x05, 2	; 5
	return rf_d1bit;
	
}
 60e:	08 95       	ret

00000610 <SPI_init>:

#include "SPI.h"

void SPI_init(void){
	// set as master
	SPCR |= _BV(MSTR);
 610:	8c b5       	in	r24, 0x2c	; 44
 612:	80 61       	ori	r24, 0x10	; 16
 614:	8c bd       	out	0x2c, r24	; 44
	// enable SPI
	SPCR |= _BV(SPE);
 616:	8c b5       	in	r24, 0x2c	; 44
 618:	80 64       	ori	r24, 0x40	; 64
 61a:	8c bd       	out	0x2c, r24	; 44
	// SPI mode 0: Clock Polarity CPOL = 0, Clock Phase CPHA = 0
	SPCR &= ~_BV(CPOL);
 61c:	8c b5       	in	r24, 0x2c	; 44
 61e:	87 7f       	andi	r24, 0xF7	; 247
 620:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~_BV(CPHA);
 622:	8c b5       	in	r24, 0x2c	; 44
 624:	8b 7f       	andi	r24, 0xFB	; 251
 626:	8c bd       	out	0x2c, r24	; 44
	// Clock 2X speed
	//SPCR &= ~_BV(SPR0);
	SPCR |= _BV(SPR0);
 628:	8c b5       	in	r24, 0x2c	; 44
 62a:	81 60       	ori	r24, 0x01	; 1
 62c:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~_BV(SPR1);
 62e:	8c b5       	in	r24, 0x2c	; 44
 630:	8d 7f       	andi	r24, 0xFD	; 253
 632:	8c bd       	out	0x2c, r24	; 44
	//SPSR |= _BV(SPI2X);
	SPSR &= ~_BV(SPI2X);
 634:	8d b5       	in	r24, 0x2d	; 45
 636:	8e 7f       	andi	r24, 0xFE	; 254
 638:	8d bd       	out	0x2d, r24	; 45
	// most significant first (MSB)
	SPCR &= ~_BV(DORD);
 63a:	8c b5       	in	r24, 0x2c	; 44
 63c:	8f 7d       	andi	r24, 0xDF	; 223
 63e:	8c bd       	out	0x2c, r24	; 44
 640:	08 95       	ret

00000642 <SPI_tradeByte>:
}

uint8_t SPI_tradeByte(uint8_t byte) {
	SPDR = byte;                       /* SPI starts sending immediately */
 642:	8e bd       	out	0x2e, r24	; 46
	//loop_until_bit_is_set(SPSR, SPIF);                /* wait until done */
	while (!(SPSR & _BV(SPIF)));
 644:	0d b4       	in	r0, 0x2d	; 45
 646:	07 fe       	sbrs	r0, 7
 648:	fd cf       	rjmp	.-6      	; 0x644 <SPI_tradeByte+0x2>
	/* SPDR now contains the received byte */
	return SPDR;
 64a:	8e b5       	in	r24, 0x2e	; 46
 64c:	08 95       	ret

0000064e <initUSART>:
    if (bit_is_set(byte, bit))
      transmitByte('1');
    else
      transmitByte('0');
  }
}
 64e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 652:	83 e3       	ldi	r24, 0x33	; 51
 654:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 658:	e0 ec       	ldi	r30, 0xC0	; 192
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	80 81       	ld	r24, Z
 65e:	8d 7f       	andi	r24, 0xFD	; 253
 660:	80 83       	st	Z, r24
 662:	88 e1       	ldi	r24, 0x18	; 24
 664:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 668:	86 e0       	ldi	r24, 0x06	; 6
 66a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 66e:	08 95       	ret

00000670 <transmitByte>:
 670:	e0 ec       	ldi	r30, 0xC0	; 192
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	90 81       	ld	r25, Z
 676:	95 ff       	sbrs	r25, 5
 678:	fd cf       	rjmp	.-6      	; 0x674 <transmitByte+0x4>
 67a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 67e:	08 95       	ret

00000680 <printString>:
 680:	0f 93       	push	r16
 682:	1f 93       	push	r17
 684:	cf 93       	push	r28
 686:	fc 01       	movw	r30, r24
 688:	80 81       	ld	r24, Z
 68a:	88 23       	and	r24, r24
 68c:	59 f0       	breq	.+22     	; 0x6a4 <printString+0x24>
 68e:	8f 01       	movw	r16, r30
 690:	c0 e0       	ldi	r28, 0x00	; 0
 692:	0e 94 38 03 	call	0x670	; 0x670 <transmitByte>
 696:	cf 5f       	subi	r28, 0xFF	; 255
 698:	f8 01       	movw	r30, r16
 69a:	ec 0f       	add	r30, r28
 69c:	f1 1d       	adc	r31, r1
 69e:	80 81       	ld	r24, Z
 6a0:	81 11       	cpse	r24, r1
 6a2:	f7 cf       	rjmp	.-18     	; 0x692 <printString+0x12>
 6a4:	cf 91       	pop	r28
 6a6:	1f 91       	pop	r17
 6a8:	0f 91       	pop	r16
 6aa:	08 95       	ret

000006ac <printWord>:
 6ac:	0f 93       	push	r16
 6ae:	1f 93       	push	r17
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	8c 01       	movw	r16, r24
 6b6:	9c 01       	movw	r18, r24
 6b8:	32 95       	swap	r19
 6ba:	22 95       	swap	r18
 6bc:	2f 70       	andi	r18, 0x0F	; 15
 6be:	23 27       	eor	r18, r19
 6c0:	3f 70       	andi	r19, 0x0F	; 15
 6c2:	23 27       	eor	r18, r19
 6c4:	a7 e4       	ldi	r26, 0x47	; 71
 6c6:	b3 e0       	ldi	r27, 0x03	; 3
 6c8:	0e 94 1e 04 	call	0x83c	; 0x83c <__umulhisi3>
 6cc:	96 95       	lsr	r25
 6ce:	87 95       	ror	r24
 6d0:	96 95       	lsr	r25
 6d2:	87 95       	ror	r24
 6d4:	96 95       	lsr	r25
 6d6:	87 95       	ror	r24
 6d8:	80 5d       	subi	r24, 0xD0	; 208
 6da:	0e 94 38 03 	call	0x670	; 0x670 <transmitByte>
 6de:	98 01       	movw	r18, r16
 6e0:	36 95       	lsr	r19
 6e2:	27 95       	ror	r18
 6e4:	36 95       	lsr	r19
 6e6:	27 95       	ror	r18
 6e8:	36 95       	lsr	r19
 6ea:	27 95       	ror	r18
 6ec:	a5 ec       	ldi	r26, 0xC5	; 197
 6ee:	b0 e2       	ldi	r27, 0x20	; 32
 6f0:	0e 94 1e 04 	call	0x83c	; 0x83c <__umulhisi3>
 6f4:	ac 01       	movw	r20, r24
 6f6:	52 95       	swap	r21
 6f8:	42 95       	swap	r20
 6fa:	4f 70       	andi	r20, 0x0F	; 15
 6fc:	45 27       	eor	r20, r21
 6fe:	5f 70       	andi	r21, 0x0F	; 15
 700:	45 27       	eor	r20, r21
 702:	9a 01       	movw	r18, r20
 704:	ad ec       	ldi	r26, 0xCD	; 205
 706:	bc ec       	ldi	r27, 0xCC	; 204
 708:	0e 94 1e 04 	call	0x83c	; 0x83c <__umulhisi3>
 70c:	96 95       	lsr	r25
 70e:	87 95       	ror	r24
 710:	96 95       	lsr	r25
 712:	87 95       	ror	r24
 714:	96 95       	lsr	r25
 716:	87 95       	ror	r24
 718:	9c 01       	movw	r18, r24
 71a:	22 0f       	add	r18, r18
 71c:	33 1f       	adc	r19, r19
 71e:	88 0f       	add	r24, r24
 720:	99 1f       	adc	r25, r25
 722:	88 0f       	add	r24, r24
 724:	99 1f       	adc	r25, r25
 726:	88 0f       	add	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	82 0f       	add	r24, r18
 72c:	93 1f       	adc	r25, r19
 72e:	9a 01       	movw	r18, r20
 730:	28 1b       	sub	r18, r24
 732:	39 0b       	sbc	r19, r25
 734:	c9 01       	movw	r24, r18
 736:	80 5d       	subi	r24, 0xD0	; 208
 738:	0e 94 38 03 	call	0x670	; 0x670 <transmitByte>
 73c:	89 e4       	ldi	r24, 0x49	; 73
 73e:	92 e0       	ldi	r25, 0x02	; 2
 740:	0e 94 40 03 	call	0x680	; 0x680 <printString>
 744:	98 01       	movw	r18, r16
 746:	36 95       	lsr	r19
 748:	27 95       	ror	r18
 74a:	36 95       	lsr	r19
 74c:	27 95       	ror	r18
 74e:	ab e7       	ldi	r26, 0x7B	; 123
 750:	b4 e1       	ldi	r27, 0x14	; 20
 752:	0e 94 1e 04 	call	0x83c	; 0x83c <__umulhisi3>
 756:	ac 01       	movw	r20, r24
 758:	56 95       	lsr	r21
 75a:	47 95       	ror	r20
 75c:	9a 01       	movw	r18, r20
 75e:	ad ec       	ldi	r26, 0xCD	; 205
 760:	bc ec       	ldi	r27, 0xCC	; 204
 762:	0e 94 1e 04 	call	0x83c	; 0x83c <__umulhisi3>
 766:	96 95       	lsr	r25
 768:	87 95       	ror	r24
 76a:	96 95       	lsr	r25
 76c:	87 95       	ror	r24
 76e:	96 95       	lsr	r25
 770:	87 95       	ror	r24
 772:	9c 01       	movw	r18, r24
 774:	22 0f       	add	r18, r18
 776:	33 1f       	adc	r19, r19
 778:	88 0f       	add	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	88 0f       	add	r24, r24
 77e:	99 1f       	adc	r25, r25
 780:	88 0f       	add	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	82 0f       	add	r24, r18
 786:	93 1f       	adc	r25, r19
 788:	9a 01       	movw	r18, r20
 78a:	28 1b       	sub	r18, r24
 78c:	39 0b       	sbc	r19, r25
 78e:	c9 01       	movw	r24, r18
 790:	80 5d       	subi	r24, 0xD0	; 208
 792:	0e 94 38 03 	call	0x670	; 0x670 <transmitByte>
 796:	98 01       	movw	r18, r16
 798:	ad ec       	ldi	r26, 0xCD	; 205
 79a:	bc ec       	ldi	r27, 0xCC	; 204
 79c:	0e 94 1e 04 	call	0x83c	; 0x83c <__umulhisi3>
 7a0:	ec 01       	movw	r28, r24
 7a2:	d6 95       	lsr	r29
 7a4:	c7 95       	ror	r28
 7a6:	d6 95       	lsr	r29
 7a8:	c7 95       	ror	r28
 7aa:	d6 95       	lsr	r29
 7ac:	c7 95       	ror	r28
 7ae:	9e 01       	movw	r18, r28
 7b0:	0e 94 1e 04 	call	0x83c	; 0x83c <__umulhisi3>
 7b4:	96 95       	lsr	r25
 7b6:	87 95       	ror	r24
 7b8:	96 95       	lsr	r25
 7ba:	87 95       	ror	r24
 7bc:	96 95       	lsr	r25
 7be:	87 95       	ror	r24
 7c0:	9c 01       	movw	r18, r24
 7c2:	22 0f       	add	r18, r18
 7c4:	33 1f       	adc	r19, r19
 7c6:	88 0f       	add	r24, r24
 7c8:	99 1f       	adc	r25, r25
 7ca:	88 0f       	add	r24, r24
 7cc:	99 1f       	adc	r25, r25
 7ce:	88 0f       	add	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	82 0f       	add	r24, r18
 7d4:	93 1f       	adc	r25, r19
 7d6:	9e 01       	movw	r18, r28
 7d8:	28 1b       	sub	r18, r24
 7da:	39 0b       	sbc	r19, r25
 7dc:	c9 01       	movw	r24, r18
 7de:	80 5d       	subi	r24, 0xD0	; 208
 7e0:	0e 94 38 03 	call	0x670	; 0x670 <transmitByte>
 7e4:	ce 01       	movw	r24, r28
 7e6:	88 0f       	add	r24, r24
 7e8:	99 1f       	adc	r25, r25
 7ea:	cc 0f       	add	r28, r28
 7ec:	dd 1f       	adc	r29, r29
 7ee:	cc 0f       	add	r28, r28
 7f0:	dd 1f       	adc	r29, r29
 7f2:	cc 0f       	add	r28, r28
 7f4:	dd 1f       	adc	r29, r29
 7f6:	c8 0f       	add	r28, r24
 7f8:	d9 1f       	adc	r29, r25
 7fa:	c8 01       	movw	r24, r16
 7fc:	8c 1b       	sub	r24, r28
 7fe:	9d 0b       	sbc	r25, r29
 800:	80 5d       	subi	r24, 0xD0	; 208
 802:	0e 94 38 03 	call	0x670	; 0x670 <transmitByte>
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	1f 91       	pop	r17
 80c:	0f 91       	pop	r16
 80e:	08 95       	ret

00000810 <nibbleToHexCharacter>:

char nibbleToHexCharacter(uint8_t nibble) {
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
 810:	8a 30       	cpi	r24, 0x0A	; 10
 812:	10 f4       	brcc	.+4      	; 0x818 <nibbleToHexCharacter+0x8>
    return ('0' + nibble);
 814:	80 5d       	subi	r24, 0xD0	; 208
 816:	08 95       	ret
  }
  else {
    return ('A' + nibble - 10);
 818:	89 5c       	subi	r24, 0xC9	; 201
  }
}
 81a:	08 95       	ret

0000081c <printHexByte>:

void printHexByte(uint8_t byte) {
 81c:	cf 93       	push	r28
 81e:	c8 2f       	mov	r28, r24
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
  transmitByte(nibbleToHexCharacter(nibble));
 820:	82 95       	swap	r24
 822:	8f 70       	andi	r24, 0x0F	; 15
 824:	0e 94 08 04 	call	0x810	; 0x810 <nibbleToHexCharacter>
 828:	0e 94 38 03 	call	0x670	; 0x670 <transmitByte>
  nibble = byte & 0b00001111;
  transmitByte(nibbleToHexCharacter(nibble));
 82c:	8c 2f       	mov	r24, r28
 82e:	8f 70       	andi	r24, 0x0F	; 15
 830:	0e 94 08 04 	call	0x810	; 0x810 <nibbleToHexCharacter>
 834:	0e 94 38 03 	call	0x670	; 0x670 <transmitByte>
}
 838:	cf 91       	pop	r28
 83a:	08 95       	ret

0000083c <__umulhisi3>:
 83c:	a2 9f       	mul	r26, r18
 83e:	b0 01       	movw	r22, r0
 840:	b3 9f       	mul	r27, r19
 842:	c0 01       	movw	r24, r0
 844:	a3 9f       	mul	r26, r19
 846:	70 0d       	add	r23, r0
 848:	81 1d       	adc	r24, r1
 84a:	11 24       	eor	r1, r1
 84c:	91 1d       	adc	r25, r1
 84e:	b2 9f       	mul	r27, r18
 850:	70 0d       	add	r23, r0
 852:	81 1d       	adc	r24, r1
 854:	11 24       	eor	r1, r1
 856:	91 1d       	adc	r25, r1
 858:	08 95       	ret

0000085a <malloc>:
 85a:	0f 93       	push	r16
 85c:	1f 93       	push	r17
 85e:	cf 93       	push	r28
 860:	df 93       	push	r29
 862:	82 30       	cpi	r24, 0x02	; 2
 864:	91 05       	cpc	r25, r1
 866:	10 f4       	brcc	.+4      	; 0x86c <malloc+0x12>
 868:	82 e0       	ldi	r24, 0x02	; 2
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <__flp>
 870:	f0 91 51 02 	lds	r31, 0x0251	; 0x800251 <__flp+0x1>
 874:	20 e0       	ldi	r18, 0x00	; 0
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	a0 e0       	ldi	r26, 0x00	; 0
 87a:	b0 e0       	ldi	r27, 0x00	; 0
 87c:	30 97       	sbiw	r30, 0x00	; 0
 87e:	19 f1       	breq	.+70     	; 0x8c6 <malloc+0x6c>
 880:	40 81       	ld	r20, Z
 882:	51 81       	ldd	r21, Z+1	; 0x01
 884:	02 81       	ldd	r16, Z+2	; 0x02
 886:	13 81       	ldd	r17, Z+3	; 0x03
 888:	48 17       	cp	r20, r24
 88a:	59 07       	cpc	r21, r25
 88c:	c8 f0       	brcs	.+50     	; 0x8c0 <malloc+0x66>
 88e:	84 17       	cp	r24, r20
 890:	95 07       	cpc	r25, r21
 892:	69 f4       	brne	.+26     	; 0x8ae <malloc+0x54>
 894:	10 97       	sbiw	r26, 0x00	; 0
 896:	31 f0       	breq	.+12     	; 0x8a4 <malloc+0x4a>
 898:	12 96       	adiw	r26, 0x02	; 2
 89a:	0c 93       	st	X, r16
 89c:	12 97       	sbiw	r26, 0x02	; 2
 89e:	13 96       	adiw	r26, 0x03	; 3
 8a0:	1c 93       	st	X, r17
 8a2:	27 c0       	rjmp	.+78     	; 0x8f2 <malloc+0x98>
 8a4:	00 93 50 02 	sts	0x0250, r16	; 0x800250 <__flp>
 8a8:	10 93 51 02 	sts	0x0251, r17	; 0x800251 <__flp+0x1>
 8ac:	22 c0       	rjmp	.+68     	; 0x8f2 <malloc+0x98>
 8ae:	21 15       	cp	r18, r1
 8b0:	31 05       	cpc	r19, r1
 8b2:	19 f0       	breq	.+6      	; 0x8ba <malloc+0x60>
 8b4:	42 17       	cp	r20, r18
 8b6:	53 07       	cpc	r21, r19
 8b8:	18 f4       	brcc	.+6      	; 0x8c0 <malloc+0x66>
 8ba:	9a 01       	movw	r18, r20
 8bc:	bd 01       	movw	r22, r26
 8be:	ef 01       	movw	r28, r30
 8c0:	df 01       	movw	r26, r30
 8c2:	f8 01       	movw	r30, r16
 8c4:	db cf       	rjmp	.-74     	; 0x87c <malloc+0x22>
 8c6:	21 15       	cp	r18, r1
 8c8:	31 05       	cpc	r19, r1
 8ca:	f9 f0       	breq	.+62     	; 0x90a <__stack+0xb>
 8cc:	28 1b       	sub	r18, r24
 8ce:	39 0b       	sbc	r19, r25
 8d0:	24 30       	cpi	r18, 0x04	; 4
 8d2:	31 05       	cpc	r19, r1
 8d4:	80 f4       	brcc	.+32     	; 0x8f6 <malloc+0x9c>
 8d6:	8a 81       	ldd	r24, Y+2	; 0x02
 8d8:	9b 81       	ldd	r25, Y+3	; 0x03
 8da:	61 15       	cp	r22, r1
 8dc:	71 05       	cpc	r23, r1
 8de:	21 f0       	breq	.+8      	; 0x8e8 <malloc+0x8e>
 8e0:	fb 01       	movw	r30, r22
 8e2:	93 83       	std	Z+3, r25	; 0x03
 8e4:	82 83       	std	Z+2, r24	; 0x02
 8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <malloc+0x96>
 8e8:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <__flp+0x1>
 8ec:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <__flp>
 8f0:	fe 01       	movw	r30, r28
 8f2:	32 96       	adiw	r30, 0x02	; 2
 8f4:	44 c0       	rjmp	.+136    	; 0x97e <__stack+0x7f>
 8f6:	fe 01       	movw	r30, r28
 8f8:	e2 0f       	add	r30, r18
 8fa:	f3 1f       	adc	r31, r19
 8fc:	81 93       	st	Z+, r24
 8fe:	91 93       	st	Z+, r25
 900:	22 50       	subi	r18, 0x02	; 2
 902:	31 09       	sbc	r19, r1
 904:	39 83       	std	Y+1, r19	; 0x01
 906:	28 83       	st	Y, r18
 908:	3a c0       	rjmp	.+116    	; 0x97e <__stack+0x7f>
 90a:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <__brkval>
 90e:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <__brkval+0x1>
 912:	23 2b       	or	r18, r19
 914:	41 f4       	brne	.+16     	; 0x926 <__stack+0x27>
 916:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 91a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 91e:	30 93 4f 02 	sts	0x024F, r19	; 0x80024f <__brkval+0x1>
 922:	20 93 4e 02 	sts	0x024E, r18	; 0x80024e <__brkval>
 926:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 92a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 92e:	21 15       	cp	r18, r1
 930:	31 05       	cpc	r19, r1
 932:	41 f4       	brne	.+16     	; 0x944 <__stack+0x45>
 934:	2d b7       	in	r18, 0x3d	; 61
 936:	3e b7       	in	r19, 0x3e	; 62
 938:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 93c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 940:	24 1b       	sub	r18, r20
 942:	35 0b       	sbc	r19, r21
 944:	e0 91 4e 02 	lds	r30, 0x024E	; 0x80024e <__brkval>
 948:	f0 91 4f 02 	lds	r31, 0x024F	; 0x80024f <__brkval+0x1>
 94c:	e2 17       	cp	r30, r18
 94e:	f3 07       	cpc	r31, r19
 950:	a0 f4       	brcc	.+40     	; 0x97a <__stack+0x7b>
 952:	2e 1b       	sub	r18, r30
 954:	3f 0b       	sbc	r19, r31
 956:	28 17       	cp	r18, r24
 958:	39 07       	cpc	r19, r25
 95a:	78 f0       	brcs	.+30     	; 0x97a <__stack+0x7b>
 95c:	ac 01       	movw	r20, r24
 95e:	4e 5f       	subi	r20, 0xFE	; 254
 960:	5f 4f       	sbci	r21, 0xFF	; 255
 962:	24 17       	cp	r18, r20
 964:	35 07       	cpc	r19, r21
 966:	48 f0       	brcs	.+18     	; 0x97a <__stack+0x7b>
 968:	4e 0f       	add	r20, r30
 96a:	5f 1f       	adc	r21, r31
 96c:	50 93 4f 02 	sts	0x024F, r21	; 0x80024f <__brkval+0x1>
 970:	40 93 4e 02 	sts	0x024E, r20	; 0x80024e <__brkval>
 974:	81 93       	st	Z+, r24
 976:	91 93       	st	Z+, r25
 978:	02 c0       	rjmp	.+4      	; 0x97e <__stack+0x7f>
 97a:	e0 e0       	ldi	r30, 0x00	; 0
 97c:	f0 e0       	ldi	r31, 0x00	; 0
 97e:	cf 01       	movw	r24, r30
 980:	df 91       	pop	r29
 982:	cf 91       	pop	r28
 984:	1f 91       	pop	r17
 986:	0f 91       	pop	r16
 988:	08 95       	ret

0000098a <free>:
 98a:	cf 93       	push	r28
 98c:	df 93       	push	r29
 98e:	00 97       	sbiw	r24, 0x00	; 0
 990:	09 f4       	brne	.+2      	; 0x994 <free+0xa>
 992:	81 c0       	rjmp	.+258    	; 0xa96 <free+0x10c>
 994:	fc 01       	movw	r30, r24
 996:	32 97       	sbiw	r30, 0x02	; 2
 998:	13 82       	std	Z+3, r1	; 0x03
 99a:	12 82       	std	Z+2, r1	; 0x02
 99c:	a0 91 50 02 	lds	r26, 0x0250	; 0x800250 <__flp>
 9a0:	b0 91 51 02 	lds	r27, 0x0251	; 0x800251 <__flp+0x1>
 9a4:	10 97       	sbiw	r26, 0x00	; 0
 9a6:	81 f4       	brne	.+32     	; 0x9c8 <free+0x3e>
 9a8:	20 81       	ld	r18, Z
 9aa:	31 81       	ldd	r19, Z+1	; 0x01
 9ac:	82 0f       	add	r24, r18
 9ae:	93 1f       	adc	r25, r19
 9b0:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <__brkval>
 9b4:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <__brkval+0x1>
 9b8:	28 17       	cp	r18, r24
 9ba:	39 07       	cpc	r19, r25
 9bc:	51 f5       	brne	.+84     	; 0xa12 <free+0x88>
 9be:	f0 93 4f 02 	sts	0x024F, r31	; 0x80024f <__brkval+0x1>
 9c2:	e0 93 4e 02 	sts	0x024E, r30	; 0x80024e <__brkval>
 9c6:	67 c0       	rjmp	.+206    	; 0xa96 <free+0x10c>
 9c8:	ed 01       	movw	r28, r26
 9ca:	20 e0       	ldi	r18, 0x00	; 0
 9cc:	30 e0       	ldi	r19, 0x00	; 0
 9ce:	ce 17       	cp	r28, r30
 9d0:	df 07       	cpc	r29, r31
 9d2:	40 f4       	brcc	.+16     	; 0x9e4 <free+0x5a>
 9d4:	4a 81       	ldd	r20, Y+2	; 0x02
 9d6:	5b 81       	ldd	r21, Y+3	; 0x03
 9d8:	9e 01       	movw	r18, r28
 9da:	41 15       	cp	r20, r1
 9dc:	51 05       	cpc	r21, r1
 9de:	f1 f0       	breq	.+60     	; 0xa1c <free+0x92>
 9e0:	ea 01       	movw	r28, r20
 9e2:	f5 cf       	rjmp	.-22     	; 0x9ce <free+0x44>
 9e4:	d3 83       	std	Z+3, r29	; 0x03
 9e6:	c2 83       	std	Z+2, r28	; 0x02
 9e8:	40 81       	ld	r20, Z
 9ea:	51 81       	ldd	r21, Z+1	; 0x01
 9ec:	84 0f       	add	r24, r20
 9ee:	95 1f       	adc	r25, r21
 9f0:	c8 17       	cp	r28, r24
 9f2:	d9 07       	cpc	r29, r25
 9f4:	59 f4       	brne	.+22     	; 0xa0c <free+0x82>
 9f6:	88 81       	ld	r24, Y
 9f8:	99 81       	ldd	r25, Y+1	; 0x01
 9fa:	84 0f       	add	r24, r20
 9fc:	95 1f       	adc	r25, r21
 9fe:	02 96       	adiw	r24, 0x02	; 2
 a00:	91 83       	std	Z+1, r25	; 0x01
 a02:	80 83       	st	Z, r24
 a04:	8a 81       	ldd	r24, Y+2	; 0x02
 a06:	9b 81       	ldd	r25, Y+3	; 0x03
 a08:	93 83       	std	Z+3, r25	; 0x03
 a0a:	82 83       	std	Z+2, r24	; 0x02
 a0c:	21 15       	cp	r18, r1
 a0e:	31 05       	cpc	r19, r1
 a10:	29 f4       	brne	.+10     	; 0xa1c <free+0x92>
 a12:	f0 93 51 02 	sts	0x0251, r31	; 0x800251 <__flp+0x1>
 a16:	e0 93 50 02 	sts	0x0250, r30	; 0x800250 <__flp>
 a1a:	3d c0       	rjmp	.+122    	; 0xa96 <free+0x10c>
 a1c:	e9 01       	movw	r28, r18
 a1e:	fb 83       	std	Y+3, r31	; 0x03
 a20:	ea 83       	std	Y+2, r30	; 0x02
 a22:	49 91       	ld	r20, Y+
 a24:	59 91       	ld	r21, Y+
 a26:	c4 0f       	add	r28, r20
 a28:	d5 1f       	adc	r29, r21
 a2a:	ec 17       	cp	r30, r28
 a2c:	fd 07       	cpc	r31, r29
 a2e:	61 f4       	brne	.+24     	; 0xa48 <free+0xbe>
 a30:	80 81       	ld	r24, Z
 a32:	91 81       	ldd	r25, Z+1	; 0x01
 a34:	84 0f       	add	r24, r20
 a36:	95 1f       	adc	r25, r21
 a38:	02 96       	adiw	r24, 0x02	; 2
 a3a:	e9 01       	movw	r28, r18
 a3c:	99 83       	std	Y+1, r25	; 0x01
 a3e:	88 83       	st	Y, r24
 a40:	82 81       	ldd	r24, Z+2	; 0x02
 a42:	93 81       	ldd	r25, Z+3	; 0x03
 a44:	9b 83       	std	Y+3, r25	; 0x03
 a46:	8a 83       	std	Y+2, r24	; 0x02
 a48:	e0 e0       	ldi	r30, 0x00	; 0
 a4a:	f0 e0       	ldi	r31, 0x00	; 0
 a4c:	12 96       	adiw	r26, 0x02	; 2
 a4e:	8d 91       	ld	r24, X+
 a50:	9c 91       	ld	r25, X
 a52:	13 97       	sbiw	r26, 0x03	; 3
 a54:	00 97       	sbiw	r24, 0x00	; 0
 a56:	19 f0       	breq	.+6      	; 0xa5e <free+0xd4>
 a58:	fd 01       	movw	r30, r26
 a5a:	dc 01       	movw	r26, r24
 a5c:	f7 cf       	rjmp	.-18     	; 0xa4c <free+0xc2>
 a5e:	8d 91       	ld	r24, X+
 a60:	9c 91       	ld	r25, X
 a62:	11 97       	sbiw	r26, 0x01	; 1
 a64:	9d 01       	movw	r18, r26
 a66:	2e 5f       	subi	r18, 0xFE	; 254
 a68:	3f 4f       	sbci	r19, 0xFF	; 255
 a6a:	82 0f       	add	r24, r18
 a6c:	93 1f       	adc	r25, r19
 a6e:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <__brkval>
 a72:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <__brkval+0x1>
 a76:	28 17       	cp	r18, r24
 a78:	39 07       	cpc	r19, r25
 a7a:	69 f4       	brne	.+26     	; 0xa96 <free+0x10c>
 a7c:	30 97       	sbiw	r30, 0x00	; 0
 a7e:	29 f4       	brne	.+10     	; 0xa8a <free+0x100>
 a80:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <__flp+0x1>
 a84:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <__flp>
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <free+0x104>
 a8a:	13 82       	std	Z+3, r1	; 0x03
 a8c:	12 82       	std	Z+2, r1	; 0x02
 a8e:	b0 93 4f 02 	sts	0x024F, r27	; 0x80024f <__brkval+0x1>
 a92:	a0 93 4e 02 	sts	0x024E, r26	; 0x80024e <__brkval>
 a96:	df 91       	pop	r29
 a98:	cf 91       	pop	r28
 a9a:	08 95       	ret

00000a9c <_exit>:
 a9c:	f8 94       	cli

00000a9e <__stop_program>:
 a9e:	ff cf       	rjmp	.-2      	; 0xa9e <__stop_program>
