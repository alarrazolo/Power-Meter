
PowerMeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000150  00800100  00000b9c  00000c30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800250  00800250  00000d80  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000db0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d1d  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db9  00000000  00000000  00003d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000122b  00000000  00000000  00004b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000648  00000000  00000000  00005d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000092f  00000000  00000000  00006394  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017ae  00000000  00000000  00006cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  00008471  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e9       	ldi	r30, 0x9C	; 156
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 35       	cpi	r26, 0x50	; 80
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e5       	ldi	r26, 0x50	; 80
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 35       	cpi	r26, 0x56	; 86
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <main>
  9e:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initI2C>:
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  ac:	ec eb       	ldi	r30, 0xBC	; 188
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <get_pIC_RegValue>:
	set_pIC_RegValue(AdjStart, 0x56, 0x78);
	
}


uint16_t get_pIC_RegValue(uint8_t pICRegister){
  b8:	cf 93       	push	r28
	
	//send AND read Byte with register address Byte to read back 16 bit value.
	
	PORTB &= ~(1<<0); // set chip select bit low to initiate SPI communication. 
  ba:	28 98       	cbi	0x05, 0	; 5
	SPI_tradeByte(ReadRegPower | pICRegister); // AND read Byte with register address and send it over SPI
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	0e 94 18 03 	call	0x630	; 0x630 <SPI_tradeByte>
	uint8_t highByte = SPI_tradeByte(0); // Read MSD Byte first.
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0e 94 18 03 	call	0x630	; 0x630 <SPI_tradeByte>
  c8:	c8 2f       	mov	r28, r24
	uint8_t lowByte = SPI_tradeByte(0); // Read LSD Byte second.
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 18 03 	call	0x630	; 0x630 <SPI_tradeByte>
	PORTB |= (1<<0); // set chip select bit high to terminate SPI communication.
  d0:	28 9a       	sbi	0x05, 0	; 5
	uint16_t full16Byte = (highByte << 8) | lowByte; // Combine MSB and LSB together into 16 bit Byte.
	return full16Byte; // return Byte to function call. 
  d2:	2c 2f       	mov	r18, r28
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	32 2f       	mov	r19, r18
  d8:	22 27       	eor	r18, r18
	
	//printHexByte(pIC_d1bitHigh);
	//printHexByte(pIC_d1bitLow);
	//printString("H\r\n");
	
}
  da:	a9 01       	movw	r20, r18
  dc:	48 2b       	or	r20, r24
  de:	ca 01       	movw	r24, r20
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <set_pIC_RegValue>:

void set_pIC_RegValue(uint8_t pICRegister, uint8_t highByte, uint8_t lowByte){
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	d6 2f       	mov	r29, r22
  ea:	c4 2f       	mov	r28, r20
	
	//send AND write Byte with register Byte to write 16 bit value into register.
	
	PORTB &= ~(1<<0); // set chip select bit low to initiate SPI communication. 
  ec:	28 98       	cbi	0x05, 0	; 5
	SPI_tradeByte(WriteRegPower | pICRegister); // AND write Byte with register address and send it over SPI.
  ee:	0e 94 18 03 	call	0x630	; 0x630 <SPI_tradeByte>
	SPI_tradeByte(highByte); // Write MSD Byte first.
  f2:	8d 2f       	mov	r24, r29
  f4:	0e 94 18 03 	call	0x630	; 0x630 <SPI_tradeByte>
	SPI_tradeByte(lowByte); // Write LSD Byte second.
  f8:	8c 2f       	mov	r24, r28
  fa:	0e 94 18 03 	call	0x630	; 0x630 <SPI_tradeByte>
	PORTB |= (1<<0); // set chip select bit high to terminate SPI communication.
  fe:	28 9a       	sbi	0x05, 0	; 5
	//printString(" to value: ");
	//printHexByte(highBit);
	//printHexByte(lowBit);
	//printString("H\r\n");
	
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <pIC_Start>:
}

void pIC_Start(void){
	
	// set chip select port to output.
	DDRB |= (1<<0);
 106:	20 9a       	sbi	0x04, 0	; 4
	//set chip select on power meter IC high
	PORTB |= (1<<0);
 108:	28 9a       	sbi	0x05, 0	; 5
	
	if(!((SPCR >> MSTR)&0x01)) SPI_init();
 10a:	0c b4       	in	r0, 0x2c	; 44
 10c:	04 fe       	sbrs	r0, 4
 10e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <SPI_init>
	set_pIC_RegValue(AdjStart, 0x56, 0x78);
 112:	48 e7       	ldi	r20, 0x78	; 120
 114:	66 e5       	ldi	r22, 0x56	; 86
 116:	80 e3       	ldi	r24, 0x30	; 48
 118:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
 11c:	08 95       	ret

0000011e <setup_rf>:
	printString("/");
	printByte(date);
	printString("/");
	printWord(year);
	printString("\r\n");
}
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	0e 94 ac 01 	call	0x358	; 0x358 <nRF24L01_init>
 126:	ec 01       	movw	r28, r24
 128:	85 e2       	ldi	r24, 0x25	; 37
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	99 83       	std	Y+1, r25	; 0x01
 12e:	88 83       	st	Y, r24
 130:	22 e0       	ldi	r18, 0x02	; 2
 132:	2a 83       	std	Y+2, r18	; 0x02
 134:	9c 83       	std	Y+4, r25	; 0x04
 136:	8b 83       	std	Y+3, r24	; 0x03
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	2d 83       	std	Y+5, r18	; 0x05
 13c:	9f 83       	std	Y+7, r25	; 0x07
 13e:	8e 83       	std	Y+6, r24	; 0x06
 140:	25 e0       	ldi	r18, 0x05	; 5
 142:	28 87       	std	Y+8, r18	; 0x08
 144:	9a 87       	std	Y+10, r25	; 0x0a
 146:	89 87       	std	Y+9, r24	; 0x09
 148:	23 e0       	ldi	r18, 0x03	; 3
 14a:	2b 87       	std	Y+11, r18	; 0x0b
 14c:	9d 87       	std	Y+13, r25	; 0x0d
 14e:	8c 87       	std	Y+12, r24	; 0x0c
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	8e 87       	std	Y+14, r24	; 0x0e
 154:	e9 e6       	ldi	r30, 0x69	; 105
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	80 83       	st	Z, r24
 15e:	e8 9a       	sbi	0x1d, 0	; 29
 160:	ce 01       	movw	r24, r28
 162:	0e 94 17 02 	call	0x42e	; 0x42e <nRF24L01_begin>
 166:	ce 01       	movw	r24, r28
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <setup_timer>:
 16e:	e1 e8       	ldi	r30, 0x81	; 129
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	88 60       	ori	r24, 0x08	; 8
 176:	80 83       	st	Z, r24
 178:	af e6       	ldi	r26, 0x6F	; 111
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	8c 91       	ld	r24, X
 17e:	82 60       	ori	r24, 0x02	; 2
 180:	8c 93       	st	X, r24
 182:	82 e1       	ldi	r24, 0x12	; 18
 184:	9a e7       	ldi	r25, 0x7A	; 122
 186:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 18a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 18e:	80 81       	ld	r24, Z
 190:	84 60       	ori	r24, 0x04	; 4
 192:	80 83       	st	Z, r24
 194:	08 95       	ret

00000196 <print_power_IC_settings>:

void print_power_IC_settings(void){
	printString("Power IC Settings:");
 196:	8e e3       	ldi	r24, 0x3E	; 62
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	printString("\r\n");
 19e:	8a e4       	ldi	r24, 0x4A	; 74
 1a0:	92 e0       	ldi	r25, 0x02	; 2
 1a2:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	
	printString("System Status: ");
 1a6:	81 e5       	ldi	r24, 0x51	; 81
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	printWord(get_pIC_RegValue(SysStatus));
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 1b4:	0e 94 4d 03 	call	0x69a	; 0x69a <printWord>
	printString("\r\n");
 1b8:	8a e4       	ldi	r24, 0x4A	; 74
 1ba:	92 e0       	ldi	r25, 0x02	; 2
 1bc:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	
	printString("Metering Status: ");
 1c0:	81 e6       	ldi	r24, 0x61	; 97
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	printWord(get_pIC_RegValue(EnStatus));
 1c8:	86 e4       	ldi	r24, 0x46	; 70
 1ca:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 1ce:	0e 94 4d 03 	call	0x69a	; 0x69a <printWord>
	printString("\r\n");
 1d2:	8a e4       	ldi	r24, 0x4A	; 74
 1d4:	92 e0       	ldi	r25, 0x02	; 2
 1d6:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	
	printString("Metering Mode: ");
 1da:	83 e7       	ldi	r24, 0x73	; 115
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	printWord(get_pIC_RegValue(MMode));
 1e2:	8b e2       	ldi	r24, 0x2B	; 43
 1e4:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 1e8:	0e 94 4d 03 	call	0x69a	; 0x69a <printWord>
	printString("\r\n");
 1ec:	8a e4       	ldi	r24, 0x4A	; 74
 1ee:	92 e0       	ldi	r25, 0x02	; 2
 1f0:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	
	printString("Checksum 1: ");
 1f4:	83 e8       	ldi	r24, 0x83	; 131
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	printWord(get_pIC_RegValue(CS1));
 1fc:	8c e2       	ldi	r24, 0x2C	; 44
 1fe:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 202:	0e 94 4d 03 	call	0x69a	; 0x69a <printWord>
	printString("\r\n");
 206:	8a e4       	ldi	r24, 0x4A	; 74
 208:	92 e0       	ldi	r25, 0x02	; 2
 20a:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	
	printString("Checksum 2: ");
 20e:	80 e9       	ldi	r24, 0x90	; 144
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	printWord((get_pIC_RegValue(CS2)));
 216:	8b e3       	ldi	r24, 0x3B	; 59
 218:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 21c:	0e 94 4d 03 	call	0x69a	; 0x69a <printWord>
	printString("\r\n");
 220:	8a e4       	ldi	r24, 0x4A	; 74
 222:	92 e0       	ldi	r25, 0x02	; 2
 224:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	
	printString("Measurement Calibration Start Command: ");
 228:	8d e9       	ldi	r24, 0x9D	; 157
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	printWord((get_pIC_RegValue(AdjStart)));
 230:	80 e3       	ldi	r24, 0x30	; 48
 232:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 236:	0e 94 4d 03 	call	0x69a	; 0x69a <printWord>
	printString("\r\n");
 23a:	8a e4       	ldi	r24, 0x4A	; 74
 23c:	92 e0       	ldi	r25, 0x02	; 2
 23e:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	
	printString("Voltage RMS Gain: ");
 242:	85 ec       	ldi	r24, 0xC5	; 197
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	printWord((get_pIC_RegValue(Ugain)));
 24a:	81 e3       	ldi	r24, 0x31	; 49
 24c:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 250:	0e 94 4d 03 	call	0x69a	; 0x69a <printWord>
	printString("\r\n");
 254:	8a e4       	ldi	r24, 0x4A	; 74
 256:	92 e0       	ldi	r25, 0x02	; 2
 258:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	
	printString("L Line Current RMS Gain: ");
 25c:	88 ed       	ldi	r24, 0xD8	; 216
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	printWord((get_pIC_RegValue(IgainL)));
 264:	82 e3       	ldi	r24, 0x32	; 50
 266:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 26a:	0e 94 4d 03 	call	0x69a	; 0x69a <printWord>
	printString("\r\n");
 26e:	8a e4       	ldi	r24, 0x4A	; 74
 270:	92 e0       	ldi	r25, 0x02	; 2
 272:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
 276:	08 95       	ret

00000278 <print_power_data>:

void print_power_data(void){
	
	//printString("Measurement Calibration start: \r\n");
	//printWord(get_pIC_RegValue(AdjStart));
	printString("Voltage: ");
 278:	82 ef       	ldi	r24, 0xF2	; 242
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	printWord(get_pIC_RegValue(Urms));
 280:	89 e4       	ldi	r24, 0x49	; 73
 282:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 286:	0e 94 4d 03 	call	0x69a	; 0x69a <printWord>
	printString("\tCurrent: ");
 28a:	8c ef       	ldi	r24, 0xFC	; 252
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	printWord(get_pIC_RegValue(Irms));
 292:	88 e4       	ldi	r24, 0x48	; 72
 294:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 298:	0e 94 4d 03 	call	0x69a	; 0x69a <printWord>
	printString("\t Active Power: ");
 29c:	87 e0       	ldi	r24, 0x07	; 7
 29e:	92 e0       	ldi	r25, 0x02	; 2
 2a0:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	printSignedWord(get_pIC_RegValue(Pmean));
 2a4:	8a e4       	ldi	r24, 0x4A	; 74
 2a6:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 2aa:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <printSignedWord>
	printString("\r\n");
 2ae:	8a e4       	ldi	r24, 0x4A	; 74
 2b0:	92 e0       	ldi	r25, 0x02	; 2
 2b2:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	printString("\tFrequency: ");
 2b6:	88 e1       	ldi	r24, 0x18	; 24
 2b8:	92 e0       	ldi	r25, 0x02	; 2
 2ba:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	printWord(get_pIC_RegValue(Freq));
 2be:	8c e4       	ldi	r24, 0x4C	; 76
 2c0:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 2c4:	0e 94 4d 03 	call	0x69a	; 0x69a <printWord>
	printString("\tPower Factor: ");
 2c8:	85 e2       	ldi	r24, 0x25	; 37
 2ca:	92 e0       	ldi	r25, 0x02	; 2
 2cc:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	printSignedWord(get_pIC_RegValue(PowerF));
 2d0:	8d e4       	ldi	r24, 0x4D	; 77
 2d2:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 2d6:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <printSignedWord>
	printString("\r\n\n");
 2da:	85 e3       	ldi	r24, 0x35	; 53
 2dc:	92 e0       	ldi	r25, 0x02	; 2
 2de:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
 2e2:	08 95       	ret

000002e4 <main>:
uint8_t clockAddressW = 0b11010000; // read bit for DS1307
uint8_t to_address[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2}; // RF channel address.

int main(void)
{
	initUSART();
 2e4:	0e 94 1e 03 	call	0x63c	; 0x63c <initUSART>
	initI2C();
 2e8:	0e 94 53 00 	call	0xa6	; 0xa6 <initI2C>
	SPI_init();
 2ec:	0e 94 ff 02 	call	0x5fe	; 0x5fe <SPI_init>
	
	//bool on = false;
	sei();
 2f0:	78 94       	sei
	//nRF24L01 *rf = setup_rf();
	setup_rf();
 2f2:	0e 94 8f 00 	call	0x11e	; 0x11e <setup_rf>
	//m90E26 *pIC = setup_powerIC();
	
	pIC_Start();
 2f6:	0e 94 83 00 	call	0x106	; 0x106 <pIC_Start>
	setup_timer();
 2fa:	0e 94 b7 00 	call	0x16e	; 0x16e <setup_timer>
	
	printString("Starting Program!\r\n");
 2fe:	89 e3       	ldi	r24, 0x39	; 57
 300:	92 e0       	ldi	r25, 0x02	; 2
 302:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
	
	//print_RF_settings();
	
	print_power_IC_settings();
 306:	0e 94 cb 00 	call	0x196	; 0x196 <print_power_IC_settings>
	
    while (1) 
    {
		
		if (send_message){
 30a:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <__data_end>
 30e:	88 23       	and	r24, r24
 310:	e1 f3       	breq	.-8      	; 0x30a <main+0x26>
			print_power_data();
 312:	0e 94 3c 01 	call	0x278	; 0x278 <print_power_data>
			send_message = false;
 316:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <__data_end>
 31a:	f7 cf       	rjmp	.-18     	; 0x30a <main+0x26>

0000031c <__vector_11>:
	printString("\r\n\n");
	
}

// each one second interrupt
ISR(TIMER1_COMPA_vect) {
 31c:	1f 92       	push	r1
 31e:	0f 92       	push	r0
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	0f 92       	push	r0
 324:	11 24       	eor	r1, r1
 326:	8f 93       	push	r24
	send_message = true;
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <__data_end>
}
 32e:	8f 91       	pop	r24
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <__vector_1>:

// nRF24L01 interrupt
ISR(INT0_vect) {
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	8f 93       	push	r24
	rf_interrupt = true;
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <rf_interrupt>
 34c:	8f 91       	pop	r24
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <nRF24L01_init>:
 358:	80 e1       	ldi	r24, 0x10	; 16
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 ab 04 	call	0x956	; 0x956 <malloc>
 360:	20 e1       	ldi	r18, 0x10	; 16
 362:	fc 01       	movw	r30, r24
 364:	11 92       	st	Z+, r1
 366:	2a 95       	dec	r18
 368:	e9 f7       	brne	.-6      	; 0x364 <nRF24L01_init+0xc>
 36a:	08 95       	ret

0000036c <nRF24L01_send_command>:
 36c:	cf 92       	push	r12
 36e:	df 92       	push	r13
 370:	ef 92       	push	r14
 372:	ff 92       	push	r15
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	7c 01       	movw	r14, r24
 37e:	86 2f       	mov	r24, r22
 380:	6a 01       	movw	r12, r20
 382:	89 01       	movw	r16, r18
 384:	d7 01       	movw	r26, r14
 386:	ed 91       	ld	r30, X+
 388:	fc 91       	ld	r31, X
 38a:	11 97       	sbiw	r26, 0x01	; 1
 38c:	90 81       	ld	r25, Z
 38e:	21 e0       	ldi	r18, 0x01	; 1
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	12 96       	adiw	r26, 0x02	; 2
 394:	0c 90       	ld	r0, X
 396:	02 c0       	rjmp	.+4      	; 0x39c <nRF24L01_send_command+0x30>
 398:	22 0f       	add	r18, r18
 39a:	33 1f       	adc	r19, r19
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <nRF24L01_send_command+0x2c>
 3a0:	20 95       	com	r18
 3a2:	29 23       	and	r18, r25
 3a4:	20 83       	st	Z, r18
 3a6:	0e 94 18 03 	call	0x630	; 0x630 <SPI_tradeByte>
 3aa:	f7 01       	movw	r30, r14
 3ac:	87 87       	std	Z+15, r24	; 0x0f
 3ae:	01 15       	cp	r16, r1
 3b0:	11 05       	cpc	r17, r1
 3b2:	51 f0       	breq	.+20     	; 0x3c8 <nRF24L01_send_command+0x5c>
 3b4:	e6 01       	movw	r28, r12
 3b6:	0c 0d       	add	r16, r12
 3b8:	1d 1d       	adc	r17, r13
 3ba:	88 81       	ld	r24, Y
 3bc:	0e 94 18 03 	call	0x630	; 0x630 <SPI_tradeByte>
 3c0:	89 93       	st	Y+, r24
 3c2:	c0 17       	cp	r28, r16
 3c4:	d1 07       	cpc	r29, r17
 3c6:	c9 f7       	brne	.-14     	; 0x3ba <nRF24L01_send_command+0x4e>
 3c8:	d7 01       	movw	r26, r14
 3ca:	ed 91       	ld	r30, X+
 3cc:	fc 91       	ld	r31, X
 3ce:	11 97       	sbiw	r26, 0x01	; 1
 3d0:	20 81       	ld	r18, Z
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	12 96       	adiw	r26, 0x02	; 2
 3d8:	0c 90       	ld	r0, X
 3da:	12 97       	sbiw	r26, 0x02	; 2
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <nRF24L01_send_command+0x76>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	0a 94       	dec	r0
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <nRF24L01_send_command+0x72>
 3e6:	82 2b       	or	r24, r18
 3e8:	80 83       	st	Z, r24
 3ea:	1f 96       	adiw	r26, 0x0f	; 15
 3ec:	8c 91       	ld	r24, X
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	1f 91       	pop	r17
 3f4:	0f 91       	pop	r16
 3f6:	ff 90       	pop	r15
 3f8:	ef 90       	pop	r14
 3fa:	df 90       	pop	r13
 3fc:	cf 90       	pop	r12
 3fe:	08 95       	ret

00000400 <nRF24L01_write_register>:
 400:	60 62       	ori	r22, 0x20	; 32
 402:	0e 94 b6 01 	call	0x36c	; 0x36c <nRF24L01_send_command>
 406:	08 95       	ret

00000408 <nRF24L01_clear_interrupts>:
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	1f 92       	push	r1
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
 412:	20 e7       	ldi	r18, 0x70	; 112
 414:	29 83       	std	Y+1, r18	; 0x01
 416:	21 e0       	ldi	r18, 0x01	; 1
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	ae 01       	movw	r20, r28
 41c:	4f 5f       	subi	r20, 0xFF	; 255
 41e:	5f 4f       	sbci	r21, 0xFF	; 255
 420:	67 e0       	ldi	r22, 0x07	; 7
 422:	0e 94 00 02 	call	0x400	; 0x400 <nRF24L01_write_register>
 426:	0f 90       	pop	r0
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <nRF24L01_begin>:
 42e:	ff 92       	push	r15
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	1f 92       	push	r1
 43a:	cd b7       	in	r28, 0x3d	; 61
 43c:	de b7       	in	r29, 0x3e	; 62
 43e:	8c 01       	movw	r16, r24
 440:	dc 01       	movw	r26, r24
 442:	ed 91       	ld	r30, X+
 444:	fc 91       	ld	r31, X
 446:	11 97       	sbiw	r26, 0x01	; 1
 448:	42 91       	ld	r20, -Z
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	9c 01       	movw	r18, r24
 450:	12 96       	adiw	r26, 0x02	; 2
 452:	0c 90       	ld	r0, X
 454:	12 97       	sbiw	r26, 0x02	; 2
 456:	02 c0       	rjmp	.+4      	; 0x45c <nRF24L01_begin+0x2e>
 458:	22 0f       	add	r18, r18
 45a:	33 1f       	adc	r19, r19
 45c:	0a 94       	dec	r0
 45e:	e2 f7       	brpl	.-8      	; 0x458 <nRF24L01_begin+0x2a>
 460:	24 2b       	or	r18, r20
 462:	20 83       	st	Z, r18
 464:	13 96       	adiw	r26, 0x03	; 3
 466:	ed 91       	ld	r30, X+
 468:	fc 91       	ld	r31, X
 46a:	14 97       	sbiw	r26, 0x04	; 4
 46c:	42 91       	ld	r20, -Z
 46e:	9c 01       	movw	r18, r24
 470:	15 96       	adiw	r26, 0x05	; 5
 472:	0c 90       	ld	r0, X
 474:	15 97       	sbiw	r26, 0x05	; 5
 476:	02 c0       	rjmp	.+4      	; 0x47c <nRF24L01_begin+0x4e>
 478:	22 0f       	add	r18, r18
 47a:	33 1f       	adc	r19, r19
 47c:	0a 94       	dec	r0
 47e:	e2 f7       	brpl	.-8      	; 0x478 <nRF24L01_begin+0x4a>
 480:	24 2b       	or	r18, r20
 482:	20 83       	st	Z, r18
 484:	ed 91       	ld	r30, X+
 486:	fc 91       	ld	r31, X
 488:	11 97       	sbiw	r26, 0x01	; 1
 48a:	40 81       	ld	r20, Z
 48c:	9c 01       	movw	r18, r24
 48e:	12 96       	adiw	r26, 0x02	; 2
 490:	0c 90       	ld	r0, X
 492:	12 97       	sbiw	r26, 0x02	; 2
 494:	02 c0       	rjmp	.+4      	; 0x49a <nRF24L01_begin+0x6c>
 496:	22 0f       	add	r18, r18
 498:	33 1f       	adc	r19, r19
 49a:	0a 94       	dec	r0
 49c:	e2 f7       	brpl	.-8      	; 0x496 <nRF24L01_begin+0x68>
 49e:	24 2b       	or	r18, r20
 4a0:	20 83       	st	Z, r18
 4a2:	13 96       	adiw	r26, 0x03	; 3
 4a4:	ed 91       	ld	r30, X+
 4a6:	fc 91       	ld	r31, X
 4a8:	14 97       	sbiw	r26, 0x04	; 4
 4aa:	30 81       	ld	r19, Z
 4ac:	ac 01       	movw	r20, r24
 4ae:	15 96       	adiw	r26, 0x05	; 5
 4b0:	0c 90       	ld	r0, X
 4b2:	15 97       	sbiw	r26, 0x05	; 5
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <nRF24L01_begin+0x8c>
 4b6:	44 0f       	add	r20, r20
 4b8:	55 1f       	adc	r21, r21
 4ba:	0a 94       	dec	r0
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <nRF24L01_begin+0x88>
 4be:	24 2f       	mov	r18, r20
 4c0:	20 95       	com	r18
 4c2:	23 23       	and	r18, r19
 4c4:	20 83       	st	Z, r18
 4c6:	16 96       	adiw	r26, 0x06	; 6
 4c8:	ed 91       	ld	r30, X+
 4ca:	fc 91       	ld	r31, X
 4cc:	17 97       	sbiw	r26, 0x07	; 7
 4ce:	42 91       	ld	r20, -Z
 4d0:	9c 01       	movw	r18, r24
 4d2:	18 96       	adiw	r26, 0x08	; 8
 4d4:	0c 90       	ld	r0, X
 4d6:	18 97       	sbiw	r26, 0x08	; 8
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <nRF24L01_begin+0xb0>
 4da:	22 0f       	add	r18, r18
 4dc:	33 1f       	adc	r19, r19
 4de:	0a 94       	dec	r0
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <nRF24L01_begin+0xac>
 4e2:	24 2b       	or	r18, r20
 4e4:	20 83       	st	Z, r18
 4e6:	19 96       	adiw	r26, 0x09	; 9
 4e8:	ed 91       	ld	r30, X+
 4ea:	fc 91       	ld	r31, X
 4ec:	1a 97       	sbiw	r26, 0x0a	; 10
 4ee:	42 91       	ld	r20, -Z
 4f0:	9c 01       	movw	r18, r24
 4f2:	1b 96       	adiw	r26, 0x0b	; 11
 4f4:	0c 90       	ld	r0, X
 4f6:	1b 97       	sbiw	r26, 0x0b	; 11
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <nRF24L01_begin+0xd0>
 4fa:	22 0f       	add	r18, r18
 4fc:	33 1f       	adc	r19, r19
 4fe:	0a 94       	dec	r0
 500:	e2 f7       	brpl	.-8      	; 0x4fa <nRF24L01_begin+0xcc>
 502:	24 2b       	or	r18, r20
 504:	20 83       	st	Z, r18
 506:	1c 96       	adiw	r26, 0x0c	; 12
 508:	ed 91       	ld	r30, X+
 50a:	fc 91       	ld	r31, X
 50c:	1d 97       	sbiw	r26, 0x0d	; 13
 50e:	22 91       	ld	r18, -Z
 510:	1e 96       	adiw	r26, 0x0e	; 14
 512:	0c 90       	ld	r0, X
 514:	02 c0       	rjmp	.+4      	; 0x51a <nRF24L01_begin+0xec>
 516:	88 0f       	add	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	0a 94       	dec	r0
 51c:	e2 f7       	brpl	.-8      	; 0x516 <nRF24L01_begin+0xe8>
 51e:	80 95       	com	r24
 520:	82 23       	and	r24, r18
 522:	80 83       	st	Z, r24
 524:	0c b4       	in	r0, 0x2c	; 44
 526:	04 fe       	sbrs	r0, 4
 528:	0e 94 ff 02 	call	0x5fe	; 0x5fe <SPI_init>
 52c:	20 e0       	ldi	r18, 0x00	; 0
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	40 e0       	ldi	r20, 0x00	; 0
 532:	50 e0       	ldi	r21, 0x00	; 0
 534:	62 ee       	ldi	r22, 0xE2	; 226
 536:	c8 01       	movw	r24, r16
 538:	0e 94 b6 01 	call	0x36c	; 0x36c <nRF24L01_send_command>
 53c:	20 e0       	ldi	r18, 0x00	; 0
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	40 e0       	ldi	r20, 0x00	; 0
 542:	50 e0       	ldi	r21, 0x00	; 0
 544:	61 ee       	ldi	r22, 0xE1	; 225
 546:	c8 01       	movw	r24, r16
 548:	0e 94 b6 01 	call	0x36c	; 0x36c <nRF24L01_send_command>
 54c:	c8 01       	movw	r24, r16
 54e:	0e 94 04 02 	call	0x408	; 0x408 <nRF24L01_clear_interrupts>
 552:	8f e0       	ldi	r24, 0x0F	; 15
 554:	89 83       	std	Y+1, r24	; 0x01
 556:	21 e0       	ldi	r18, 0x01	; 1
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	ae 01       	movw	r20, r28
 55c:	4f 5f       	subi	r20, 0xFF	; 255
 55e:	5f 4f       	sbci	r21, 0xFF	; 255
 560:	60 e0       	ldi	r22, 0x00	; 0
 562:	c8 01       	movw	r24, r16
 564:	0e 94 00 02 	call	0x400	; 0x400 <nRF24L01_write_register>
 568:	0f 2e       	mov	r0, r31
 56a:	ff e3       	ldi	r31, 0x3F	; 63
 56c:	ff 2e       	mov	r15, r31
 56e:	f0 2d       	mov	r31, r0
 570:	f9 82       	std	Y+1, r15	; 0x01
 572:	21 e0       	ldi	r18, 0x01	; 1
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	ae 01       	movw	r20, r28
 578:	4f 5f       	subi	r20, 0xFF	; 255
 57a:	5f 4f       	sbci	r21, 0xFF	; 255
 57c:	61 e0       	ldi	r22, 0x01	; 1
 57e:	c8 01       	movw	r24, r16
 580:	0e 94 00 02 	call	0x400	; 0x400 <nRF24L01_write_register>
 584:	89 e0       	ldi	r24, 0x09	; 9
 586:	89 83       	std	Y+1, r24	; 0x01
 588:	21 e0       	ldi	r18, 0x01	; 1
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	ae 01       	movw	r20, r28
 58e:	4f 5f       	subi	r20, 0xFF	; 255
 590:	5f 4f       	sbci	r21, 0xFF	; 255
 592:	66 e0       	ldi	r22, 0x06	; 6
 594:	c8 01       	movw	r24, r16
 596:	0e 94 00 02 	call	0x400	; 0x400 <nRF24L01_write_register>
 59a:	80 e6       	ldi	r24, 0x60	; 96
 59c:	89 83       	std	Y+1, r24	; 0x01
 59e:	21 e0       	ldi	r18, 0x01	; 1
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	ae 01       	movw	r20, r28
 5a4:	4f 5f       	subi	r20, 0xFF	; 255
 5a6:	5f 4f       	sbci	r21, 0xFF	; 255
 5a8:	65 e0       	ldi	r22, 0x05	; 5
 5aa:	c8 01       	movw	r24, r16
 5ac:	0e 94 00 02 	call	0x400	; 0x400 <nRF24L01_write_register>
 5b0:	f9 82       	std	Y+1, r15	; 0x01
 5b2:	21 e0       	ldi	r18, 0x01	; 1
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	ae 01       	movw	r20, r28
 5b8:	4f 5f       	subi	r20, 0xFF	; 255
 5ba:	5f 4f       	sbci	r21, 0xFF	; 255
 5bc:	6c e1       	ldi	r22, 0x1C	; 28
 5be:	c8 01       	movw	r24, r16
 5c0:	0e 94 00 02 	call	0x400	; 0x400 <nRF24L01_write_register>
 5c4:	84 e0       	ldi	r24, 0x04	; 4
 5c6:	89 83       	std	Y+1, r24	; 0x01
 5c8:	21 e0       	ldi	r18, 0x01	; 1
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	ae 01       	movw	r20, r28
 5ce:	4f 5f       	subi	r20, 0xFF	; 255
 5d0:	5f 4f       	sbci	r21, 0xFF	; 255
 5d2:	6d e1       	ldi	r22, 0x1D	; 29
 5d4:	c8 01       	movw	r24, r16
 5d6:	0e 94 00 02 	call	0x400	; 0x400 <nRF24L01_write_register>
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	89 83       	std	Y+1, r24	; 0x01
 5de:	21 e0       	ldi	r18, 0x01	; 1
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	ae 01       	movw	r20, r28
 5e4:	4f 5f       	subi	r20, 0xFF	; 255
 5e6:	5f 4f       	sbci	r21, 0xFF	; 255
 5e8:	62 e0       	ldi	r22, 0x02	; 2
 5ea:	c8 01       	movw	r24, r16
 5ec:	0e 94 00 02 	call	0x400	; 0x400 <nRF24L01_write_register>
 5f0:	0f 90       	pop	r0
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	1f 91       	pop	r17
 5f8:	0f 91       	pop	r16
 5fa:	ff 90       	pop	r15
 5fc:	08 95       	ret

000005fe <SPI_init>:
 5fe:	8c b5       	in	r24, 0x2c	; 44
 600:	80 61       	ori	r24, 0x10	; 16
 602:	8c bd       	out	0x2c, r24	; 44
 604:	8c b5       	in	r24, 0x2c	; 44
 606:	80 64       	ori	r24, 0x40	; 64
 608:	8c bd       	out	0x2c, r24	; 44
 60a:	8c b5       	in	r24, 0x2c	; 44
 60c:	87 7f       	andi	r24, 0xF7	; 247
 60e:	8c bd       	out	0x2c, r24	; 44
 610:	8c b5       	in	r24, 0x2c	; 44
 612:	8b 7f       	andi	r24, 0xFB	; 251
 614:	8c bd       	out	0x2c, r24	; 44
 616:	8c b5       	in	r24, 0x2c	; 44
 618:	81 60       	ori	r24, 0x01	; 1
 61a:	8c bd       	out	0x2c, r24	; 44
 61c:	8c b5       	in	r24, 0x2c	; 44
 61e:	8d 7f       	andi	r24, 0xFD	; 253
 620:	8c bd       	out	0x2c, r24	; 44
 622:	8d b5       	in	r24, 0x2d	; 45
 624:	8e 7f       	andi	r24, 0xFE	; 254
 626:	8d bd       	out	0x2d, r24	; 45
 628:	8c b5       	in	r24, 0x2c	; 44
 62a:	8f 7d       	andi	r24, 0xDF	; 223
 62c:	8c bd       	out	0x2c, r24	; 44
 62e:	08 95       	ret

00000630 <SPI_tradeByte>:
 630:	8e bd       	out	0x2e, r24	; 46
 632:	0d b4       	in	r0, 0x2d	; 45
 634:	07 fe       	sbrs	r0, 7
 636:	fd cf       	rjmp	.-6      	; 0x632 <SPI_tradeByte+0x2>
 638:	8e b5       	in	r24, 0x2e	; 46
 63a:	08 95       	ret

0000063c <initUSART>:
	uint8_t i = 0;
	while (myString[i]) {
		printByte(myString[i]);
		i++;
	}
}
 63c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 640:	83 e3       	ldi	r24, 0x33	; 51
 642:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 646:	e0 ec       	ldi	r30, 0xC0	; 192
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	80 81       	ld	r24, Z
 64c:	8d 7f       	andi	r24, 0xFD	; 253
 64e:	80 83       	st	Z, r24
 650:	88 e1       	ldi	r24, 0x18	; 24
 652:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 656:	86 e0       	ldi	r24, 0x06	; 6
 658:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 65c:	08 95       	ret

0000065e <transmitByte>:
 65e:	e0 ec       	ldi	r30, 0xC0	; 192
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	90 81       	ld	r25, Z
 664:	95 ff       	sbrs	r25, 5
 666:	fd cf       	rjmp	.-6      	; 0x662 <transmitByte+0x4>
 668:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 66c:	08 95       	ret

0000066e <printString>:
 66e:	0f 93       	push	r16
 670:	1f 93       	push	r17
 672:	cf 93       	push	r28
 674:	fc 01       	movw	r30, r24
 676:	80 81       	ld	r24, Z
 678:	88 23       	and	r24, r24
 67a:	59 f0       	breq	.+22     	; 0x692 <printString+0x24>
 67c:	8f 01       	movw	r16, r30
 67e:	c0 e0       	ldi	r28, 0x00	; 0
 680:	0e 94 2f 03 	call	0x65e	; 0x65e <transmitByte>
 684:	cf 5f       	subi	r28, 0xFF	; 255
 686:	f8 01       	movw	r30, r16
 688:	ec 0f       	add	r30, r28
 68a:	f1 1d       	adc	r31, r1
 68c:	80 81       	ld	r24, Z
 68e:	81 11       	cpse	r24, r1
 690:	f7 cf       	rjmp	.-18     	; 0x680 <printString+0x12>
 692:	cf 91       	pop	r28
 694:	1f 91       	pop	r17
 696:	0f 91       	pop	r16
 698:	08 95       	ret

0000069a <printWord>:
  transmitByte('0' + (byte / 100));                        /* Hundreds */
  transmitByte('0' + ((byte / 10) % 10));                      /* Tens */
  transmitByte('0' + (byte % 10));                             /* Ones */
}

void printWord(uint16_t word) {
 69a:	0f 93       	push	r16
 69c:	1f 93       	push	r17
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	8c 01       	movw	r16, r24
	  transmitByte('0' + (word / 10000));                 /* Ten-thousands */
 6a4:	9c 01       	movw	r18, r24
 6a6:	32 95       	swap	r19
 6a8:	22 95       	swap	r18
 6aa:	2f 70       	andi	r18, 0x0F	; 15
 6ac:	23 27       	eor	r18, r19
 6ae:	3f 70       	andi	r19, 0x0F	; 15
 6b0:	23 27       	eor	r18, r19
 6b2:	a7 e4       	ldi	r26, 0x47	; 71
 6b4:	b3 e0       	ldi	r27, 0x03	; 3
 6b6:	0e 94 88 04 	call	0x910	; 0x910 <__umulhisi3>
 6ba:	96 95       	lsr	r25
 6bc:	87 95       	ror	r24
 6be:	96 95       	lsr	r25
 6c0:	87 95       	ror	r24
 6c2:	96 95       	lsr	r25
 6c4:	87 95       	ror	r24
 6c6:	80 5d       	subi	r24, 0xD0	; 208
 6c8:	0e 94 2f 03 	call	0x65e	; 0x65e <transmitByte>
	  transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 6cc:	98 01       	movw	r18, r16
 6ce:	36 95       	lsr	r19
 6d0:	27 95       	ror	r18
 6d2:	36 95       	lsr	r19
 6d4:	27 95       	ror	r18
 6d6:	36 95       	lsr	r19
 6d8:	27 95       	ror	r18
 6da:	a5 ec       	ldi	r26, 0xC5	; 197
 6dc:	b0 e2       	ldi	r27, 0x20	; 32
 6de:	0e 94 88 04 	call	0x910	; 0x910 <__umulhisi3>
 6e2:	ac 01       	movw	r20, r24
 6e4:	52 95       	swap	r21
 6e6:	42 95       	swap	r20
 6e8:	4f 70       	andi	r20, 0x0F	; 15
 6ea:	45 27       	eor	r20, r21
 6ec:	5f 70       	andi	r21, 0x0F	; 15
 6ee:	45 27       	eor	r20, r21
 6f0:	9a 01       	movw	r18, r20
 6f2:	ad ec       	ldi	r26, 0xCD	; 205
 6f4:	bc ec       	ldi	r27, 0xCC	; 204
 6f6:	0e 94 88 04 	call	0x910	; 0x910 <__umulhisi3>
 6fa:	96 95       	lsr	r25
 6fc:	87 95       	ror	r24
 6fe:	96 95       	lsr	r25
 700:	87 95       	ror	r24
 702:	96 95       	lsr	r25
 704:	87 95       	ror	r24
 706:	9c 01       	movw	r18, r24
 708:	22 0f       	add	r18, r18
 70a:	33 1f       	adc	r19, r19
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	82 0f       	add	r24, r18
 71a:	93 1f       	adc	r25, r19
 71c:	9a 01       	movw	r18, r20
 71e:	28 1b       	sub	r18, r24
 720:	39 0b       	sbc	r19, r25
 722:	c9 01       	movw	r24, r18
 724:	80 5d       	subi	r24, 0xD0	; 208
 726:	0e 94 2f 03 	call	0x65e	; 0x65e <transmitByte>
	  //printString("."); //
	  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 72a:	98 01       	movw	r18, r16
 72c:	36 95       	lsr	r19
 72e:	27 95       	ror	r18
 730:	36 95       	lsr	r19
 732:	27 95       	ror	r18
 734:	ab e7       	ldi	r26, 0x7B	; 123
 736:	b4 e1       	ldi	r27, 0x14	; 20
 738:	0e 94 88 04 	call	0x910	; 0x910 <__umulhisi3>
 73c:	ac 01       	movw	r20, r24
 73e:	56 95       	lsr	r21
 740:	47 95       	ror	r20
 742:	9a 01       	movw	r18, r20
 744:	ad ec       	ldi	r26, 0xCD	; 205
 746:	bc ec       	ldi	r27, 0xCC	; 204
 748:	0e 94 88 04 	call	0x910	; 0x910 <__umulhisi3>
 74c:	96 95       	lsr	r25
 74e:	87 95       	ror	r24
 750:	96 95       	lsr	r25
 752:	87 95       	ror	r24
 754:	96 95       	lsr	r25
 756:	87 95       	ror	r24
 758:	9c 01       	movw	r18, r24
 75a:	22 0f       	add	r18, r18
 75c:	33 1f       	adc	r19, r19
 75e:	88 0f       	add	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	88 0f       	add	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	88 0f       	add	r24, r24
 768:	99 1f       	adc	r25, r25
 76a:	82 0f       	add	r24, r18
 76c:	93 1f       	adc	r25, r19
 76e:	9a 01       	movw	r18, r20
 770:	28 1b       	sub	r18, r24
 772:	39 0b       	sbc	r19, r25
 774:	c9 01       	movw	r24, r18
 776:	80 5d       	subi	r24, 0xD0	; 208
 778:	0e 94 2f 03 	call	0x65e	; 0x65e <transmitByte>
	  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 77c:	98 01       	movw	r18, r16
 77e:	ad ec       	ldi	r26, 0xCD	; 205
 780:	bc ec       	ldi	r27, 0xCC	; 204
 782:	0e 94 88 04 	call	0x910	; 0x910 <__umulhisi3>
 786:	ec 01       	movw	r28, r24
 788:	d6 95       	lsr	r29
 78a:	c7 95       	ror	r28
 78c:	d6 95       	lsr	r29
 78e:	c7 95       	ror	r28
 790:	d6 95       	lsr	r29
 792:	c7 95       	ror	r28
 794:	9e 01       	movw	r18, r28
 796:	0e 94 88 04 	call	0x910	; 0x910 <__umulhisi3>
 79a:	96 95       	lsr	r25
 79c:	87 95       	ror	r24
 79e:	96 95       	lsr	r25
 7a0:	87 95       	ror	r24
 7a2:	96 95       	lsr	r25
 7a4:	87 95       	ror	r24
 7a6:	9c 01       	movw	r18, r24
 7a8:	22 0f       	add	r18, r18
 7aa:	33 1f       	adc	r19, r19
 7ac:	88 0f       	add	r24, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	88 0f       	add	r24, r24
 7b2:	99 1f       	adc	r25, r25
 7b4:	88 0f       	add	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	82 0f       	add	r24, r18
 7ba:	93 1f       	adc	r25, r19
 7bc:	9e 01       	movw	r18, r28
 7be:	28 1b       	sub	r18, r24
 7c0:	39 0b       	sbc	r19, r25
 7c2:	c9 01       	movw	r24, r18
 7c4:	80 5d       	subi	r24, 0xD0	; 208
 7c6:	0e 94 2f 03 	call	0x65e	; 0x65e <transmitByte>
	  transmitByte('0' + (word % 10));                             /* Ones */
 7ca:	ce 01       	movw	r24, r28
 7cc:	88 0f       	add	r24, r24
 7ce:	99 1f       	adc	r25, r25
 7d0:	cc 0f       	add	r28, r28
 7d2:	dd 1f       	adc	r29, r29
 7d4:	cc 0f       	add	r28, r28
 7d6:	dd 1f       	adc	r29, r29
 7d8:	cc 0f       	add	r28, r28
 7da:	dd 1f       	adc	r29, r29
 7dc:	c8 0f       	add	r28, r24
 7de:	d9 1f       	adc	r29, r25
 7e0:	c8 01       	movw	r24, r16
 7e2:	8c 1b       	sub	r24, r28
 7e4:	9d 0b       	sbc	r25, r29
 7e6:	80 5d       	subi	r24, 0xD0	; 208
 7e8:	0e 94 2f 03 	call	0x65e	; 0x65e <transmitByte>
}
 7ec:	df 91       	pop	r29
 7ee:	cf 91       	pop	r28
 7f0:	1f 91       	pop	r17
 7f2:	0f 91       	pop	r16
 7f4:	08 95       	ret

000007f6 <printSignedWord>:

void printSignedWord(int16_t word){
 7f6:	0f 93       	push	r16
 7f8:	1f 93       	push	r17
 7fa:	cf 93       	push	r28
 7fc:	df 93       	push	r29
 7fe:	ec 01       	movw	r28, r24
	if(word>>15){
 800:	99 23       	and	r25, r25
 802:	dc f5       	brge	.+118    	; 0x87a <printSignedWord+0x84>
		word &= ~(1UL<<16);
		printString("-");
 804:	8d e4       	ldi	r24, 0x4D	; 77
 806:	92 e0       	ldi	r25, 0x02	; 2
 808:	0e 94 37 03 	call	0x66e	; 0x66e <printString>
		word ^= (0xffff & ~(1UL<<16));
		word++;
 80c:	d1 95       	neg	r29
 80e:	c1 95       	neg	r28
 810:	d1 09       	sbc	r29, r1
		transmitByte('0' + (word / 10000));                 /* Ten-thousands */
 812:	ce 01       	movw	r24, r28
 814:	60 e1       	ldi	r22, 0x10	; 16
 816:	77 e2       	ldi	r23, 0x27	; 39
 818:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divmodhi4>
 81c:	80 e3       	ldi	r24, 0x30	; 48
 81e:	86 0f       	add	r24, r22
 820:	0e 94 2f 03 	call	0x65e	; 0x65e <transmitByte>
		transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 824:	ce 01       	movw	r24, r28
 826:	68 ee       	ldi	r22, 0xE8	; 232
 828:	73 e0       	ldi	r23, 0x03	; 3
 82a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divmodhi4>
 82e:	cb 01       	movw	r24, r22
 830:	0a e0       	ldi	r16, 0x0A	; 10
 832:	10 e0       	ldi	r17, 0x00	; 0
 834:	b8 01       	movw	r22, r16
 836:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divmodhi4>
 83a:	80 5d       	subi	r24, 0xD0	; 208
 83c:	0e 94 2f 03 	call	0x65e	; 0x65e <transmitByte>
		//printString("."); //
		transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 840:	ce 01       	movw	r24, r28
 842:	64 e6       	ldi	r22, 0x64	; 100
 844:	70 e0       	ldi	r23, 0x00	; 0
 846:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divmodhi4>
 84a:	cb 01       	movw	r24, r22
 84c:	b8 01       	movw	r22, r16
 84e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divmodhi4>
 852:	80 5d       	subi	r24, 0xD0	; 208
 854:	0e 94 2f 03 	call	0x65e	; 0x65e <transmitByte>
		transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 858:	ce 01       	movw	r24, r28
 85a:	b8 01       	movw	r22, r16
 85c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divmodhi4>
 860:	c8 2f       	mov	r28, r24
 862:	cb 01       	movw	r24, r22
 864:	b8 01       	movw	r22, r16
 866:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divmodhi4>
 86a:	80 5d       	subi	r24, 0xD0	; 208
 86c:	0e 94 2f 03 	call	0x65e	; 0x65e <transmitByte>
		transmitByte('0' + (word % 10));                             /* Ones */
 870:	80 e3       	ldi	r24, 0x30	; 48
 872:	8c 0f       	add	r24, r28
 874:	0e 94 2f 03 	call	0x65e	; 0x65e <transmitByte>
 878:	32 c0       	rjmp	.+100    	; 0x8de <printSignedWord+0xe8>
	}
	else{
		transmitByte('0' + (word / 10000));                 /* Ten-thousands */
 87a:	60 e1       	ldi	r22, 0x10	; 16
 87c:	77 e2       	ldi	r23, 0x27	; 39
 87e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divmodhi4>
 882:	80 e3       	ldi	r24, 0x30	; 48
 884:	86 0f       	add	r24, r22
 886:	0e 94 2f 03 	call	0x65e	; 0x65e <transmitByte>
		transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
 88a:	ce 01       	movw	r24, r28
 88c:	68 ee       	ldi	r22, 0xE8	; 232
 88e:	73 e0       	ldi	r23, 0x03	; 3
 890:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divmodhi4>
 894:	cb 01       	movw	r24, r22
 896:	0a e0       	ldi	r16, 0x0A	; 10
 898:	10 e0       	ldi	r17, 0x00	; 0
 89a:	b8 01       	movw	r22, r16
 89c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divmodhi4>
 8a0:	80 5d       	subi	r24, 0xD0	; 208
 8a2:	0e 94 2f 03 	call	0x65e	; 0x65e <transmitByte>
		//printString("."); //
		transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
 8a6:	ce 01       	movw	r24, r28
 8a8:	64 e6       	ldi	r22, 0x64	; 100
 8aa:	70 e0       	ldi	r23, 0x00	; 0
 8ac:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divmodhi4>
 8b0:	cb 01       	movw	r24, r22
 8b2:	b8 01       	movw	r22, r16
 8b4:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divmodhi4>
 8b8:	80 5d       	subi	r24, 0xD0	; 208
 8ba:	0e 94 2f 03 	call	0x65e	; 0x65e <transmitByte>
		transmitByte('0' + ((word / 10) % 10));                      /* Tens */
 8be:	ce 01       	movw	r24, r28
 8c0:	b8 01       	movw	r22, r16
 8c2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divmodhi4>
 8c6:	c8 2f       	mov	r28, r24
 8c8:	cb 01       	movw	r24, r22
 8ca:	b8 01       	movw	r22, r16
 8cc:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__divmodhi4>
 8d0:	80 5d       	subi	r24, 0xD0	; 208
 8d2:	0e 94 2f 03 	call	0x65e	; 0x65e <transmitByte>
		transmitByte('0' + (word % 10));                             /* Ones */
 8d6:	80 e3       	ldi	r24, 0x30	; 48
 8d8:	8c 0f       	add	r24, r28
 8da:	0e 94 2f 03 	call	0x65e	; 0x65e <transmitByte>
	}
	
}
 8de:	df 91       	pop	r29
 8e0:	cf 91       	pop	r28
 8e2:	1f 91       	pop	r17
 8e4:	0f 91       	pop	r16
 8e6:	08 95       	ret

000008e8 <__divmodhi4>:
 8e8:	97 fb       	bst	r25, 7
 8ea:	07 2e       	mov	r0, r23
 8ec:	16 f4       	brtc	.+4      	; 0x8f2 <__divmodhi4+0xa>
 8ee:	00 94       	com	r0
 8f0:	07 d0       	rcall	.+14     	; 0x900 <__divmodhi4_neg1>
 8f2:	77 fd       	sbrc	r23, 7
 8f4:	09 d0       	rcall	.+18     	; 0x908 <__divmodhi4_neg2>
 8f6:	0e 94 97 04 	call	0x92e	; 0x92e <__udivmodhi4>
 8fa:	07 fc       	sbrc	r0, 7
 8fc:	05 d0       	rcall	.+10     	; 0x908 <__divmodhi4_neg2>
 8fe:	3e f4       	brtc	.+14     	; 0x90e <__divmodhi4_exit>

00000900 <__divmodhi4_neg1>:
 900:	90 95       	com	r25
 902:	81 95       	neg	r24
 904:	9f 4f       	sbci	r25, 0xFF	; 255
 906:	08 95       	ret

00000908 <__divmodhi4_neg2>:
 908:	70 95       	com	r23
 90a:	61 95       	neg	r22
 90c:	7f 4f       	sbci	r23, 0xFF	; 255

0000090e <__divmodhi4_exit>:
 90e:	08 95       	ret

00000910 <__umulhisi3>:
 910:	a2 9f       	mul	r26, r18
 912:	b0 01       	movw	r22, r0
 914:	b3 9f       	mul	r27, r19
 916:	c0 01       	movw	r24, r0
 918:	a3 9f       	mul	r26, r19
 91a:	70 0d       	add	r23, r0
 91c:	81 1d       	adc	r24, r1
 91e:	11 24       	eor	r1, r1
 920:	91 1d       	adc	r25, r1
 922:	b2 9f       	mul	r27, r18
 924:	70 0d       	add	r23, r0
 926:	81 1d       	adc	r24, r1
 928:	11 24       	eor	r1, r1
 92a:	91 1d       	adc	r25, r1
 92c:	08 95       	ret

0000092e <__udivmodhi4>:
 92e:	aa 1b       	sub	r26, r26
 930:	bb 1b       	sub	r27, r27
 932:	51 e1       	ldi	r21, 0x11	; 17
 934:	07 c0       	rjmp	.+14     	; 0x944 <__udivmodhi4_ep>

00000936 <__udivmodhi4_loop>:
 936:	aa 1f       	adc	r26, r26
 938:	bb 1f       	adc	r27, r27
 93a:	a6 17       	cp	r26, r22
 93c:	b7 07       	cpc	r27, r23
 93e:	10 f0       	brcs	.+4      	; 0x944 <__udivmodhi4_ep>
 940:	a6 1b       	sub	r26, r22
 942:	b7 0b       	sbc	r27, r23

00000944 <__udivmodhi4_ep>:
 944:	88 1f       	adc	r24, r24
 946:	99 1f       	adc	r25, r25
 948:	5a 95       	dec	r21
 94a:	a9 f7       	brne	.-22     	; 0x936 <__udivmodhi4_loop>
 94c:	80 95       	com	r24
 94e:	90 95       	com	r25
 950:	bc 01       	movw	r22, r24
 952:	cd 01       	movw	r24, r26
 954:	08 95       	ret

00000956 <malloc>:
 956:	0f 93       	push	r16
 958:	1f 93       	push	r17
 95a:	cf 93       	push	r28
 95c:	df 93       	push	r29
 95e:	82 30       	cpi	r24, 0x02	; 2
 960:	91 05       	cpc	r25, r1
 962:	10 f4       	brcc	.+4      	; 0x968 <malloc+0x12>
 964:	82 e0       	ldi	r24, 0x02	; 2
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <__flp>
 96c:	f0 91 55 02 	lds	r31, 0x0255	; 0x800255 <__flp+0x1>
 970:	20 e0       	ldi	r18, 0x00	; 0
 972:	30 e0       	ldi	r19, 0x00	; 0
 974:	a0 e0       	ldi	r26, 0x00	; 0
 976:	b0 e0       	ldi	r27, 0x00	; 0
 978:	30 97       	sbiw	r30, 0x00	; 0
 97a:	19 f1       	breq	.+70     	; 0x9c2 <malloc+0x6c>
 97c:	40 81       	ld	r20, Z
 97e:	51 81       	ldd	r21, Z+1	; 0x01
 980:	02 81       	ldd	r16, Z+2	; 0x02
 982:	13 81       	ldd	r17, Z+3	; 0x03
 984:	48 17       	cp	r20, r24
 986:	59 07       	cpc	r21, r25
 988:	c8 f0       	brcs	.+50     	; 0x9bc <malloc+0x66>
 98a:	84 17       	cp	r24, r20
 98c:	95 07       	cpc	r25, r21
 98e:	69 f4       	brne	.+26     	; 0x9aa <malloc+0x54>
 990:	10 97       	sbiw	r26, 0x00	; 0
 992:	31 f0       	breq	.+12     	; 0x9a0 <malloc+0x4a>
 994:	12 96       	adiw	r26, 0x02	; 2
 996:	0c 93       	st	X, r16
 998:	12 97       	sbiw	r26, 0x02	; 2
 99a:	13 96       	adiw	r26, 0x03	; 3
 99c:	1c 93       	st	X, r17
 99e:	27 c0       	rjmp	.+78     	; 0x9ee <malloc+0x98>
 9a0:	00 93 54 02 	sts	0x0254, r16	; 0x800254 <__flp>
 9a4:	10 93 55 02 	sts	0x0255, r17	; 0x800255 <__flp+0x1>
 9a8:	22 c0       	rjmp	.+68     	; 0x9ee <malloc+0x98>
 9aa:	21 15       	cp	r18, r1
 9ac:	31 05       	cpc	r19, r1
 9ae:	19 f0       	breq	.+6      	; 0x9b6 <malloc+0x60>
 9b0:	42 17       	cp	r20, r18
 9b2:	53 07       	cpc	r21, r19
 9b4:	18 f4       	brcc	.+6      	; 0x9bc <malloc+0x66>
 9b6:	9a 01       	movw	r18, r20
 9b8:	bd 01       	movw	r22, r26
 9ba:	ef 01       	movw	r28, r30
 9bc:	df 01       	movw	r26, r30
 9be:	f8 01       	movw	r30, r16
 9c0:	db cf       	rjmp	.-74     	; 0x978 <malloc+0x22>
 9c2:	21 15       	cp	r18, r1
 9c4:	31 05       	cpc	r19, r1
 9c6:	f9 f0       	breq	.+62     	; 0xa06 <malloc+0xb0>
 9c8:	28 1b       	sub	r18, r24
 9ca:	39 0b       	sbc	r19, r25
 9cc:	24 30       	cpi	r18, 0x04	; 4
 9ce:	31 05       	cpc	r19, r1
 9d0:	80 f4       	brcc	.+32     	; 0x9f2 <malloc+0x9c>
 9d2:	8a 81       	ldd	r24, Y+2	; 0x02
 9d4:	9b 81       	ldd	r25, Y+3	; 0x03
 9d6:	61 15       	cp	r22, r1
 9d8:	71 05       	cpc	r23, r1
 9da:	21 f0       	breq	.+8      	; 0x9e4 <malloc+0x8e>
 9dc:	fb 01       	movw	r30, r22
 9de:	93 83       	std	Z+3, r25	; 0x03
 9e0:	82 83       	std	Z+2, r24	; 0x02
 9e2:	04 c0       	rjmp	.+8      	; 0x9ec <malloc+0x96>
 9e4:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <__flp+0x1>
 9e8:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <__flp>
 9ec:	fe 01       	movw	r30, r28
 9ee:	32 96       	adiw	r30, 0x02	; 2
 9f0:	44 c0       	rjmp	.+136    	; 0xa7a <malloc+0x124>
 9f2:	fe 01       	movw	r30, r28
 9f4:	e2 0f       	add	r30, r18
 9f6:	f3 1f       	adc	r31, r19
 9f8:	81 93       	st	Z+, r24
 9fa:	91 93       	st	Z+, r25
 9fc:	22 50       	subi	r18, 0x02	; 2
 9fe:	31 09       	sbc	r19, r1
 a00:	39 83       	std	Y+1, r19	; 0x01
 a02:	28 83       	st	Y, r18
 a04:	3a c0       	rjmp	.+116    	; 0xa7a <malloc+0x124>
 a06:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <__brkval>
 a0a:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <__brkval+0x1>
 a0e:	23 2b       	or	r18, r19
 a10:	41 f4       	brne	.+16     	; 0xa22 <malloc+0xcc>
 a12:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 a16:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 a1a:	30 93 53 02 	sts	0x0253, r19	; 0x800253 <__brkval+0x1>
 a1e:	20 93 52 02 	sts	0x0252, r18	; 0x800252 <__brkval>
 a22:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 a26:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 a2a:	21 15       	cp	r18, r1
 a2c:	31 05       	cpc	r19, r1
 a2e:	41 f4       	brne	.+16     	; 0xa40 <malloc+0xea>
 a30:	2d b7       	in	r18, 0x3d	; 61
 a32:	3e b7       	in	r19, 0x3e	; 62
 a34:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 a38:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 a3c:	24 1b       	sub	r18, r20
 a3e:	35 0b       	sbc	r19, r21
 a40:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <__brkval>
 a44:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <__brkval+0x1>
 a48:	e2 17       	cp	r30, r18
 a4a:	f3 07       	cpc	r31, r19
 a4c:	a0 f4       	brcc	.+40     	; 0xa76 <malloc+0x120>
 a4e:	2e 1b       	sub	r18, r30
 a50:	3f 0b       	sbc	r19, r31
 a52:	28 17       	cp	r18, r24
 a54:	39 07       	cpc	r19, r25
 a56:	78 f0       	brcs	.+30     	; 0xa76 <malloc+0x120>
 a58:	ac 01       	movw	r20, r24
 a5a:	4e 5f       	subi	r20, 0xFE	; 254
 a5c:	5f 4f       	sbci	r21, 0xFF	; 255
 a5e:	24 17       	cp	r18, r20
 a60:	35 07       	cpc	r19, r21
 a62:	48 f0       	brcs	.+18     	; 0xa76 <malloc+0x120>
 a64:	4e 0f       	add	r20, r30
 a66:	5f 1f       	adc	r21, r31
 a68:	50 93 53 02 	sts	0x0253, r21	; 0x800253 <__brkval+0x1>
 a6c:	40 93 52 02 	sts	0x0252, r20	; 0x800252 <__brkval>
 a70:	81 93       	st	Z+, r24
 a72:	91 93       	st	Z+, r25
 a74:	02 c0       	rjmp	.+4      	; 0xa7a <malloc+0x124>
 a76:	e0 e0       	ldi	r30, 0x00	; 0
 a78:	f0 e0       	ldi	r31, 0x00	; 0
 a7a:	cf 01       	movw	r24, r30
 a7c:	df 91       	pop	r29
 a7e:	cf 91       	pop	r28
 a80:	1f 91       	pop	r17
 a82:	0f 91       	pop	r16
 a84:	08 95       	ret

00000a86 <free>:
 a86:	cf 93       	push	r28
 a88:	df 93       	push	r29
 a8a:	00 97       	sbiw	r24, 0x00	; 0
 a8c:	09 f4       	brne	.+2      	; 0xa90 <free+0xa>
 a8e:	81 c0       	rjmp	.+258    	; 0xb92 <free+0x10c>
 a90:	fc 01       	movw	r30, r24
 a92:	32 97       	sbiw	r30, 0x02	; 2
 a94:	13 82       	std	Z+3, r1	; 0x03
 a96:	12 82       	std	Z+2, r1	; 0x02
 a98:	a0 91 54 02 	lds	r26, 0x0254	; 0x800254 <__flp>
 a9c:	b0 91 55 02 	lds	r27, 0x0255	; 0x800255 <__flp+0x1>
 aa0:	10 97       	sbiw	r26, 0x00	; 0
 aa2:	81 f4       	brne	.+32     	; 0xac4 <free+0x3e>
 aa4:	20 81       	ld	r18, Z
 aa6:	31 81       	ldd	r19, Z+1	; 0x01
 aa8:	82 0f       	add	r24, r18
 aaa:	93 1f       	adc	r25, r19
 aac:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <__brkval>
 ab0:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <__brkval+0x1>
 ab4:	28 17       	cp	r18, r24
 ab6:	39 07       	cpc	r19, r25
 ab8:	51 f5       	brne	.+84     	; 0xb0e <free+0x88>
 aba:	f0 93 53 02 	sts	0x0253, r31	; 0x800253 <__brkval+0x1>
 abe:	e0 93 52 02 	sts	0x0252, r30	; 0x800252 <__brkval>
 ac2:	67 c0       	rjmp	.+206    	; 0xb92 <free+0x10c>
 ac4:	ed 01       	movw	r28, r26
 ac6:	20 e0       	ldi	r18, 0x00	; 0
 ac8:	30 e0       	ldi	r19, 0x00	; 0
 aca:	ce 17       	cp	r28, r30
 acc:	df 07       	cpc	r29, r31
 ace:	40 f4       	brcc	.+16     	; 0xae0 <free+0x5a>
 ad0:	4a 81       	ldd	r20, Y+2	; 0x02
 ad2:	5b 81       	ldd	r21, Y+3	; 0x03
 ad4:	9e 01       	movw	r18, r28
 ad6:	41 15       	cp	r20, r1
 ad8:	51 05       	cpc	r21, r1
 ada:	f1 f0       	breq	.+60     	; 0xb18 <free+0x92>
 adc:	ea 01       	movw	r28, r20
 ade:	f5 cf       	rjmp	.-22     	; 0xaca <free+0x44>
 ae0:	d3 83       	std	Z+3, r29	; 0x03
 ae2:	c2 83       	std	Z+2, r28	; 0x02
 ae4:	40 81       	ld	r20, Z
 ae6:	51 81       	ldd	r21, Z+1	; 0x01
 ae8:	84 0f       	add	r24, r20
 aea:	95 1f       	adc	r25, r21
 aec:	c8 17       	cp	r28, r24
 aee:	d9 07       	cpc	r29, r25
 af0:	59 f4       	brne	.+22     	; 0xb08 <free+0x82>
 af2:	88 81       	ld	r24, Y
 af4:	99 81       	ldd	r25, Y+1	; 0x01
 af6:	84 0f       	add	r24, r20
 af8:	95 1f       	adc	r25, r21
 afa:	02 96       	adiw	r24, 0x02	; 2
 afc:	91 83       	std	Z+1, r25	; 0x01
 afe:	80 83       	st	Z, r24
 b00:	8a 81       	ldd	r24, Y+2	; 0x02
 b02:	9b 81       	ldd	r25, Y+3	; 0x03
 b04:	93 83       	std	Z+3, r25	; 0x03
 b06:	82 83       	std	Z+2, r24	; 0x02
 b08:	21 15       	cp	r18, r1
 b0a:	31 05       	cpc	r19, r1
 b0c:	29 f4       	brne	.+10     	; 0xb18 <free+0x92>
 b0e:	f0 93 55 02 	sts	0x0255, r31	; 0x800255 <__flp+0x1>
 b12:	e0 93 54 02 	sts	0x0254, r30	; 0x800254 <__flp>
 b16:	3d c0       	rjmp	.+122    	; 0xb92 <free+0x10c>
 b18:	e9 01       	movw	r28, r18
 b1a:	fb 83       	std	Y+3, r31	; 0x03
 b1c:	ea 83       	std	Y+2, r30	; 0x02
 b1e:	49 91       	ld	r20, Y+
 b20:	59 91       	ld	r21, Y+
 b22:	c4 0f       	add	r28, r20
 b24:	d5 1f       	adc	r29, r21
 b26:	ec 17       	cp	r30, r28
 b28:	fd 07       	cpc	r31, r29
 b2a:	61 f4       	brne	.+24     	; 0xb44 <free+0xbe>
 b2c:	80 81       	ld	r24, Z
 b2e:	91 81       	ldd	r25, Z+1	; 0x01
 b30:	84 0f       	add	r24, r20
 b32:	95 1f       	adc	r25, r21
 b34:	02 96       	adiw	r24, 0x02	; 2
 b36:	e9 01       	movw	r28, r18
 b38:	99 83       	std	Y+1, r25	; 0x01
 b3a:	88 83       	st	Y, r24
 b3c:	82 81       	ldd	r24, Z+2	; 0x02
 b3e:	93 81       	ldd	r25, Z+3	; 0x03
 b40:	9b 83       	std	Y+3, r25	; 0x03
 b42:	8a 83       	std	Y+2, r24	; 0x02
 b44:	e0 e0       	ldi	r30, 0x00	; 0
 b46:	f0 e0       	ldi	r31, 0x00	; 0
 b48:	12 96       	adiw	r26, 0x02	; 2
 b4a:	8d 91       	ld	r24, X+
 b4c:	9c 91       	ld	r25, X
 b4e:	13 97       	sbiw	r26, 0x03	; 3
 b50:	00 97       	sbiw	r24, 0x00	; 0
 b52:	19 f0       	breq	.+6      	; 0xb5a <free+0xd4>
 b54:	fd 01       	movw	r30, r26
 b56:	dc 01       	movw	r26, r24
 b58:	f7 cf       	rjmp	.-18     	; 0xb48 <free+0xc2>
 b5a:	8d 91       	ld	r24, X+
 b5c:	9c 91       	ld	r25, X
 b5e:	11 97       	sbiw	r26, 0x01	; 1
 b60:	9d 01       	movw	r18, r26
 b62:	2e 5f       	subi	r18, 0xFE	; 254
 b64:	3f 4f       	sbci	r19, 0xFF	; 255
 b66:	82 0f       	add	r24, r18
 b68:	93 1f       	adc	r25, r19
 b6a:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <__brkval>
 b6e:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <__brkval+0x1>
 b72:	28 17       	cp	r18, r24
 b74:	39 07       	cpc	r19, r25
 b76:	69 f4       	brne	.+26     	; 0xb92 <free+0x10c>
 b78:	30 97       	sbiw	r30, 0x00	; 0
 b7a:	29 f4       	brne	.+10     	; 0xb86 <free+0x100>
 b7c:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <__flp+0x1>
 b80:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <__flp>
 b84:	02 c0       	rjmp	.+4      	; 0xb8a <free+0x104>
 b86:	13 82       	std	Z+3, r1	; 0x03
 b88:	12 82       	std	Z+2, r1	; 0x02
 b8a:	b0 93 53 02 	sts	0x0253, r27	; 0x800253 <__brkval+0x1>
 b8e:	a0 93 52 02 	sts	0x0252, r26	; 0x800252 <__brkval>
 b92:	df 91       	pop	r29
 b94:	cf 91       	pop	r28
 b96:	08 95       	ret

00000b98 <_exit>:
 b98:	f8 94       	cli

00000b9a <__stop_program>:
 b9a:	ff cf       	rjmp	.-2      	; 0xb9a <__stop_program>
