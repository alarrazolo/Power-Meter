
PowerMeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000184  00800100  0000152a  000015be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000152a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800284  00800284  00001742  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001742  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001774  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003dc7  00000000  00000000  00001ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec5  00000000  00000000  0000589b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001874  00000000  00000000  00006760  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000894  00000000  00000000  00007fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a77  00000000  00000000  00008868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020b9  00000000  00000000  000092df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0000b398  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 67 07 	jmp	0xece	; 0xece <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e2       	ldi	r30, 0x2A	; 42
      7c:	f5 e1       	ldi	r31, 0x15	; 21
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 38       	cpi	r26, 0x84	; 132
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a4 e8       	ldi	r26, 0x84	; 132
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 38       	cpi	r26, 0x8A	; 138
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <main>
      9e:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initI2C>:

uint8_t i2cReadNoAck(void) {
  TWCR = (_BV(TWINT) | _BV(TWEN));
  i2cWaitForComplete();
  return (TWDR);
}
      a6:	80 e2       	ldi	r24, 0x20	; 32
      a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
      ac:	ec eb       	ldi	r30, 0xBC	; 188
      ae:	f0 e0       	ldi	r31, 0x00	; 0
      b0:	80 81       	ld	r24, Z
      b2:	84 60       	ori	r24, 0x04	; 4
      b4:	80 83       	st	Z, r24
      b6:	08 95       	ret

000000b8 <i2cWaitForComplete>:
      b8:	ec eb       	ldi	r30, 0xBC	; 188
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	80 81       	ld	r24, Z
      be:	88 23       	and	r24, r24
      c0:	ec f7       	brge	.-6      	; 0xbc <i2cWaitForComplete+0x4>
      c2:	08 95       	ret

000000c4 <i2cStart>:
      c4:	84 ea       	ldi	r24, 0xA4	; 164
      c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      ca:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2cWaitForComplete>
      ce:	08 95       	ret

000000d0 <i2cStop>:
      d0:	84 e9       	ldi	r24, 0x94	; 148
      d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      d6:	08 95       	ret

000000d8 <i2cSend>:

void i2cSend(uint8_t data) {
  TWDR = data;
      d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  TWCR = (_BV(TWINT) | _BV(TWEN));                  /* init and enable */
      dc:	84 e8       	ldi	r24, 0x84	; 132
      de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  i2cWaitForComplete();
      e2:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2cWaitForComplete>
      e6:	08 95       	ret

000000e8 <send_Command>:
	send_Command((1 << BACKLIGHT));
}

void move_Cursor_Home(void){
	send_Command((1 << BACKLIGHT));
	send_Command((1 << BACKLIGHT) | (1 << D5));
      e8:	cf 93       	push	r28
      ea:	c8 2f       	mov	r28, r24
      ec:	0e 94 62 00 	call	0xc4	; 0xc4 <i2cStart>
      f0:	8e e4       	ldi	r24, 0x4E	; 78
      f2:	0e 94 6c 00 	call	0xd8	; 0xd8 <i2cSend>
      f6:	8c 2f       	mov	r24, r28
      f8:	0e 94 6c 00 	call	0xd8	; 0xd8 <i2cSend>
      fc:	8c 2f       	mov	r24, r28
      fe:	84 60       	ori	r24, 0x04	; 4
     100:	0e 94 6c 00 	call	0xd8	; 0xd8 <i2cSend>
     104:	8c 2f       	mov	r24, r28
     106:	8b 7f       	andi	r24, 0xFB	; 251
     108:	0e 94 6c 00 	call	0xd8	; 0xd8 <i2cSend>
     10c:	0e 94 68 00 	call	0xd0	; 0xd0 <i2cStop>
     110:	cf 91       	pop	r28
     112:	08 95       	ret

00000114 <set_Up_4bit_Mode>:
     114:	80 e3       	ldi	r24, 0x30	; 48
     116:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
     11a:	80 e3       	ldi	r24, 0x30	; 48
     11c:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
     120:	80 e3       	ldi	r24, 0x30	; 48
     122:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
     126:	80 e2       	ldi	r24, 0x20	; 32
     128:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
     12c:	08 95       	ret

0000012e <configure_Control_Bytes>:
     12e:	80 e2       	ldi	r24, 0x20	; 32
     130:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
     134:	80 e8       	ldi	r24, 0x80	; 128
     136:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
     140:	80 e8       	ldi	r24, 0x80	; 128
     142:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
     14c:	80 e1       	ldi	r24, 0x10	; 16
     14e:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
     158:	80 e6       	ldi	r24, 0x60	; 96
     15a:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
     15e:	08 95       	ret

00000160 <enable_lcd>:
     160:	88 e0       	ldi	r24, 0x08	; 8
     162:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
     166:	88 ef       	ldi	r24, 0xF8	; 248
     168:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
     16c:	08 95       	ret

0000016e <initLCD>:
     16e:	0e 94 8a 00 	call	0x114	; 0x114 <set_Up_4bit_Mode>
     172:	0e 94 97 00 	call	0x12e	; 0x12e <configure_Control_Bytes>
     176:	0e 94 b0 00 	call	0x160	; 0x160 <enable_lcd>
     17a:	08 95       	ret

0000017c <clear_lcd>:
     17c:	88 e0       	ldi	r24, 0x08	; 8
     17e:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
     182:	88 e1       	ldi	r24, 0x18	; 24
     184:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
     188:	08 95       	ret

0000018a <write>:
}

void write(char character){
     18a:	cf 93       	push	r28
     18c:	c8 2f       	mov	r28, r24
	//uint8_t highNibble = ((uint8_t)character & 0xF0);
	//uint8_t lowNibble = (((uint8_t)character & 0x0F) << 4);
	uint8_t highNibble = (character & 0xF0);
	uint8_t lowNibble = ((character & 0x0F) << 4);
	send_Command((1 << BACKLIGHT) | (1 << RS) | highNibble);
     18e:	80 7f       	andi	r24, 0xF0	; 240
     190:	89 60       	ori	r24, 0x09	; 9
     192:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
	send_Command((1 << BACKLIGHT) | (1 << RS) | lowNibble);
     196:	20 e1       	ldi	r18, 0x10	; 16
     198:	c2 9f       	mul	r28, r18
     19a:	c0 01       	movw	r24, r0
     19c:	11 24       	eor	r1, r1
     19e:	89 60       	ori	r24, 0x09	; 9
     1a0:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
}
     1a4:	cf 91       	pop	r28
     1a6:	08 95       	ret

000001a8 <set_cursor>:

void set_cursor(int line, int place){
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	84 30       	cpi	r24, 0x04	; 4
     1ae:	91 05       	cpc	r25, r1
     1b0:	14 f0       	brlt	.+4      	; 0x1b6 <set_cursor+0xe>
     1b2:	83 e0       	ldi	r24, 0x03	; 3
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	c6 2f       	mov	r28, r22
     1b8:	d7 2f       	mov	r29, r23
     1ba:	c5 31       	cpi	r28, 0x15	; 21
     1bc:	d1 05       	cpc	r29, r1
     1be:	14 f0       	brlt	.+4      	; 0x1c4 <set_cursor+0x1c>
     1c0:	c4 e1       	ldi	r28, 0x14	; 20
     1c2:	d0 e0       	ldi	r29, 0x00	; 0
	if(line > 3) line = 3;
	if(place > 20) place = 20;
	
	if(line == 0){
     1c4:	00 97       	sbiw	r24, 0x00	; 0
     1c6:	81 f4       	brne	.+32     	; 0x1e8 <set_cursor+0x40>
		uint8_t highNibble = ((0x00 + place) & 0xF0);
		uint8_t lowNibble = (((0x00 + place) & 0x0F) << 4);
		send_Command((1 << BACKLIGHT) | (1 << D7) | highNibble);
     1c8:	8c 2f       	mov	r24, r28
     1ca:	80 7f       	andi	r24, 0xF0	; 240
     1cc:	88 68       	ori	r24, 0x88	; 136
     1ce:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
		send_Command((1 << BACKLIGHT) | lowNibble);
     1d2:	ce 01       	movw	r24, r28
     1d4:	82 95       	swap	r24
     1d6:	92 95       	swap	r25
     1d8:	90 7f       	andi	r25, 0xF0	; 240
     1da:	98 27       	eor	r25, r24
     1dc:	80 7f       	andi	r24, 0xF0	; 240
     1de:	98 27       	eor	r25, r24
     1e0:	88 60       	ori	r24, 0x08	; 8
     1e2:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
     1e6:	3d c0       	rjmp	.+122    	; 0x262 <set_cursor+0xba>
	}
	else if(line == 1){
     1e8:	81 30       	cpi	r24, 0x01	; 1
     1ea:	91 05       	cpc	r25, r1
     1ec:	89 f4       	brne	.+34     	; 0x210 <set_cursor+0x68>
		uint8_t highNibble = ((0x40 + place) & 0xF0);
		uint8_t lowNibble = (((0x40 + place) & 0x0F) << 4);
		send_Command((1 << BACKLIGHT) | (1 << D7) | highNibble);
     1ee:	8c 2f       	mov	r24, r28
     1f0:	80 5c       	subi	r24, 0xC0	; 192
     1f2:	80 7f       	andi	r24, 0xF0	; 240
     1f4:	88 68       	ori	r24, 0x88	; 136
     1f6:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
		send_Command((1 << BACKLIGHT) | lowNibble);
     1fa:	ce 01       	movw	r24, r28
     1fc:	82 95       	swap	r24
     1fe:	92 95       	swap	r25
     200:	90 7f       	andi	r25, 0xF0	; 240
     202:	98 27       	eor	r25, r24
     204:	80 7f       	andi	r24, 0xF0	; 240
     206:	98 27       	eor	r25, r24
     208:	88 60       	ori	r24, 0x08	; 8
     20a:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
     20e:	29 c0       	rjmp	.+82     	; 0x262 <set_cursor+0xba>
	}
	else if(line == 2){
     210:	82 30       	cpi	r24, 0x02	; 2
     212:	91 05       	cpc	r25, r1
     214:	91 f4       	brne	.+36     	; 0x23a <set_cursor+0x92>
		uint8_t highNibble = ((0x14 + place) & 0xF0);
		uint8_t lowNibble = (((0x14 + place) & 0x0F) << 4);
		send_Command((1 << BACKLIGHT) | (1 << D7) | highNibble);
     216:	8c 2f       	mov	r24, r28
     218:	8c 5e       	subi	r24, 0xEC	; 236
     21a:	80 7f       	andi	r24, 0xF0	; 240
     21c:	88 68       	ori	r24, 0x88	; 136
     21e:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
		send_Command((1 << BACKLIGHT) | lowNibble);
     222:	ce 01       	movw	r24, r28
     224:	44 96       	adiw	r24, 0x14	; 20
     226:	82 95       	swap	r24
     228:	92 95       	swap	r25
     22a:	90 7f       	andi	r25, 0xF0	; 240
     22c:	98 27       	eor	r25, r24
     22e:	80 7f       	andi	r24, 0xF0	; 240
     230:	98 27       	eor	r25, r24
     232:	88 60       	ori	r24, 0x08	; 8
     234:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
     238:	14 c0       	rjmp	.+40     	; 0x262 <set_cursor+0xba>
	}
	else if(line == 3){
     23a:	03 97       	sbiw	r24, 0x03	; 3
     23c:	91 f4       	brne	.+36     	; 0x262 <set_cursor+0xba>
		uint8_t highNibble = ((0x54 + place) & 0xF0);
		uint8_t lowNibble = (((0x54 + place) & 0x0F) << 4);
		send_Command((1 << BACKLIGHT) | (1 << D7) | highNibble);
     23e:	8c 2f       	mov	r24, r28
     240:	8c 5a       	subi	r24, 0xAC	; 172
     242:	80 7f       	andi	r24, 0xF0	; 240
     244:	88 68       	ori	r24, 0x88	; 136
     246:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
		send_Command((1 << BACKLIGHT) | lowNibble);
     24a:	ce 01       	movw	r24, r28
     24c:	8c 5a       	subi	r24, 0xAC	; 172
     24e:	9f 4f       	sbci	r25, 0xFF	; 255
     250:	82 95       	swap	r24
     252:	92 95       	swap	r25
     254:	90 7f       	andi	r25, 0xF0	; 240
     256:	98 27       	eor	r25, r24
     258:	80 7f       	andi	r24, 0xF0	; 240
     25a:	98 27       	eor	r25, r24
     25c:	88 60       	ori	r24, 0x08	; 8
     25e:	0e 94 74 00 	call	0xe8	; 0xe8 <send_Command>
	}
}
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	08 95       	ret

00000268 <lcd_print_string>:

void lcd_print_string(const char String[])
{
     268:	0f 93       	push	r16
     26a:	1f 93       	push	r17
     26c:	cf 93       	push	r28
     26e:	fc 01       	movw	r30, r24
	uint8_t i = 0;
	while (String[i]) {
     270:	80 81       	ld	r24, Z
     272:	88 23       	and	r24, r24
     274:	59 f0       	breq	.+22     	; 0x28c <lcd_print_string+0x24>
     276:	8f 01       	movw	r16, r30
     278:	c0 e0       	ldi	r28, 0x00	; 0
		write(String[i]);
     27a:	0e 94 c5 00 	call	0x18a	; 0x18a <write>
		i++;
     27e:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print_string(const char String[])
{
	uint8_t i = 0;
	while (String[i]) {
     280:	f8 01       	movw	r30, r16
     282:	ec 0f       	add	r30, r28
     284:	f1 1d       	adc	r31, r1
     286:	80 81       	ld	r24, Z
     288:	81 11       	cpse	r24, r1
     28a:	f7 cf       	rjmp	.-18     	; 0x27a <lcd_print_string+0x12>
		write(String[i]);
		i++;
	}
}
     28c:	cf 91       	pop	r28
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	08 95       	ret

00000294 <get_pIC_RegValue>:
	//set_pIC_RegValue(CalStart, 0x5678);
	//set_pIC_RegValue(AdjStart, 0x5678);
}


uint16_t get_pIC_RegValue(uint8_t pICRegister){
     294:	cf 93       	push	r28
	
	//send AND read Byte with register address Byte to read back 16 bit value.
	
	PORTB &= ~(1<<0); // set chip select bit low to initiate SPI communication. 
     296:	28 98       	cbi	0x05, 0	; 5
	SPI_tradeByte(ReadRegPower | pICRegister); // AND read Byte with register address and send it over SPI
     298:	80 68       	ori	r24, 0x80	; 128
     29a:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <SPI_tradeByte>
	uint8_t highByte = SPI_tradeByte(0); // Read MSD Byte first.
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <SPI_tradeByte>
     2a4:	c8 2f       	mov	r28, r24
	uint8_t lowByte = SPI_tradeByte(0); // Read LSD Byte second.
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <SPI_tradeByte>
	PORTB |= (1<<0); // set chip select bit high to terminate SPI communication.
     2ac:	28 9a       	sbi	0x05, 0	; 5
	uint16_t full16Byte = (highByte << 8) | lowByte; // Combine MSB and LSB together into 16 bit Byte.
	return full16Byte; // return Byte to function call. 
     2ae:	2c 2f       	mov	r18, r28
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	32 2f       	mov	r19, r18
     2b4:	22 27       	eor	r18, r18
	
	//printHexByte(pIC_d1bitHigh);
	//printHexByte(pIC_d1bitLow);
	//printString("H\r\n");
	
}
     2b6:	a9 01       	movw	r20, r18
     2b8:	48 2b       	or	r20, r24
     2ba:	ca 01       	movw	r24, r20
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <set_pIC_RegValue>:

void set_pIC_RegValue(uint8_t pICRegister, uint16_t byte){
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	c6 2f       	mov	r28, r22
     2c6:	d7 2f       	mov	r29, r23
	
	//send AND write Byte with register Byte to write 16 bit value into register.
	
	PORTB &= ~(1<<0); // set chip select bit low to initiate SPI communication. 
     2c8:	28 98       	cbi	0x05, 0	; 5
	SPI_tradeByte(WriteRegPower | pICRegister); // AND write Byte with register address and send it over SPI.
     2ca:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <SPI_tradeByte>
	uint8_t highByte = (byte>>8);
	uint8_t lowByte = byte & ~(0xff<<8);
	SPI_tradeByte(highByte); // Write MSD Byte first.
     2ce:	8d 2f       	mov	r24, r29
     2d0:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <SPI_tradeByte>
	SPI_tradeByte(lowByte); // Write LSD Byte second.
     2d4:	8c 2f       	mov	r24, r28
     2d6:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <SPI_tradeByte>
	PORTB |= (1<<0); // set chip select bit high to terminate SPI communication.
     2da:	28 9a       	sbi	0x05, 0	; 5
	//printString(" to value: ");
	//printHexByte(highBit);
	//printHexByte(lowBit);
	//printString("H\r\n");
	
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <pIC_Start>:
	m90E26 *pIC = malloc(sizeof(m90E26));
	memset(pIC, 0, sizeof(m90E26));
	return pIC;
}

void pIC_Start(void){
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
	
	// set chip select port to output.
	DDRB |= (1<<0);
     2e6:	20 9a       	sbi	0x04, 0	; 4
	//set chip select on power meter IC high
	PORTB |= (1<<0);
     2e8:	28 9a       	sbi	0x05, 0	; 5
	
	if(!((SPCR >> MSTR)&0x01)) SPI_init();
     2ea:	0c b4       	in	r0, 0x2c	; 44
     2ec:	04 fe       	sbrs	r0, 4
     2ee:	0e 94 c9 08 	call	0x1192	; 0x1192 <SPI_init>
	
	set_pIC_RegValue(CalStart, 0x5678);
     2f2:	68 e7       	ldi	r22, 0x78	; 120
     2f4:	76 e5       	ldi	r23, 0x56	; 86
     2f6:	80 e2       	ldi	r24, 0x20	; 32
     2f8:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(PLconstH, 0x0030);
     2fc:	60 e3       	ldi	r22, 0x30	; 48
     2fe:	70 e0       	ldi	r23, 0x00	; 0
     300:	81 e2       	ldi	r24, 0x21	; 33
     302:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(PLconstL, 0xB3D3);
     306:	63 ed       	ldi	r22, 0xD3	; 211
     308:	73 eb       	ldi	r23, 0xB3	; 179
     30a:	82 e2       	ldi	r24, 0x22	; 34
     30c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(Lgain, 0x0000);
     310:	60 e0       	ldi	r22, 0x00	; 0
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	83 e2       	ldi	r24, 0x23	; 35
     316:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(Lphi, 0x0000);
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	84 e2       	ldi	r24, 0x24	; 36
     320:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(Ngain, 0x0000);
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	85 e2       	ldi	r24, 0x25	; 37
     32a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(Nphi, 0x0000);
     32e:	60 e0       	ldi	r22, 0x00	; 0
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	86 e2       	ldi	r24, 0x26	; 38
     334:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(PStartTh, 0x08BD);
     338:	6d eb       	ldi	r22, 0xBD	; 189
     33a:	78 e0       	ldi	r23, 0x08	; 8
     33c:	87 e2       	ldi	r24, 0x27	; 39
     33e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(PNolTH, 0x0000);
     342:	60 e0       	ldi	r22, 0x00	; 0
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	88 e2       	ldi	r24, 0x28	; 40
     348:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(QStartTh, 0x0AEC);
     34c:	6c ee       	ldi	r22, 0xEC	; 236
     34e:	7a e0       	ldi	r23, 0x0A	; 10
     350:	89 e2       	ldi	r24, 0x29	; 41
     352:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(QNolTH, 0x0000);
     356:	60 e0       	ldi	r22, 0x00	; 0
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	8a e2       	ldi	r24, 0x2A	; 42
     35c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(MMode, 0x3422);
     360:	62 e2       	ldi	r22, 0x22	; 34
     362:	74 e3       	ldi	r23, 0x34	; 52
     364:	8b e2       	ldi	r24, 0x2B	; 43
     366:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	uint16_t calibrationCS1 = get_pIC_RegValue(CS1);
     36a:	8c e2       	ldi	r24, 0x2C	; 44
     36c:	0e 94 4a 01 	call	0x294	; 0x294 <get_pIC_RegValue>
	set_pIC_RegValue(CS1, calibrationCS1);
     370:	bc 01       	movw	r22, r24
     372:	8c e2       	ldi	r24, 0x2C	; 44
     374:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(CalStart, 0x8765);
     378:	65 e6       	ldi	r22, 0x65	; 101
     37a:	77 e8       	ldi	r23, 0x87	; 135
     37c:	80 e2       	ldi	r24, 0x20	; 32
     37e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	
	
	
	set_pIC_RegValue(AdjStart, 0x5678);
     382:	68 e7       	ldi	r22, 0x78	; 120
     384:	76 e5       	ldi	r23, 0x56	; 86
     386:	80 e3       	ldi	r24, 0x30	; 48
     388:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	
	set_pIC_RegValue(Ugain, 0x8561);
     38c:	61 e6       	ldi	r22, 0x61	; 97
     38e:	75 e8       	ldi	r23, 0x85	; 133
     390:	81 e3       	ldi	r24, 0x31	; 49
     392:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(IgainL, 0x3D1C);
     396:	6c e1       	ldi	r22, 0x1C	; 28
     398:	7d e3       	ldi	r23, 0x3D	; 61
     39a:	82 e3       	ldi	r24, 0x32	; 50
     39c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(IgainN, 0x7530);
     3a0:	60 e3       	ldi	r22, 0x30	; 48
     3a2:	75 e7       	ldi	r23, 0x75	; 117
     3a4:	83 e3       	ldi	r24, 0x33	; 51
     3a6:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(Uoffset, 0x0000);
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	84 e3       	ldi	r24, 0x34	; 52
     3b0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(IoffsetL, 0x0000);
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	85 e3       	ldi	r24, 0x35	; 53
     3ba:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(IoffsetN, 0x0000);
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	86 e3       	ldi	r24, 0x36	; 54
     3c4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(PoffsetL, 0x0000);
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	87 e3       	ldi	r24, 0x37	; 55
     3ce:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(QoffsetL, 0x0000);
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	88 e3       	ldi	r24, 0x38	; 56
     3d8:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(PoffsetN, 0x0000);
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	89 e3       	ldi	r24, 0x39	; 57
     3e2:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(QoffsetN, 0x0000);
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	8a e3       	ldi	r24, 0x3A	; 58
     3ec:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	uint16_t calibrationCS2 = get_pIC_RegValue(CS2);
     3f0:	8b e3       	ldi	r24, 0x3B	; 59
     3f2:	0e 94 4a 01 	call	0x294	; 0x294 <get_pIC_RegValue>
     3f6:	ec 01       	movw	r28, r24
	set_pIC_RegValue(CS2, 0x0000);
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	8b e3       	ldi	r24, 0x3B	; 59
     3fe:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(CS2, calibrationCS2);
     402:	be 01       	movw	r22, r28
     404:	8b e3       	ldi	r24, 0x3B	; 59
     406:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	set_pIC_RegValue(AdjStart, 0x8765);
     40a:	65 e6       	ldi	r22, 0x65	; 101
     40c:	77 e8       	ldi	r23, 0x87	; 135
     40e:	80 e3       	ldi	r24, 0x30	; 48
     410:	0e 94 60 01 	call	0x2c0	; 0x2c0 <set_pIC_RegValue>
	
	//set_pIC_RegValue(CalStart, 0x5678);
	//set_pIC_RegValue(AdjStart, 0x5678);
}
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	08 95       	ret

0000041a <printVoltage>:
	//printHexByte(lowBit);
	//printString("H\r\n");
	
}

void printVoltage(uint16_t word){
     41a:	0f 93       	push	r16
     41c:	1f 93       	push	r17
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	8c 01       	movw	r16, r24
	transmitByte('0' + (word / 10000));                 /* Ten-thousands */
     424:	9c 01       	movw	r18, r24
     426:	32 95       	swap	r19
     428:	22 95       	swap	r18
     42a:	2f 70       	andi	r18, 0x0F	; 15
     42c:	23 27       	eor	r18, r19
     42e:	3f 70       	andi	r19, 0x0F	; 15
     430:	23 27       	eor	r18, r19
     432:	a7 e4       	ldi	r26, 0x47	; 71
     434:	b3 e0       	ldi	r27, 0x03	; 3
     436:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     43a:	96 95       	lsr	r25
     43c:	87 95       	ror	r24
     43e:	96 95       	lsr	r25
     440:	87 95       	ror	r24
     442:	96 95       	lsr	r25
     444:	87 95       	ror	r24
     446:	80 5d       	subi	r24, 0xD0	; 208
     448:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
	transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
     44c:	98 01       	movw	r18, r16
     44e:	36 95       	lsr	r19
     450:	27 95       	ror	r18
     452:	36 95       	lsr	r19
     454:	27 95       	ror	r18
     456:	36 95       	lsr	r19
     458:	27 95       	ror	r18
     45a:	a5 ec       	ldi	r26, 0xC5	; 197
     45c:	b0 e2       	ldi	r27, 0x20	; 32
     45e:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     462:	ac 01       	movw	r20, r24
     464:	52 95       	swap	r21
     466:	42 95       	swap	r20
     468:	4f 70       	andi	r20, 0x0F	; 15
     46a:	45 27       	eor	r20, r21
     46c:	5f 70       	andi	r21, 0x0F	; 15
     46e:	45 27       	eor	r20, r21
     470:	9a 01       	movw	r18, r20
     472:	ad ec       	ldi	r26, 0xCD	; 205
     474:	bc ec       	ldi	r27, 0xCC	; 204
     476:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     47a:	96 95       	lsr	r25
     47c:	87 95       	ror	r24
     47e:	96 95       	lsr	r25
     480:	87 95       	ror	r24
     482:	96 95       	lsr	r25
     484:	87 95       	ror	r24
     486:	9c 01       	movw	r18, r24
     488:	22 0f       	add	r18, r18
     48a:	33 1f       	adc	r19, r19
     48c:	88 0f       	add	r24, r24
     48e:	99 1f       	adc	r25, r25
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	88 0f       	add	r24, r24
     496:	99 1f       	adc	r25, r25
     498:	82 0f       	add	r24, r18
     49a:	93 1f       	adc	r25, r19
     49c:	9a 01       	movw	r18, r20
     49e:	28 1b       	sub	r18, r24
     4a0:	39 0b       	sbc	r19, r25
     4a2:	c9 01       	movw	r24, r18
     4a4:	80 5d       	subi	r24, 0xD0	; 208
     4a6:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
	transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
     4aa:	98 01       	movw	r18, r16
     4ac:	36 95       	lsr	r19
     4ae:	27 95       	ror	r18
     4b0:	36 95       	lsr	r19
     4b2:	27 95       	ror	r18
     4b4:	ab e7       	ldi	r26, 0x7B	; 123
     4b6:	b4 e1       	ldi	r27, 0x14	; 20
     4b8:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     4bc:	ac 01       	movw	r20, r24
     4be:	56 95       	lsr	r21
     4c0:	47 95       	ror	r20
     4c2:	9a 01       	movw	r18, r20
     4c4:	ad ec       	ldi	r26, 0xCD	; 205
     4c6:	bc ec       	ldi	r27, 0xCC	; 204
     4c8:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     4cc:	96 95       	lsr	r25
     4ce:	87 95       	ror	r24
     4d0:	96 95       	lsr	r25
     4d2:	87 95       	ror	r24
     4d4:	96 95       	lsr	r25
     4d6:	87 95       	ror	r24
     4d8:	9c 01       	movw	r18, r24
     4da:	22 0f       	add	r18, r18
     4dc:	33 1f       	adc	r19, r19
     4de:	88 0f       	add	r24, r24
     4e0:	99 1f       	adc	r25, r25
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	88 0f       	add	r24, r24
     4e8:	99 1f       	adc	r25, r25
     4ea:	82 0f       	add	r24, r18
     4ec:	93 1f       	adc	r25, r19
     4ee:	9a 01       	movw	r18, r20
     4f0:	28 1b       	sub	r18, r24
     4f2:	39 0b       	sbc	r19, r25
     4f4:	c9 01       	movw	r24, r18
     4f6:	80 5d       	subi	r24, 0xD0	; 208
     4f8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
	printString("."); //
     4fc:	86 e0       	ldi	r24, 0x06	; 6
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	transmitByte('0' + ((word / 10) % 10));                      /* Tens */
     504:	98 01       	movw	r18, r16
     506:	ad ec       	ldi	r26, 0xCD	; 205
     508:	bc ec       	ldi	r27, 0xCC	; 204
     50a:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     50e:	ec 01       	movw	r28, r24
     510:	d6 95       	lsr	r29
     512:	c7 95       	ror	r28
     514:	d6 95       	lsr	r29
     516:	c7 95       	ror	r28
     518:	d6 95       	lsr	r29
     51a:	c7 95       	ror	r28
     51c:	9e 01       	movw	r18, r28
     51e:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     522:	96 95       	lsr	r25
     524:	87 95       	ror	r24
     526:	96 95       	lsr	r25
     528:	87 95       	ror	r24
     52a:	96 95       	lsr	r25
     52c:	87 95       	ror	r24
     52e:	9c 01       	movw	r18, r24
     530:	22 0f       	add	r18, r18
     532:	33 1f       	adc	r19, r19
     534:	88 0f       	add	r24, r24
     536:	99 1f       	adc	r25, r25
     538:	88 0f       	add	r24, r24
     53a:	99 1f       	adc	r25, r25
     53c:	88 0f       	add	r24, r24
     53e:	99 1f       	adc	r25, r25
     540:	82 0f       	add	r24, r18
     542:	93 1f       	adc	r25, r19
     544:	9e 01       	movw	r18, r28
     546:	28 1b       	sub	r18, r24
     548:	39 0b       	sbc	r19, r25
     54a:	c9 01       	movw	r24, r18
     54c:	80 5d       	subi	r24, 0xD0	; 208
     54e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
	transmitByte('0' + (word % 10));                             /* Ones */
     552:	ce 01       	movw	r24, r28
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	cc 0f       	add	r28, r28
     55a:	dd 1f       	adc	r29, r29
     55c:	cc 0f       	add	r28, r28
     55e:	dd 1f       	adc	r29, r29
     560:	cc 0f       	add	r28, r28
     562:	dd 1f       	adc	r29, r29
     564:	c8 0f       	add	r28, r24
     566:	d9 1f       	adc	r29, r25
     568:	c8 01       	movw	r24, r16
     56a:	8c 1b       	sub	r24, r28
     56c:	9d 0b       	sbc	r25, r29
     56e:	80 5d       	subi	r24, 0xD0	; 208
     570:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
}
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	08 95       	ret

0000057e <printCurrent>:

void printCurrent(uint16_t word){
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	8c 01       	movw	r16, r24
	transmitByte('0' + (word / 10000));                 /* Ten-thousands */
     588:	9c 01       	movw	r18, r24
     58a:	32 95       	swap	r19
     58c:	22 95       	swap	r18
     58e:	2f 70       	andi	r18, 0x0F	; 15
     590:	23 27       	eor	r18, r19
     592:	3f 70       	andi	r19, 0x0F	; 15
     594:	23 27       	eor	r18, r19
     596:	a7 e4       	ldi	r26, 0x47	; 71
     598:	b3 e0       	ldi	r27, 0x03	; 3
     59a:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     59e:	96 95       	lsr	r25
     5a0:	87 95       	ror	r24
     5a2:	96 95       	lsr	r25
     5a4:	87 95       	ror	r24
     5a6:	96 95       	lsr	r25
     5a8:	87 95       	ror	r24
     5aa:	80 5d       	subi	r24, 0xD0	; 208
     5ac:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
	transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
     5b0:	98 01       	movw	r18, r16
     5b2:	36 95       	lsr	r19
     5b4:	27 95       	ror	r18
     5b6:	36 95       	lsr	r19
     5b8:	27 95       	ror	r18
     5ba:	36 95       	lsr	r19
     5bc:	27 95       	ror	r18
     5be:	a5 ec       	ldi	r26, 0xC5	; 197
     5c0:	b0 e2       	ldi	r27, 0x20	; 32
     5c2:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     5c6:	ac 01       	movw	r20, r24
     5c8:	52 95       	swap	r21
     5ca:	42 95       	swap	r20
     5cc:	4f 70       	andi	r20, 0x0F	; 15
     5ce:	45 27       	eor	r20, r21
     5d0:	5f 70       	andi	r21, 0x0F	; 15
     5d2:	45 27       	eor	r20, r21
     5d4:	9a 01       	movw	r18, r20
     5d6:	ad ec       	ldi	r26, 0xCD	; 205
     5d8:	bc ec       	ldi	r27, 0xCC	; 204
     5da:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     5de:	96 95       	lsr	r25
     5e0:	87 95       	ror	r24
     5e2:	96 95       	lsr	r25
     5e4:	87 95       	ror	r24
     5e6:	96 95       	lsr	r25
     5e8:	87 95       	ror	r24
     5ea:	9c 01       	movw	r18, r24
     5ec:	22 0f       	add	r18, r18
     5ee:	33 1f       	adc	r19, r19
     5f0:	88 0f       	add	r24, r24
     5f2:	99 1f       	adc	r25, r25
     5f4:	88 0f       	add	r24, r24
     5f6:	99 1f       	adc	r25, r25
     5f8:	88 0f       	add	r24, r24
     5fa:	99 1f       	adc	r25, r25
     5fc:	82 0f       	add	r24, r18
     5fe:	93 1f       	adc	r25, r19
     600:	9a 01       	movw	r18, r20
     602:	28 1b       	sub	r18, r24
     604:	39 0b       	sbc	r19, r25
     606:	c9 01       	movw	r24, r18
     608:	80 5d       	subi	r24, 0xD0	; 208
     60a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
	printString("."); //
     60e:	86 e0       	ldi	r24, 0x06	; 6
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
     616:	98 01       	movw	r18, r16
     618:	36 95       	lsr	r19
     61a:	27 95       	ror	r18
     61c:	36 95       	lsr	r19
     61e:	27 95       	ror	r18
     620:	ab e7       	ldi	r26, 0x7B	; 123
     622:	b4 e1       	ldi	r27, 0x14	; 20
     624:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     628:	ac 01       	movw	r20, r24
     62a:	56 95       	lsr	r21
     62c:	47 95       	ror	r20
     62e:	9a 01       	movw	r18, r20
     630:	ad ec       	ldi	r26, 0xCD	; 205
     632:	bc ec       	ldi	r27, 0xCC	; 204
     634:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     638:	96 95       	lsr	r25
     63a:	87 95       	ror	r24
     63c:	96 95       	lsr	r25
     63e:	87 95       	ror	r24
     640:	96 95       	lsr	r25
     642:	87 95       	ror	r24
     644:	9c 01       	movw	r18, r24
     646:	22 0f       	add	r18, r18
     648:	33 1f       	adc	r19, r19
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	82 0f       	add	r24, r18
     658:	93 1f       	adc	r25, r19
     65a:	9a 01       	movw	r18, r20
     65c:	28 1b       	sub	r18, r24
     65e:	39 0b       	sbc	r19, r25
     660:	c9 01       	movw	r24, r18
     662:	80 5d       	subi	r24, 0xD0	; 208
     664:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
	transmitByte('0' + ((word / 10) % 10));                      /* Tens */
     668:	98 01       	movw	r18, r16
     66a:	ad ec       	ldi	r26, 0xCD	; 205
     66c:	bc ec       	ldi	r27, 0xCC	; 204
     66e:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     672:	ec 01       	movw	r28, r24
     674:	d6 95       	lsr	r29
     676:	c7 95       	ror	r28
     678:	d6 95       	lsr	r29
     67a:	c7 95       	ror	r28
     67c:	d6 95       	lsr	r29
     67e:	c7 95       	ror	r28
     680:	9e 01       	movw	r18, r28
     682:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     686:	96 95       	lsr	r25
     688:	87 95       	ror	r24
     68a:	96 95       	lsr	r25
     68c:	87 95       	ror	r24
     68e:	96 95       	lsr	r25
     690:	87 95       	ror	r24
     692:	9c 01       	movw	r18, r24
     694:	22 0f       	add	r18, r18
     696:	33 1f       	adc	r19, r19
     698:	88 0f       	add	r24, r24
     69a:	99 1f       	adc	r25, r25
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	82 0f       	add	r24, r18
     6a6:	93 1f       	adc	r25, r19
     6a8:	9e 01       	movw	r18, r28
     6aa:	28 1b       	sub	r18, r24
     6ac:	39 0b       	sbc	r19, r25
     6ae:	c9 01       	movw	r24, r18
     6b0:	80 5d       	subi	r24, 0xD0	; 208
     6b2:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
	transmitByte('0' + (word % 10));                             /* Ones */
     6b6:	ce 01       	movw	r24, r28
     6b8:	88 0f       	add	r24, r24
     6ba:	99 1f       	adc	r25, r25
     6bc:	cc 0f       	add	r28, r28
     6be:	dd 1f       	adc	r29, r29
     6c0:	cc 0f       	add	r28, r28
     6c2:	dd 1f       	adc	r29, r29
     6c4:	cc 0f       	add	r28, r28
     6c6:	dd 1f       	adc	r29, r29
     6c8:	c8 0f       	add	r28, r24
     6ca:	d9 1f       	adc	r29, r25
     6cc:	c8 01       	movw	r24, r16
     6ce:	8c 1b       	sub	r24, r28
     6d0:	9d 0b       	sbc	r25, r29
     6d2:	80 5d       	subi	r24, 0xD0	; 208
     6d4:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
}
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	08 95       	ret

000006e2 <printPower>:

void printPower(int16_t word){
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	ec 01       	movw	r28, r24
	if(word>>15){
     6ec:	99 23       	and	r25, r25
     6ee:	0c f0       	brlt	.+2      	; 0x6f2 <printPower+0x10>
     6f0:	3f c0       	rjmp	.+126    	; 0x770 <printPower+0x8e>
		//word &= ~(1UL<<15);
		printString("-");
     6f2:	88 e0       	ldi	r24, 0x08	; 8
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
		//word ^= (0xffff & ~(1UL<<15));
		word ^= 0xffff;
		word++;
     6fa:	d1 95       	neg	r29
     6fc:	c1 95       	neg	r28
     6fe:	d1 09       	sbc	r29, r1
		transmitByte('0' + (word / 10000));                 /* Ten-thousands */
     700:	ce 01       	movw	r24, r28
     702:	60 e1       	ldi	r22, 0x10	; 16
     704:	77 e2       	ldi	r23, 0x27	; 39
     706:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     70a:	80 e3       	ldi	r24, 0x30	; 48
     70c:	86 0f       	add	r24, r22
     70e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
		transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
     712:	ce 01       	movw	r24, r28
     714:	68 ee       	ldi	r22, 0xE8	; 232
     716:	73 e0       	ldi	r23, 0x03	; 3
     718:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     71c:	cb 01       	movw	r24, r22
     71e:	0a e0       	ldi	r16, 0x0A	; 10
     720:	10 e0       	ldi	r17, 0x00	; 0
     722:	b8 01       	movw	r22, r16
     724:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     728:	80 5d       	subi	r24, 0xD0	; 208
     72a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
		printString("."); //
     72e:	86 e0       	ldi	r24, 0x06	; 6
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
		transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
     736:	ce 01       	movw	r24, r28
     738:	64 e6       	ldi	r22, 0x64	; 100
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     740:	cb 01       	movw	r24, r22
     742:	b8 01       	movw	r22, r16
     744:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     748:	80 5d       	subi	r24, 0xD0	; 208
     74a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
		transmitByte('0' + ((word / 10) % 10));                      /* Tens */
     74e:	ce 01       	movw	r24, r28
     750:	b8 01       	movw	r22, r16
     752:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     756:	c8 2f       	mov	r28, r24
     758:	cb 01       	movw	r24, r22
     75a:	b8 01       	movw	r22, r16
     75c:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     760:	80 5d       	subi	r24, 0xD0	; 208
     762:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
		transmitByte('0' + (word % 10));                             /* Ones */
     766:	80 e3       	ldi	r24, 0x30	; 48
     768:	8c 0f       	add	r24, r28
     76a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
     76e:	36 c0       	rjmp	.+108    	; 0x7dc <printPower+0xfa>
	}
	else{
		transmitByte('0' + (word / 10000));                 /* Ten-thousands */
     770:	60 e1       	ldi	r22, 0x10	; 16
     772:	77 e2       	ldi	r23, 0x27	; 39
     774:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     778:	80 e3       	ldi	r24, 0x30	; 48
     77a:	86 0f       	add	r24, r22
     77c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
		transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
     780:	ce 01       	movw	r24, r28
     782:	68 ee       	ldi	r22, 0xE8	; 232
     784:	73 e0       	ldi	r23, 0x03	; 3
     786:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     78a:	cb 01       	movw	r24, r22
     78c:	0a e0       	ldi	r16, 0x0A	; 10
     78e:	10 e0       	ldi	r17, 0x00	; 0
     790:	b8 01       	movw	r22, r16
     792:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     796:	80 5d       	subi	r24, 0xD0	; 208
     798:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
		printString("."); //
     79c:	86 e0       	ldi	r24, 0x06	; 6
     79e:	91 e0       	ldi	r25, 0x01	; 1
     7a0:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
		transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
     7a4:	ce 01       	movw	r24, r28
     7a6:	64 e6       	ldi	r22, 0x64	; 100
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     7ae:	cb 01       	movw	r24, r22
     7b0:	b8 01       	movw	r22, r16
     7b2:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     7b6:	80 5d       	subi	r24, 0xD0	; 208
     7b8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
		transmitByte('0' + ((word / 10) % 10));                      /* Tens */
     7bc:	ce 01       	movw	r24, r28
     7be:	b8 01       	movw	r22, r16
     7c0:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     7c4:	c8 2f       	mov	r28, r24
     7c6:	cb 01       	movw	r24, r22
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     7ce:	80 5d       	subi	r24, 0xD0	; 208
     7d0:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
		transmitByte('0' + (word % 10));                             /* Ones */
     7d4:	80 e3       	ldi	r24, 0x30	; 48
     7d6:	8c 0f       	add	r24, r28
     7d8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
	}
	
}
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	1f 91       	pop	r17
     7e2:	0f 91       	pop	r16
     7e4:	08 95       	ret

000007e6 <printFrequency>:

void printFrequency(uint16_t word){
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	8c 01       	movw	r16, r24
	//transmitByte('0' + (word / 10000));                 /* Ten-thousands */
	transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
     7f0:	9c 01       	movw	r18, r24
     7f2:	36 95       	lsr	r19
     7f4:	27 95       	ror	r18
     7f6:	36 95       	lsr	r19
     7f8:	27 95       	ror	r18
     7fa:	36 95       	lsr	r19
     7fc:	27 95       	ror	r18
     7fe:	a5 ec       	ldi	r26, 0xC5	; 197
     800:	b0 e2       	ldi	r27, 0x20	; 32
     802:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     806:	ac 01       	movw	r20, r24
     808:	52 95       	swap	r21
     80a:	42 95       	swap	r20
     80c:	4f 70       	andi	r20, 0x0F	; 15
     80e:	45 27       	eor	r20, r21
     810:	5f 70       	andi	r21, 0x0F	; 15
     812:	45 27       	eor	r20, r21
     814:	9a 01       	movw	r18, r20
     816:	ad ec       	ldi	r26, 0xCD	; 205
     818:	bc ec       	ldi	r27, 0xCC	; 204
     81a:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     81e:	96 95       	lsr	r25
     820:	87 95       	ror	r24
     822:	96 95       	lsr	r25
     824:	87 95       	ror	r24
     826:	96 95       	lsr	r25
     828:	87 95       	ror	r24
     82a:	9c 01       	movw	r18, r24
     82c:	22 0f       	add	r18, r18
     82e:	33 1f       	adc	r19, r19
     830:	88 0f       	add	r24, r24
     832:	99 1f       	adc	r25, r25
     834:	88 0f       	add	r24, r24
     836:	99 1f       	adc	r25, r25
     838:	88 0f       	add	r24, r24
     83a:	99 1f       	adc	r25, r25
     83c:	82 0f       	add	r24, r18
     83e:	93 1f       	adc	r25, r19
     840:	9a 01       	movw	r18, r20
     842:	28 1b       	sub	r18, r24
     844:	39 0b       	sbc	r19, r25
     846:	c9 01       	movw	r24, r18
     848:	80 5d       	subi	r24, 0xD0	; 208
     84a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
	transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
     84e:	98 01       	movw	r18, r16
     850:	36 95       	lsr	r19
     852:	27 95       	ror	r18
     854:	36 95       	lsr	r19
     856:	27 95       	ror	r18
     858:	ab e7       	ldi	r26, 0x7B	; 123
     85a:	b4 e1       	ldi	r27, 0x14	; 20
     85c:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     860:	ac 01       	movw	r20, r24
     862:	56 95       	lsr	r21
     864:	47 95       	ror	r20
     866:	9a 01       	movw	r18, r20
     868:	ad ec       	ldi	r26, 0xCD	; 205
     86a:	bc ec       	ldi	r27, 0xCC	; 204
     86c:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     870:	96 95       	lsr	r25
     872:	87 95       	ror	r24
     874:	96 95       	lsr	r25
     876:	87 95       	ror	r24
     878:	96 95       	lsr	r25
     87a:	87 95       	ror	r24
     87c:	9c 01       	movw	r18, r24
     87e:	22 0f       	add	r18, r18
     880:	33 1f       	adc	r19, r19
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	88 0f       	add	r24, r24
     88c:	99 1f       	adc	r25, r25
     88e:	82 0f       	add	r24, r18
     890:	93 1f       	adc	r25, r19
     892:	9a 01       	movw	r18, r20
     894:	28 1b       	sub	r18, r24
     896:	39 0b       	sbc	r19, r25
     898:	c9 01       	movw	r24, r18
     89a:	80 5d       	subi	r24, 0xD0	; 208
     89c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
	printString("."); //
     8a0:	86 e0       	ldi	r24, 0x06	; 6
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	transmitByte('0' + ((word / 10) % 10));                      /* Tens */
     8a8:	98 01       	movw	r18, r16
     8aa:	ad ec       	ldi	r26, 0xCD	; 205
     8ac:	bc ec       	ldi	r27, 0xCC	; 204
     8ae:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     8b2:	ec 01       	movw	r28, r24
     8b4:	d6 95       	lsr	r29
     8b6:	c7 95       	ror	r28
     8b8:	d6 95       	lsr	r29
     8ba:	c7 95       	ror	r28
     8bc:	d6 95       	lsr	r29
     8be:	c7 95       	ror	r28
     8c0:	9e 01       	movw	r18, r28
     8c2:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     8c6:	96 95       	lsr	r25
     8c8:	87 95       	ror	r24
     8ca:	96 95       	lsr	r25
     8cc:	87 95       	ror	r24
     8ce:	96 95       	lsr	r25
     8d0:	87 95       	ror	r24
     8d2:	9c 01       	movw	r18, r24
     8d4:	22 0f       	add	r18, r18
     8d6:	33 1f       	adc	r19, r19
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	88 0f       	add	r24, r24
     8de:	99 1f       	adc	r25, r25
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	82 0f       	add	r24, r18
     8e6:	93 1f       	adc	r25, r19
     8e8:	9e 01       	movw	r18, r28
     8ea:	28 1b       	sub	r18, r24
     8ec:	39 0b       	sbc	r19, r25
     8ee:	c9 01       	movw	r24, r18
     8f0:	80 5d       	subi	r24, 0xD0	; 208
     8f2:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
	transmitByte('0' + (word % 10));                             /* Ones */
     8f6:	ce 01       	movw	r24, r28
     8f8:	88 0f       	add	r24, r24
     8fa:	99 1f       	adc	r25, r25
     8fc:	cc 0f       	add	r28, r28
     8fe:	dd 1f       	adc	r29, r29
     900:	cc 0f       	add	r28, r28
     902:	dd 1f       	adc	r29, r29
     904:	cc 0f       	add	r28, r28
     906:	dd 1f       	adc	r29, r29
     908:	c8 0f       	add	r28, r24
     90a:	d9 1f       	adc	r29, r25
     90c:	c8 01       	movw	r24, r16
     90e:	8c 1b       	sub	r24, r28
     910:	9d 0b       	sbc	r25, r29
     912:	80 5d       	subi	r24, 0xD0	; 208
     914:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
}
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	08 95       	ret

00000922 <printPowerFactor>:

void printPowerFactor(int16_t word){
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	ec 01       	movw	r28, r24
	if(word>>15){
     92c:	99 23       	and	r25, r25
     92e:	a4 f5       	brge	.+104    	; 0x998 <printPowerFactor+0x76>
		word &= ~(1UL<<15);
     930:	df 77       	andi	r29, 0x7F	; 127
		printString("-");
     932:	88 e0       	ldi	r24, 0x08	; 8
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
		//word ^= (0xffff & ~(1UL<<16));
		//word++;
		//transmitByte('0' + (word / 10000));                 /* Ten-thousands */
		transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
     93a:	ce 01       	movw	r24, r28
     93c:	68 ee       	ldi	r22, 0xE8	; 232
     93e:	73 e0       	ldi	r23, 0x03	; 3
     940:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     944:	cb 01       	movw	r24, r22
     946:	0a e0       	ldi	r16, 0x0A	; 10
     948:	10 e0       	ldi	r17, 0x00	; 0
     94a:	b8 01       	movw	r22, r16
     94c:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     950:	80 5d       	subi	r24, 0xD0	; 208
     952:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
		printString("."); //
     956:	86 e0       	ldi	r24, 0x06	; 6
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
		transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
     95e:	ce 01       	movw	r24, r28
     960:	64 e6       	ldi	r22, 0x64	; 100
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     968:	cb 01       	movw	r24, r22
     96a:	b8 01       	movw	r22, r16
     96c:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     970:	80 5d       	subi	r24, 0xD0	; 208
     972:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
		transmitByte('0' + ((word / 10) % 10));                      /* Tens */
     976:	ce 01       	movw	r24, r28
     978:	b8 01       	movw	r22, r16
     97a:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     97e:	c8 2f       	mov	r28, r24
     980:	cb 01       	movw	r24, r22
     982:	b8 01       	movw	r22, r16
     984:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     988:	80 5d       	subi	r24, 0xD0	; 208
     98a:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
		transmitByte('0' + (word % 10));                             /* Ones */
     98e:	80 e3       	ldi	r24, 0x30	; 48
     990:	8c 0f       	add	r24, r28
     992:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
     996:	2d c0       	rjmp	.+90     	; 0x9f2 <printPowerFactor+0xd0>
	}
	else{
		//transmitByte('0' + (word / 10000));                 /* Ten-thousands */
		transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
     998:	68 ee       	ldi	r22, 0xE8	; 232
     99a:	73 e0       	ldi	r23, 0x03	; 3
     99c:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     9a0:	cb 01       	movw	r24, r22
     9a2:	0a e0       	ldi	r16, 0x0A	; 10
     9a4:	10 e0       	ldi	r17, 0x00	; 0
     9a6:	b8 01       	movw	r22, r16
     9a8:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     9ac:	80 5d       	subi	r24, 0xD0	; 208
     9ae:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
		printString("."); //
     9b2:	86 e0       	ldi	r24, 0x06	; 6
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
		transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
     9ba:	ce 01       	movw	r24, r28
     9bc:	64 e6       	ldi	r22, 0x64	; 100
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     9c4:	cb 01       	movw	r24, r22
     9c6:	b8 01       	movw	r22, r16
     9c8:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     9cc:	80 5d       	subi	r24, 0xD0	; 208
     9ce:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
		transmitByte('0' + ((word / 10) % 10));                      /* Tens */
     9d2:	ce 01       	movw	r24, r28
     9d4:	b8 01       	movw	r22, r16
     9d6:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     9da:	c8 2f       	mov	r28, r24
     9dc:	cb 01       	movw	r24, r22
     9de:	b8 01       	movw	r22, r16
     9e0:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     9e4:	80 5d       	subi	r24, 0xD0	; 208
     9e6:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
		transmitByte('0' + (word % 10));                             /* Ones */
     9ea:	80 e3       	ldi	r24, 0x30	; 48
     9ec:	8c 0f       	add	r24, r28
     9ee:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
	}
	
}
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	08 95       	ret

000009fc <printPhaseAngle>:

void printPhaseAngle(int16_t word){
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	ec 01       	movw	r28, r24
	if(word>>15){
     a06:	99 23       	and	r25, r25
     a08:	b4 f5       	brge	.+108    	; 0xa76 <printPhaseAngle+0x7a>
		//word &= ~(1UL<<15);
		printString("-");
     a0a:	88 e0       	ldi	r24, 0x08	; 8
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
		//word ^= (0xffff & ~(1UL<<15));
		word ^= 0xffff;
		word++;
     a12:	d1 95       	neg	r29
     a14:	c1 95       	neg	r28
     a16:	d1 09       	sbc	r29, r1
		//transmitByte('0' + (word / 10000));                 /* Ten-thousands */
		transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
     a18:	ce 01       	movw	r24, r28
     a1a:	68 ee       	ldi	r22, 0xE8	; 232
     a1c:	73 e0       	ldi	r23, 0x03	; 3
     a1e:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     a22:	cb 01       	movw	r24, r22
     a24:	0a e0       	ldi	r16, 0x0A	; 10
     a26:	10 e0       	ldi	r17, 0x00	; 0
     a28:	b8 01       	movw	r22, r16
     a2a:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     a2e:	80 5d       	subi	r24, 0xD0	; 208
     a30:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
		transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
     a34:	ce 01       	movw	r24, r28
     a36:	64 e6       	ldi	r22, 0x64	; 100
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     a3e:	cb 01       	movw	r24, r22
     a40:	b8 01       	movw	r22, r16
     a42:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     a46:	80 5d       	subi	r24, 0xD0	; 208
     a48:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
		transmitByte('0' + ((word / 10) % 10));                      /* Tens */
     a4c:	ce 01       	movw	r24, r28
     a4e:	b8 01       	movw	r22, r16
     a50:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     a54:	c8 2f       	mov	r28, r24
     a56:	cb 01       	movw	r24, r22
     a58:	b8 01       	movw	r22, r16
     a5a:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     a5e:	80 5d       	subi	r24, 0xD0	; 208
     a60:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
		printString("."); //
     a64:	86 e0       	ldi	r24, 0x06	; 6
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
		transmitByte('0' + (word % 10));                             /* Ones */
     a6c:	80 e3       	ldi	r24, 0x30	; 48
     a6e:	8c 0f       	add	r24, r28
     a70:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
     a74:	2d c0       	rjmp	.+90     	; 0xad0 <printPhaseAngle+0xd4>
	}
	else{
		//transmitByte('0' + (word / 10000));                 /* Ten-thousands */
		transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
     a76:	68 ee       	ldi	r22, 0xE8	; 232
     a78:	73 e0       	ldi	r23, 0x03	; 3
     a7a:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     a7e:	cb 01       	movw	r24, r22
     a80:	0a e0       	ldi	r16, 0x0A	; 10
     a82:	10 e0       	ldi	r17, 0x00	; 0
     a84:	b8 01       	movw	r22, r16
     a86:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     a8a:	80 5d       	subi	r24, 0xD0	; 208
     a8c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
		transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
     a90:	ce 01       	movw	r24, r28
     a92:	64 e6       	ldi	r22, 0x64	; 100
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     a9a:	cb 01       	movw	r24, r22
     a9c:	b8 01       	movw	r22, r16
     a9e:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     aa2:	80 5d       	subi	r24, 0xD0	; 208
     aa4:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
		transmitByte('0' + ((word / 10) % 10));                      /* Tens */
     aa8:	ce 01       	movw	r24, r28
     aaa:	b8 01       	movw	r22, r16
     aac:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     ab0:	c8 2f       	mov	r28, r24
     ab2:	cb 01       	movw	r24, r22
     ab4:	b8 01       	movw	r22, r16
     ab6:	0e 94 3b 09 	call	0x1276	; 0x1276 <__divmodhi4>
     aba:	80 5d       	subi	r24, 0xD0	; 208
     abc:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
		printString("."); //
     ac0:	86 e0       	ldi	r24, 0x06	; 6
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
		transmitByte('0' + (word % 10));                             /* Ones */
     ac8:	80 e3       	ldi	r24, 0x30	; 48
     aca:	8c 0f       	add	r24, r28
     acc:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
	}
	
}
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	08 95       	ret

00000ada <printEnergy>:

void printEnergy(uint16_t word){
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	8c 01       	movw	r16, r24
	transmitByte('0' + (word / 10000));                 /* Ten-thousands */
     ae4:	9c 01       	movw	r18, r24
     ae6:	32 95       	swap	r19
     ae8:	22 95       	swap	r18
     aea:	2f 70       	andi	r18, 0x0F	; 15
     aec:	23 27       	eor	r18, r19
     aee:	3f 70       	andi	r19, 0x0F	; 15
     af0:	23 27       	eor	r18, r19
     af2:	a7 e4       	ldi	r26, 0x47	; 71
     af4:	b3 e0       	ldi	r27, 0x03	; 3
     af6:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     afa:	96 95       	lsr	r25
     afc:	87 95       	ror	r24
     afe:	96 95       	lsr	r25
     b00:	87 95       	ror	r24
     b02:	96 95       	lsr	r25
     b04:	87 95       	ror	r24
     b06:	80 5d       	subi	r24, 0xD0	; 208
     b08:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
	transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
     b0c:	98 01       	movw	r18, r16
     b0e:	36 95       	lsr	r19
     b10:	27 95       	ror	r18
     b12:	36 95       	lsr	r19
     b14:	27 95       	ror	r18
     b16:	36 95       	lsr	r19
     b18:	27 95       	ror	r18
     b1a:	a5 ec       	ldi	r26, 0xC5	; 197
     b1c:	b0 e2       	ldi	r27, 0x20	; 32
     b1e:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     b22:	ac 01       	movw	r20, r24
     b24:	52 95       	swap	r21
     b26:	42 95       	swap	r20
     b28:	4f 70       	andi	r20, 0x0F	; 15
     b2a:	45 27       	eor	r20, r21
     b2c:	5f 70       	andi	r21, 0x0F	; 15
     b2e:	45 27       	eor	r20, r21
     b30:	9a 01       	movw	r18, r20
     b32:	ad ec       	ldi	r26, 0xCD	; 205
     b34:	bc ec       	ldi	r27, 0xCC	; 204
     b36:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     b3a:	96 95       	lsr	r25
     b3c:	87 95       	ror	r24
     b3e:	96 95       	lsr	r25
     b40:	87 95       	ror	r24
     b42:	96 95       	lsr	r25
     b44:	87 95       	ror	r24
     b46:	9c 01       	movw	r18, r24
     b48:	22 0f       	add	r18, r18
     b4a:	33 1f       	adc	r19, r19
     b4c:	88 0f       	add	r24, r24
     b4e:	99 1f       	adc	r25, r25
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	82 0f       	add	r24, r18
     b5a:	93 1f       	adc	r25, r19
     b5c:	9a 01       	movw	r18, r20
     b5e:	28 1b       	sub	r18, r24
     b60:	39 0b       	sbc	r19, r25
     b62:	c9 01       	movw	r24, r18
     b64:	80 5d       	subi	r24, 0xD0	; 208
     b66:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
	transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
     b6a:	98 01       	movw	r18, r16
     b6c:	36 95       	lsr	r19
     b6e:	27 95       	ror	r18
     b70:	36 95       	lsr	r19
     b72:	27 95       	ror	r18
     b74:	ab e7       	ldi	r26, 0x7B	; 123
     b76:	b4 e1       	ldi	r27, 0x14	; 20
     b78:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     b7c:	ac 01       	movw	r20, r24
     b7e:	56 95       	lsr	r21
     b80:	47 95       	ror	r20
     b82:	9a 01       	movw	r18, r20
     b84:	ad ec       	ldi	r26, 0xCD	; 205
     b86:	bc ec       	ldi	r27, 0xCC	; 204
     b88:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     b8c:	96 95       	lsr	r25
     b8e:	87 95       	ror	r24
     b90:	96 95       	lsr	r25
     b92:	87 95       	ror	r24
     b94:	96 95       	lsr	r25
     b96:	87 95       	ror	r24
     b98:	9c 01       	movw	r18, r24
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	88 0f       	add	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	82 0f       	add	r24, r18
     bac:	93 1f       	adc	r25, r19
     bae:	9a 01       	movw	r18, r20
     bb0:	28 1b       	sub	r18, r24
     bb2:	39 0b       	sbc	r19, r25
     bb4:	c9 01       	movw	r24, r18
     bb6:	80 5d       	subi	r24, 0xD0	; 208
     bb8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
	transmitByte('0' + ((word / 10) % 10));                      /* Tens */
     bbc:	98 01       	movw	r18, r16
     bbe:	ad ec       	ldi	r26, 0xCD	; 205
     bc0:	bc ec       	ldi	r27, 0xCC	; 204
     bc2:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     bc6:	ec 01       	movw	r28, r24
     bc8:	d6 95       	lsr	r29
     bca:	c7 95       	ror	r28
     bcc:	d6 95       	lsr	r29
     bce:	c7 95       	ror	r28
     bd0:	d6 95       	lsr	r29
     bd2:	c7 95       	ror	r28
     bd4:	9e 01       	movw	r18, r28
     bd6:	0e 94 4f 09 	call	0x129e	; 0x129e <__umulhisi3>
     bda:	96 95       	lsr	r25
     bdc:	87 95       	ror	r24
     bde:	96 95       	lsr	r25
     be0:	87 95       	ror	r24
     be2:	96 95       	lsr	r25
     be4:	87 95       	ror	r24
     be6:	9c 01       	movw	r18, r24
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	82 0f       	add	r24, r18
     bfa:	93 1f       	adc	r25, r19
     bfc:	9e 01       	movw	r18, r28
     bfe:	28 1b       	sub	r18, r24
     c00:	39 0b       	sbc	r19, r25
     c02:	c9 01       	movw	r24, r18
     c04:	80 5d       	subi	r24, 0xD0	; 208
     c06:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
	printString("."); //
     c0a:	86 e0       	ldi	r24, 0x06	; 6
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	transmitByte('0' + (word % 10));                             /* Ones */
     c12:	ce 01       	movw	r24, r28
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	cc 0f       	add	r28, r28
     c1a:	dd 1f       	adc	r29, r29
     c1c:	cc 0f       	add	r28, r28
     c1e:	dd 1f       	adc	r29, r29
     c20:	cc 0f       	add	r28, r28
     c22:	dd 1f       	adc	r29, r29
     c24:	c8 0f       	add	r28, r24
     c26:	d9 1f       	adc	r29, r25
     c28:	c8 01       	movw	r24, r16
     c2a:	8c 1b       	sub	r24, r28
     c2c:	9d 0b       	sbc	r25, r29
     c2e:	80 5d       	subi	r24, 0xD0	; 208
     c30:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	08 95       	ret

00000c3e <setup_rf>:
	printString("/");
	printByte(date);
	printString("/");
	printWord(year);
	printString("\r\n");
}
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	0e 94 76 07 	call	0xeec	; 0xeec <nRF24L01_init>
     c46:	ec 01       	movw	r28, r24
     c48:	85 e2       	ldi	r24, 0x25	; 37
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	99 83       	std	Y+1, r25	; 0x01
     c4e:	88 83       	st	Y, r24
     c50:	22 e0       	ldi	r18, 0x02	; 2
     c52:	2a 83       	std	Y+2, r18	; 0x02
     c54:	9c 83       	std	Y+4, r25	; 0x04
     c56:	8b 83       	std	Y+3, r24	; 0x03
     c58:	21 e0       	ldi	r18, 0x01	; 1
     c5a:	2d 83       	std	Y+5, r18	; 0x05
     c5c:	9f 83       	std	Y+7, r25	; 0x07
     c5e:	8e 83       	std	Y+6, r24	; 0x06
     c60:	25 e0       	ldi	r18, 0x05	; 5
     c62:	28 87       	std	Y+8, r18	; 0x08
     c64:	9a 87       	std	Y+10, r25	; 0x0a
     c66:	89 87       	std	Y+9, r24	; 0x09
     c68:	23 e0       	ldi	r18, 0x03	; 3
     c6a:	2b 87       	std	Y+11, r18	; 0x0b
     c6c:	9d 87       	std	Y+13, r25	; 0x0d
     c6e:	8c 87       	std	Y+12, r24	; 0x0c
     c70:	84 e0       	ldi	r24, 0x04	; 4
     c72:	8e 87       	std	Y+14, r24	; 0x0e
     c74:	e9 e6       	ldi	r30, 0x69	; 105
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	82 60       	ori	r24, 0x02	; 2
     c7c:	80 83       	st	Z, r24
     c7e:	e8 9a       	sbi	0x1d, 0	; 29
     c80:	ce 01       	movw	r24, r28
     c82:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <nRF24L01_begin>
     c86:	ce 01       	movw	r24, r28
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	08 95       	ret

00000c8e <setup_timer>:
     c8e:	e1 e8       	ldi	r30, 0x81	; 129
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	88 60       	ori	r24, 0x08	; 8
     c96:	80 83       	st	Z, r24
     c98:	af e6       	ldi	r26, 0x6F	; 111
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	8c 91       	ld	r24, X
     c9e:	82 60       	ori	r24, 0x02	; 2
     ca0:	8c 93       	st	X, r24
     ca2:	82 e1       	ldi	r24, 0x12	; 18
     ca4:	9a e7       	ldi	r25, 0x7A	; 122
     ca6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     caa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     cae:	80 81       	ld	r24, Z
     cb0:	84 60       	ori	r24, 0x04	; 4
     cb2:	80 83       	st	Z, r24
     cb4:	08 95       	ret

00000cb6 <print_power_IC_settings>:

void print_power_IC_settings(void){
	printString("Power IC Settings:");
     cb6:	82 e4       	ldi	r24, 0x42	; 66
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	printString("\r\n");
     cbe:	87 e2       	ldi	r24, 0x27	; 39
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	
	printString("System Status: ");
     cc6:	85 e5       	ldi	r24, 0x55	; 85
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	printHexWord(get_pIC_RegValue(SysStatus));
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	0e 94 4a 01 	call	0x294	; 0x294 <get_pIC_RegValue>
     cd4:	0e 94 2d 09 	call	0x125a	; 0x125a <printHexWord>
	printString("\r\n");
     cd8:	87 e2       	ldi	r24, 0x27	; 39
     cda:	91 e0       	ldi	r25, 0x01	; 1
     cdc:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	
	printString("Metering Status: ");
     ce0:	85 e6       	ldi	r24, 0x65	; 101
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	printHexWord(get_pIC_RegValue(EnStatus));
     ce8:	86 e4       	ldi	r24, 0x46	; 70
     cea:	0e 94 4a 01 	call	0x294	; 0x294 <get_pIC_RegValue>
     cee:	0e 94 2d 09 	call	0x125a	; 0x125a <printHexWord>
	printString("\r\n");
     cf2:	87 e2       	ldi	r24, 0x27	; 39
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	
	printString("Metering Mode: ");
     cfa:	87 e7       	ldi	r24, 0x77	; 119
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	printHexWord(get_pIC_RegValue(MMode));
     d02:	8b e2       	ldi	r24, 0x2B	; 43
     d04:	0e 94 4a 01 	call	0x294	; 0x294 <get_pIC_RegValue>
     d08:	0e 94 2d 09 	call	0x125a	; 0x125a <printHexWord>
	printString("\r\n");
     d0c:	87 e2       	ldi	r24, 0x27	; 39
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	
	printString("Checksum 1: ");
     d14:	87 e8       	ldi	r24, 0x87	; 135
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	printHexWord(get_pIC_RegValue(CS1));
     d1c:	8c e2       	ldi	r24, 0x2C	; 44
     d1e:	0e 94 4a 01 	call	0x294	; 0x294 <get_pIC_RegValue>
     d22:	0e 94 2d 09 	call	0x125a	; 0x125a <printHexWord>
	printString("\r\n");
     d26:	87 e2       	ldi	r24, 0x27	; 39
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	
	printString("Checksum 2: ");
     d2e:	84 e9       	ldi	r24, 0x94	; 148
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	printHexWord((get_pIC_RegValue(CS2)));
     d36:	8b e3       	ldi	r24, 0x3B	; 59
     d38:	0e 94 4a 01 	call	0x294	; 0x294 <get_pIC_RegValue>
     d3c:	0e 94 2d 09 	call	0x125a	; 0x125a <printHexWord>
	printString("\r\n");
     d40:	87 e2       	ldi	r24, 0x27	; 39
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	
	printString("Measurement Calibration Start Command: ");
     d48:	81 ea       	ldi	r24, 0xA1	; 161
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	printHexWord((get_pIC_RegValue(AdjStart)));
     d50:	80 e3       	ldi	r24, 0x30	; 48
     d52:	0e 94 4a 01 	call	0x294	; 0x294 <get_pIC_RegValue>
     d56:	0e 94 2d 09 	call	0x125a	; 0x125a <printHexWord>
	printString("\r\n");
     d5a:	87 e2       	ldi	r24, 0x27	; 39
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	
	printString("Voltage RMS Gain: ");
     d62:	89 ec       	ldi	r24, 0xC9	; 201
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	printHexWord((get_pIC_RegValue(Ugain)));
     d6a:	81 e3       	ldi	r24, 0x31	; 49
     d6c:	0e 94 4a 01 	call	0x294	; 0x294 <get_pIC_RegValue>
     d70:	0e 94 2d 09 	call	0x125a	; 0x125a <printHexWord>
	printString("\r\n");
     d74:	87 e2       	ldi	r24, 0x27	; 39
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	
	printString("L Line Current RMS Gain: ");
     d7c:	8c ed       	ldi	r24, 0xDC	; 220
     d7e:	91 e0       	ldi	r25, 0x01	; 1
     d80:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	printHexWord((get_pIC_RegValue(IgainL)));
     d84:	82 e3       	ldi	r24, 0x32	; 50
     d86:	0e 94 4a 01 	call	0x294	; 0x294 <get_pIC_RegValue>
     d8a:	0e 94 2d 09 	call	0x125a	; 0x125a <printHexWord>
	printString("\r\n");
     d8e:	87 e2       	ldi	r24, 0x27	; 39
     d90:	91 e0       	ldi	r25, 0x01	; 1
     d92:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
     d96:	08 95       	ret

00000d98 <print_power_data>:

void print_power_data(void){
	
	//printString("Measurement Calibration start: \r\n");
	//printWord(get_pIC_RegValue(AdjStart));
	printString("Voltage: ");
     d98:	86 ef       	ldi	r24, 0xF6	; 246
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	printVoltage(get_pIC_RegValue(Urms));
     da0:	89 e4       	ldi	r24, 0x49	; 73
     da2:	0e 94 4a 01 	call	0x294	; 0x294 <get_pIC_RegValue>
     da6:	0e 94 0d 02 	call	0x41a	; 0x41a <printVoltage>
	printString("\t\tCurrent: ");
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	92 e0       	ldi	r25, 0x02	; 2
     dae:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	printCurrent(get_pIC_RegValue(Irms));
     db2:	88 e4       	ldi	r24, 0x48	; 72
     db4:	0e 94 4a 01 	call	0x294	; 0x294 <get_pIC_RegValue>
     db8:	0e 94 bf 02 	call	0x57e	; 0x57e <printCurrent>
	printString("\r\n");
     dbc:	87 e2       	ldi	r24, 0x27	; 39
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	printString("Frequency: ");
     dc4:	8c e0       	ldi	r24, 0x0C	; 12
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	printFrequency(get_pIC_RegValue(Freq));
     dcc:	8c e4       	ldi	r24, 0x4C	; 76
     dce:	0e 94 4a 01 	call	0x294	; 0x294 <get_pIC_RegValue>
     dd2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <printFrequency>
	printString("\tPower Factor: ");
     dd6:	88 e1       	ldi	r24, 0x18	; 24
     dd8:	92 e0       	ldi	r25, 0x02	; 2
     dda:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	printPowerFactor(get_pIC_RegValue(PowerF));
     dde:	8d e4       	ldi	r24, 0x4D	; 77
     de0:	0e 94 4a 01 	call	0x294	; 0x294 <get_pIC_RegValue>
     de4:	0e 94 91 04 	call	0x922	; 0x922 <printPowerFactor>
	printString("\tPhase Angle: ");
     de8:	88 e2       	ldi	r24, 0x28	; 40
     dea:	92 e0       	ldi	r25, 0x02	; 2
     dec:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	printPhaseAngle(get_pIC_RegValue(Pangle));
     df0:	8e e4       	ldi	r24, 0x4E	; 78
     df2:	0e 94 4a 01 	call	0x294	; 0x294 <get_pIC_RegValue>
     df6:	0e 94 fe 04 	call	0x9fc	; 0x9fc <printPhaseAngle>
	printString("\n\rActive Power: ");
     dfa:	87 e3       	ldi	r24, 0x37	; 55
     dfc:	92 e0       	ldi	r25, 0x02	; 2
     dfe:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	printPower(get_pIC_RegValue(Pmean));
     e02:	8a e4       	ldi	r24, 0x4A	; 74
     e04:	0e 94 4a 01 	call	0x294	; 0x294 <get_pIC_RegValue>
     e08:	0e 94 71 03 	call	0x6e2	; 0x6e2 <printPower>
	printString("\tReactive Power: ");
     e0c:	88 e4       	ldi	r24, 0x48	; 72
     e0e:	92 e0       	ldi	r25, 0x02	; 2
     e10:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	printPower(get_pIC_RegValue(Qmean));
     e14:	8b e4       	ldi	r24, 0x4B	; 75
     e16:	0e 94 4a 01 	call	0x294	; 0x294 <get_pIC_RegValue>
     e1a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <printPower>
	printString("\tAbsolute Power: ");
     e1e:	8a e5       	ldi	r24, 0x5A	; 90
     e20:	92 e0       	ldi	r25, 0x02	; 2
     e22:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	printPower(get_pIC_RegValue(Smean));
     e26:	8f e4       	ldi	r24, 0x4F	; 79
     e28:	0e 94 4a 01 	call	0x294	; 0x294 <get_pIC_RegValue>
     e2c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <printPower>
	printString("\r\n\n");
     e30:	8c e6       	ldi	r24, 0x6C	; 108
     e32:	92 e0       	ldi	r25, 0x02	; 2
     e34:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
     e38:	08 95       	ret

00000e3a <main>:
uint8_t clockAddressW = 0b11010000; // read bit for DS1307
uint8_t to_address[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2}; // RF channel address.

int main(void)
{
	initUSART();
     e3a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <initUSART>
	initI2C();
     e3e:	0e 94 53 00 	call	0xa6	; 0xa6 <initI2C>
	initLCD();
     e42:	0e 94 b7 00 	call	0x16e	; 0x16e <initLCD>
	SPI_init();
     e46:	0e 94 c9 08 	call	0x1192	; 0x1192 <SPI_init>
	
	//bool on = false;
	sei();
     e4a:	78 94       	sei
	//nRF24L01 *rf = setup_rf();
	setup_rf();
     e4c:	0e 94 1f 06 	call	0xc3e	; 0xc3e <setup_rf>
	//m90E26 *pIC = setup_powerIC();
	
	pIC_Start();
     e50:	0e 94 71 01 	call	0x2e2	; 0x2e2 <pIC_Start>
	setup_timer();
     e54:	0e 94 47 06 	call	0xc8e	; 0xc8e <setup_timer>
	
	clear_lcd();
     e58:	0e 94 be 00 	call	0x17c	; 0x17c <clear_lcd>
	set_cursor(0,0);
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <set_cursor>
	lcd_print_string("Starting Program!");
     e68:	80 e7       	ldi	r24, 0x70	; 112
     e6a:	92 e0       	ldi	r25, 0x02	; 2
     e6c:	0e 94 34 01 	call	0x268	; 0x268 <lcd_print_string>
	//printString("Starting Program!\r\n");
	
	
	//print_RF_settings();
	
	print_power_IC_settings();
     e70:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <print_power_IC_settings>
	//set_pIC_RegValue(SmallPMod, 0xA987);
	int counter=0;
	
	//print_power_data();
	int kWh = 0;
     e74:	c0 e0       	ldi	r28, 0x00	; 0
     e76:	d0 e0       	ldi	r29, 0x00	; 0
	
	//print_RF_settings();
	
	print_power_IC_settings();
	//set_pIC_RegValue(SmallPMod, 0xA987);
	int counter=0;
     e78:	00 e0       	ldi	r16, 0x00	; 0
     e7a:	10 e0       	ldi	r17, 0x00	; 0
	int kWh = 0;
	
    while (1) 
    {
		
		if (send_message){
     e7c:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <__data_end>
     e80:	88 23       	and	r24, r24
     e82:	e1 f3       	breq	.-8      	; 0xe7c <main+0x42>
			print_power_data();
     e84:	0e 94 cc 06 	call	0xd98	; 0xd98 <print_power_data>
			kWh += get_pIC_RegValue(ATenergy);
     e88:	82 e4       	ldi	r24, 0x42	; 66
     e8a:	0e 94 4a 01 	call	0x294	; 0x294 <get_pIC_RegValue>
     e8e:	c8 0f       	add	r28, r24
     e90:	d9 1f       	adc	r29, r25
			printEnergy(kWh);
     e92:	ce 01       	movw	r24, r28
     e94:	0e 94 6d 05 	call	0xada	; 0xada <printEnergy>
			printString("\r\n");
     e98:	87 e2       	ldi	r24, 0x27	; 39
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
			send_message = false;
     ea0:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <__data_end>
			if (counter < 5){
     ea4:	05 30       	cpi	r16, 0x05	; 5
     ea6:	11 05       	cpc	r17, r1
     ea8:	4c f7       	brge	.-46     	; 0xe7c <main+0x42>
				//printHexWord(get_pIC_RegValue(Pmean));
				//printString("\r\n");
				counter++;
     eaa:	0f 5f       	subi	r16, 0xFF	; 255
     eac:	1f 4f       	sbci	r17, 0xFF	; 255
     eae:	e6 cf       	rjmp	.-52     	; 0xe7c <main+0x42>

00000eb0 <__vector_11>:
	printString("\r\n\n");
	
}

// each one second interrupt
ISR(TIMER1_COMPA_vect) {
     eb0:	1f 92       	push	r1
     eb2:	0f 92       	push	r0
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	0f 92       	push	r0
     eb8:	11 24       	eor	r1, r1
     eba:	8f 93       	push	r24
	send_message = true;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <__data_end>
}
     ec2:	8f 91       	pop	r24
     ec4:	0f 90       	pop	r0
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	0f 90       	pop	r0
     eca:	1f 90       	pop	r1
     ecc:	18 95       	reti

00000ece <__vector_1>:

// nRF24L01 interrupt
ISR(INT0_vect) {
     ece:	1f 92       	push	r1
     ed0:	0f 92       	push	r0
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	0f 92       	push	r0
     ed6:	11 24       	eor	r1, r1
     ed8:	8f 93       	push	r24
	rf_interrupt = true;
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <rf_interrupt>
     ee0:	8f 91       	pop	r24
     ee2:	0f 90       	pop	r0
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	0f 90       	pop	r0
     ee8:	1f 90       	pop	r1
     eea:	18 95       	reti

00000eec <nRF24L01_init>:
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~_BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
}
     eec:	80 e1       	ldi	r24, 0x10	; 16
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 72 09 	call	0x12e4	; 0x12e4 <malloc>
     ef4:	20 e1       	ldi	r18, 0x10	; 16
     ef6:	fc 01       	movw	r30, r24
     ef8:	11 92       	st	Z+, r1
     efa:	2a 95       	dec	r18
     efc:	e9 f7       	brne	.-6      	; 0xef8 <nRF24L01_init+0xc>
     efe:	08 95       	ret

00000f00 <nRF24L01_send_command>:
     f00:	cf 92       	push	r12
     f02:	df 92       	push	r13
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	7c 01       	movw	r14, r24
     f12:	86 2f       	mov	r24, r22
     f14:	6a 01       	movw	r12, r20
     f16:	89 01       	movw	r16, r18
     f18:	d7 01       	movw	r26, r14
     f1a:	ed 91       	ld	r30, X+
     f1c:	fc 91       	ld	r31, X
     f1e:	11 97       	sbiw	r26, 0x01	; 1
     f20:	90 81       	ld	r25, Z
     f22:	21 e0       	ldi	r18, 0x01	; 1
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	12 96       	adiw	r26, 0x02	; 2
     f28:	0c 90       	ld	r0, X
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <nRF24L01_send_command+0x30>
     f2c:	22 0f       	add	r18, r18
     f2e:	33 1f       	adc	r19, r19
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <nRF24L01_send_command+0x2c>
     f34:	20 95       	com	r18
     f36:	29 23       	and	r18, r25
     f38:	20 83       	st	Z, r18
     f3a:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <SPI_tradeByte>
     f3e:	f7 01       	movw	r30, r14
     f40:	87 87       	std	Z+15, r24	; 0x0f
     f42:	01 15       	cp	r16, r1
     f44:	11 05       	cpc	r17, r1
     f46:	51 f0       	breq	.+20     	; 0xf5c <nRF24L01_send_command+0x5c>
     f48:	e6 01       	movw	r28, r12
     f4a:	0c 0d       	add	r16, r12
     f4c:	1d 1d       	adc	r17, r13
     f4e:	88 81       	ld	r24, Y
     f50:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <SPI_tradeByte>
     f54:	89 93       	st	Y+, r24
     f56:	c0 17       	cp	r28, r16
     f58:	d1 07       	cpc	r29, r17
     f5a:	c9 f7       	brne	.-14     	; 0xf4e <nRF24L01_send_command+0x4e>
     f5c:	d7 01       	movw	r26, r14
     f5e:	ed 91       	ld	r30, X+
     f60:	fc 91       	ld	r31, X
     f62:	11 97       	sbiw	r26, 0x01	; 1
     f64:	20 81       	ld	r18, Z
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	12 96       	adiw	r26, 0x02	; 2
     f6c:	0c 90       	ld	r0, X
     f6e:	12 97       	sbiw	r26, 0x02	; 2
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <nRF24L01_send_command+0x76>
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	0a 94       	dec	r0
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <nRF24L01_send_command+0x72>
     f7a:	82 2b       	or	r24, r18
     f7c:	80 83       	st	Z, r24
     f7e:	1f 96       	adiw	r26, 0x0f	; 15
     f80:	8c 91       	ld	r24, X
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	1f 91       	pop	r17
     f88:	0f 91       	pop	r16
     f8a:	ff 90       	pop	r15
     f8c:	ef 90       	pop	r14
     f8e:	df 90       	pop	r13
     f90:	cf 90       	pop	r12
     f92:	08 95       	ret

00000f94 <nRF24L01_write_register>:
     f94:	60 62       	ori	r22, 0x20	; 32
     f96:	0e 94 80 07 	call	0xf00	; 0xf00 <nRF24L01_send_command>
     f9a:	08 95       	ret

00000f9c <nRF24L01_clear_interrupts>:

void nRF24L01_clear_interrupts(nRF24L01 *rf) {
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	1f 92       	push	r1
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
     fa6:	20 e7       	ldi	r18, 0x70	; 112
     fa8:	29 83       	std	Y+1, r18	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
     faa:	21 e0       	ldi	r18, 0x01	; 1
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	ae 01       	movw	r20, r28
     fb0:	4f 5f       	subi	r20, 0xFF	; 255
     fb2:	5f 4f       	sbci	r21, 0xFF	; 255
     fb4:	67 e0       	ldi	r22, 0x07	; 7
     fb6:	0e 94 ca 07 	call	0xf94	; 0xf94 <nRF24L01_write_register>
}
     fba:	0f 90       	pop	r0
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	08 95       	ret

00000fc2 <nRF24L01_begin>:
    nRF24L01 *rf = malloc(sizeof(nRF24L01));
    memset(rf, 0, sizeof(nRF24L01));
    return rf;
}

void nRF24L01_begin(nRF24L01 *rf) {
     fc2:	ff 92       	push	r15
     fc4:	0f 93       	push	r16
     fc6:	1f 93       	push	r17
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	1f 92       	push	r1
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	8c 01       	movw	r16, r24
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
     fd4:	dc 01       	movw	r26, r24
     fd6:	ed 91       	ld	r30, X+
     fd8:	fc 91       	ld	r31, X
     fda:	11 97       	sbiw	r26, 0x01	; 1
     fdc:	42 91       	ld	r20, -Z
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	9c 01       	movw	r18, r24
     fe4:	12 96       	adiw	r26, 0x02	; 2
     fe6:	0c 90       	ld	r0, X
     fe8:	12 97       	sbiw	r26, 0x02	; 2
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <nRF24L01_begin+0x2e>
     fec:	22 0f       	add	r18, r18
     fee:	33 1f       	adc	r19, r19
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <nRF24L01_begin+0x2a>
     ff4:	24 2b       	or	r18, r20
     ff6:	20 83       	st	Z, r18
     ff8:	13 96       	adiw	r26, 0x03	; 3
     ffa:	ed 91       	ld	r30, X+
     ffc:	fc 91       	ld	r31, X
     ffe:	14 97       	sbiw	r26, 0x04	; 4
    1000:	42 91       	ld	r20, -Z
    1002:	9c 01       	movw	r18, r24
    1004:	15 96       	adiw	r26, 0x05	; 5
    1006:	0c 90       	ld	r0, X
    1008:	15 97       	sbiw	r26, 0x05	; 5
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <nRF24L01_begin+0x4e>
    100c:	22 0f       	add	r18, r18
    100e:	33 1f       	adc	r19, r19
    1010:	0a 94       	dec	r0
    1012:	e2 f7       	brpl	.-8      	; 0x100c <nRF24L01_begin+0x4a>
    1014:	24 2b       	or	r18, r20
    1016:	20 83       	st	Z, r18
    1018:	ed 91       	ld	r30, X+
    101a:	fc 91       	ld	r31, X
    101c:	11 97       	sbiw	r26, 0x01	; 1
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
    101e:	40 81       	ld	r20, Z
    1020:	9c 01       	movw	r18, r24
    1022:	12 96       	adiw	r26, 0x02	; 2
    1024:	0c 90       	ld	r0, X
    1026:	12 97       	sbiw	r26, 0x02	; 2
    1028:	02 c0       	rjmp	.+4      	; 0x102e <nRF24L01_begin+0x6c>
    102a:	22 0f       	add	r18, r18
    102c:	33 1f       	adc	r19, r19
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <nRF24L01_begin+0x68>
    1032:	24 2b       	or	r18, r20
    1034:	20 83       	st	Z, r18
    1036:	13 96       	adiw	r26, 0x03	; 3
    1038:	ed 91       	ld	r30, X+
    103a:	fc 91       	ld	r31, X
    103c:	14 97       	sbiw	r26, 0x04	; 4
}

inline static void set_low(gpio_pin pin) {
    *pin.port &= ~_BV(pin.pin);
    103e:	30 81       	ld	r19, Z
    1040:	ac 01       	movw	r20, r24
    1042:	15 96       	adiw	r26, 0x05	; 5
    1044:	0c 90       	ld	r0, X
    1046:	15 97       	sbiw	r26, 0x05	; 5
    1048:	02 c0       	rjmp	.+4      	; 0x104e <nRF24L01_begin+0x8c>
    104a:	44 0f       	add	r20, r20
    104c:	55 1f       	adc	r21, r21
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <nRF24L01_begin+0x88>
    1052:	24 2f       	mov	r18, r20
    1054:	20 95       	com	r18
    1056:	23 23       	and	r18, r19
    1058:	20 83       	st	Z, r18
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
    105a:	16 96       	adiw	r26, 0x06	; 6
    105c:	ed 91       	ld	r30, X+
    105e:	fc 91       	ld	r31, X
    1060:	17 97       	sbiw	r26, 0x07	; 7
    1062:	42 91       	ld	r20, -Z
    1064:	9c 01       	movw	r18, r24
    1066:	18 96       	adiw	r26, 0x08	; 8
    1068:	0c 90       	ld	r0, X
    106a:	18 97       	sbiw	r26, 0x08	; 8
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <nRF24L01_begin+0xb0>
    106e:	22 0f       	add	r18, r18
    1070:	33 1f       	adc	r19, r19
    1072:	0a 94       	dec	r0
    1074:	e2 f7       	brpl	.-8      	; 0x106e <nRF24L01_begin+0xac>
    1076:	24 2b       	or	r18, r20
    1078:	20 83       	st	Z, r18
    107a:	19 96       	adiw	r26, 0x09	; 9
    107c:	ed 91       	ld	r30, X+
    107e:	fc 91       	ld	r31, X
    1080:	1a 97       	sbiw	r26, 0x0a	; 10
    1082:	42 91       	ld	r20, -Z
    1084:	9c 01       	movw	r18, r24
    1086:	1b 96       	adiw	r26, 0x0b	; 11
    1088:	0c 90       	ld	r0, X
    108a:	1b 97       	sbiw	r26, 0x0b	; 11
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <nRF24L01_begin+0xd0>
    108e:	22 0f       	add	r18, r18
    1090:	33 1f       	adc	r19, r19
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <nRF24L01_begin+0xcc>
    1096:	24 2b       	or	r18, r20
    1098:	20 83       	st	Z, r18
}

inline static void set_as_input(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
    109a:	1c 96       	adiw	r26, 0x0c	; 12
    109c:	ed 91       	ld	r30, X+
    109e:	fc 91       	ld	r31, X
    10a0:	1d 97       	sbiw	r26, 0x0d	; 13
    10a2:	22 91       	ld	r18, -Z
    10a4:	1e 96       	adiw	r26, 0x0e	; 14
    10a6:	0c 90       	ld	r0, X
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <nRF24L01_begin+0xec>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <nRF24L01_begin+0xe8>
    10b2:	80 95       	com	r24
    10b4:	82 23       	and	r24, r18
    10b6:	80 83       	st	Z, r24
	// MISO pin automatically overrides to input
	set_as_output(rf->sck);
	set_as_output(rf->mosi);
	set_as_input(rf->miso);
	
	if(!((SPCR >> MSTR)&0x01)) SPI_init();
    10b8:	0c b4       	in	r0, 0x2c	; 44
    10ba:	04 fe       	sbrs	r0, 4
    10bc:	0e 94 c9 08 	call	0x1192	; 0x1192 <SPI_init>

    nRF24L01_send_command(rf, FLUSH_RX, NULL, 0);
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	50 e0       	ldi	r21, 0x00	; 0
    10c8:	62 ee       	ldi	r22, 0xE2	; 226
    10ca:	c8 01       	movw	r24, r16
    10cc:	0e 94 80 07 	call	0xf00	; 0xf00 <nRF24L01_send_command>
    nRF24L01_send_command(rf, FLUSH_TX, NULL, 0);
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e0       	ldi	r20, 0x00	; 0
    10d6:	50 e0       	ldi	r21, 0x00	; 0
    10d8:	61 ee       	ldi	r22, 0xE1	; 225
    10da:	c8 01       	movw	r24, r16
    10dc:	0e 94 80 07 	call	0xf00	; 0xf00 <nRF24L01_send_command>
    nRF24L01_clear_interrupts(rf);
    10e0:	c8 01       	movw	r24, r16
    10e2:	0e 94 ce 07 	call	0xf9c	; 0xf9c <nRF24L01_clear_interrupts>

    uint8_t data;
    data = _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | _BV(PRIM_RX);
    10e6:	8f e0       	ldi	r24, 0x0F	; 15
    10e8:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, CONFIG, &data, 1);
    10ea:	21 e0       	ldi	r18, 0x01	; 1
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	ae 01       	movw	r20, r28
    10f0:	4f 5f       	subi	r20, 0xFF	; 255
    10f2:	5f 4f       	sbci	r21, 0xFF	; 255
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	c8 01       	movw	r24, r16
    10f8:	0e 94 ca 07 	call	0xf94	; 0xf94 <nRF24L01_write_register>

    // enable Auto Acknowlegde on all pipes
    data = _BV(ENAA_P0) | _BV(ENAA_P1) | _BV(ENAA_P2)
    10fc:	0f 2e       	mov	r0, r31
    10fe:	ff e3       	ldi	r31, 0x3F	; 63
    1100:	ff 2e       	mov	r15, r31
    1102:	f0 2d       	mov	r31, r0
    1104:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(ENAA_P3) | _BV(ENAA_P4) | _BV(ENAA_P5);
    nRF24L01_write_register(rf, EN_AA, &data, 1);
    1106:	21 e0       	ldi	r18, 0x01	; 1
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	ae 01       	movw	r20, r28
    110c:	4f 5f       	subi	r20, 0xFF	; 255
    110e:	5f 4f       	sbci	r21, 0xFF	; 255
    1110:	61 e0       	ldi	r22, 0x01	; 1
    1112:	c8 01       	movw	r24, r16
    1114:	0e 94 ca 07 	call	0xf94	; 0xf94 <nRF24L01_write_register>
	
	//set to low power: 0x09
	data = 0x09;
    1118:	89 e0       	ldi	r24, 0x09	; 9
    111a:	89 83       	std	Y+1, r24	; 0x01
	nRF24L01_write_register(rf, RF_SETUP, &data, 1);
    111c:	21 e0       	ldi	r18, 0x01	; 1
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	ae 01       	movw	r20, r28
    1122:	4f 5f       	subi	r20, 0xFF	; 255
    1124:	5f 4f       	sbci	r21, 0xFF	; 255
    1126:	66 e0       	ldi	r22, 0x06	; 6
    1128:	c8 01       	movw	r24, r16
    112a:	0e 94 ca 07 	call	0xf94	; 0xf94 <nRF24L01_write_register>
	
	//Change channel to 0x60
	data = 0x60;
    112e:	80 e6       	ldi	r24, 0x60	; 96
    1130:	89 83       	std	Y+1, r24	; 0x01
	nRF24L01_write_register(rf, RF_CH, &data, 1);
    1132:	21 e0       	ldi	r18, 0x01	; 1
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	ae 01       	movw	r20, r28
    1138:	4f 5f       	subi	r20, 0xFF	; 255
    113a:	5f 4f       	sbci	r21, 0xFF	; 255
    113c:	65 e0       	ldi	r22, 0x05	; 5
    113e:	c8 01       	movw	r24, r16
    1140:	0e 94 ca 07 	call	0xf94	; 0xf94 <nRF24L01_write_register>

    // enable Dynamic Payload on all pipes
    data = _BV(DPL_P0) | _BV(DPL_P1) | _BV(DPL_P2)
    1144:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(DPL_P3) | _BV(DPL_P4) | _BV(DPL_P5);
    nRF24L01_write_register(rf, DYNPD, &data, 1);
    1146:	21 e0       	ldi	r18, 0x01	; 1
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	ae 01       	movw	r20, r28
    114c:	4f 5f       	subi	r20, 0xFF	; 255
    114e:	5f 4f       	sbci	r21, 0xFF	; 255
    1150:	6c e1       	ldi	r22, 0x1C	; 28
    1152:	c8 01       	movw	r24, r16
    1154:	0e 94 ca 07 	call	0xf94	; 0xf94 <nRF24L01_write_register>

    // enable Dynamic Payload (global)
    data = _BV(EN_DPL);
    1158:	84 e0       	ldi	r24, 0x04	; 4
    115a:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, FEATURE, &data, 1);
    115c:	21 e0       	ldi	r18, 0x01	; 1
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	ae 01       	movw	r20, r28
    1162:	4f 5f       	subi	r20, 0xFF	; 255
    1164:	5f 4f       	sbci	r21, 0xFF	; 255
    1166:	6d e1       	ldi	r22, 0x1D	; 29
    1168:	c8 01       	movw	r24, r16
    116a:	0e 94 ca 07 	call	0xf94	; 0xf94 <nRF24L01_write_register>

    // disable all rx addresses except pipe 1
    data = 0x01;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, EN_RXADDR, &data, 1);
    1172:	21 e0       	ldi	r18, 0x01	; 1
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	ae 01       	movw	r20, r28
    1178:	4f 5f       	subi	r20, 0xFF	; 255
    117a:	5f 4f       	sbci	r21, 0xFF	; 255
    117c:	62 e0       	ldi	r22, 0x02	; 2
    117e:	c8 01       	movw	r24, r16
    1180:	0e 94 ca 07 	call	0xf94	; 0xf94 <nRF24L01_write_register>
}
    1184:	0f 90       	pop	r0
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	1f 91       	pop	r17
    118c:	0f 91       	pop	r16
    118e:	ff 90       	pop	r15
    1190:	08 95       	ret

00001192 <SPI_init>:

#include "SPI.h"

void SPI_init(void){
	// set as master
	SPCR |= _BV(MSTR);
    1192:	8c b5       	in	r24, 0x2c	; 44
    1194:	80 61       	ori	r24, 0x10	; 16
    1196:	8c bd       	out	0x2c, r24	; 44
	// enable SPI
	SPCR |= _BV(SPE);
    1198:	8c b5       	in	r24, 0x2c	; 44
    119a:	80 64       	ori	r24, 0x40	; 64
    119c:	8c bd       	out	0x2c, r24	; 44
	// SPI mode 0: Clock Polarity CPOL = 0, Clock Phase CPHA = 0
	SPCR &= ~_BV(CPOL);
    119e:	8c b5       	in	r24, 0x2c	; 44
    11a0:	87 7f       	andi	r24, 0xF7	; 247
    11a2:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~_BV(CPHA);
    11a4:	8c b5       	in	r24, 0x2c	; 44
    11a6:	8b 7f       	andi	r24, 0xFB	; 251
    11a8:	8c bd       	out	0x2c, r24	; 44
	// Clock 2X speed
	//SPCR &= ~_BV(SPR0);
	SPCR |=_BV(SPR0);
    11aa:	8c b5       	in	r24, 0x2c	; 44
    11ac:	81 60       	ori	r24, 0x01	; 1
    11ae:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~_BV(SPR1);
    11b0:	8c b5       	in	r24, 0x2c	; 44
    11b2:	8d 7f       	andi	r24, 0xFD	; 253
    11b4:	8c bd       	out	0x2c, r24	; 44
	//SPSR |= _BV(SPI2X);
	SPSR &= ~_BV(SPI2X);
    11b6:	8d b5       	in	r24, 0x2d	; 45
    11b8:	8e 7f       	andi	r24, 0xFE	; 254
    11ba:	8d bd       	out	0x2d, r24	; 45
	// most significant first (MSB)
	SPCR &= ~_BV(DORD);
    11bc:	8c b5       	in	r24, 0x2c	; 44
    11be:	8f 7d       	andi	r24, 0xDF	; 223
    11c0:	8c bd       	out	0x2c, r24	; 44
    11c2:	08 95       	ret

000011c4 <SPI_tradeByte>:
}

uint8_t SPI_tradeByte(uint8_t byte) {
	SPDR = byte;                       /* SPI starts sending immediately */
    11c4:	8e bd       	out	0x2e, r24	; 46
	//loop_until_bit_is_set(SPSR, SPIF);                /* wait until done */
	while (!(SPSR & _BV(SPIF)));
    11c6:	0d b4       	in	r0, 0x2d	; 45
    11c8:	07 fe       	sbrs	r0, 7
    11ca:	fd cf       	rjmp	.-6      	; 0x11c6 <SPI_tradeByte+0x2>
	/* SPDR now contains the received byte */
	return SPDR;
    11cc:	8e b5       	in	r24, 0x2e	; 46
    11ce:	08 95       	ret

000011d0 <initUSART>:
    if (bit_is_set(byte, bit))
      transmitByte('1');
    else
      transmitByte('0');
  }
}
    11d0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    11d4:	83 e3       	ldi	r24, 0x33	; 51
    11d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    11da:	e0 ec       	ldi	r30, 0xC0	; 192
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	8d 7f       	andi	r24, 0xFD	; 253
    11e2:	80 83       	st	Z, r24
    11e4:	88 e1       	ldi	r24, 0x18	; 24
    11e6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    11ea:	86 e0       	ldi	r24, 0x06	; 6
    11ec:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    11f0:	08 95       	ret

000011f2 <transmitByte>:
    11f2:	e0 ec       	ldi	r30, 0xC0	; 192
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	90 81       	ld	r25, Z
    11f8:	95 ff       	sbrs	r25, 5
    11fa:	fd cf       	rjmp	.-6      	; 0x11f6 <transmitByte+0x4>
    11fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1200:	08 95       	ret

00001202 <printString>:
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	cf 93       	push	r28
    1208:	fc 01       	movw	r30, r24
    120a:	80 81       	ld	r24, Z
    120c:	88 23       	and	r24, r24
    120e:	59 f0       	breq	.+22     	; 0x1226 <printString+0x24>
    1210:	8f 01       	movw	r16, r30
    1212:	c0 e0       	ldi	r28, 0x00	; 0
    1214:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
    1218:	cf 5f       	subi	r28, 0xFF	; 255
    121a:	f8 01       	movw	r30, r16
    121c:	ec 0f       	add	r30, r28
    121e:	f1 1d       	adc	r31, r1
    1220:	80 81       	ld	r24, Z
    1222:	81 11       	cpse	r24, r1
    1224:	f7 cf       	rjmp	.-18     	; 0x1214 <printString+0x12>
    1226:	cf 91       	pop	r28
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	08 95       	ret

0000122e <nibbleToHexCharacter>:

char nibbleToHexCharacter(uint8_t nibble) {
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
    122e:	8a 30       	cpi	r24, 0x0A	; 10
    1230:	10 f4       	brcc	.+4      	; 0x1236 <nibbleToHexCharacter+0x8>
    return ('0' + nibble);
    1232:	80 5d       	subi	r24, 0xD0	; 208
    1234:	08 95       	ret
  }
  else {
    return ('A' + nibble - 10);
    1236:	89 5c       	subi	r24, 0xC9	; 201
  }
}
    1238:	08 95       	ret

0000123a <printHexByte>:

void printHexByte(uint8_t byte) {
    123a:	cf 93       	push	r28
    123c:	c8 2f       	mov	r28, r24
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
  transmitByte(nibbleToHexCharacter(nibble));
    123e:	82 95       	swap	r24
    1240:	8f 70       	andi	r24, 0x0F	; 15
    1242:	0e 94 17 09 	call	0x122e	; 0x122e <nibbleToHexCharacter>
    1246:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
  nibble = byte & 0b00001111;
  transmitByte(nibbleToHexCharacter(nibble));
    124a:	8c 2f       	mov	r24, r28
    124c:	8f 70       	andi	r24, 0x0F	; 15
    124e:	0e 94 17 09 	call	0x122e	; 0x122e <nibbleToHexCharacter>
    1252:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <transmitByte>
}
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret

0000125a <printHexWord>:
	  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
	  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
	  transmitByte('0' + (word % 10));                             /* Ones */
}

void printHexWord(uint16_t word){
    125a:	cf 93       	push	r28
    125c:	c8 2f       	mov	r28, r24
	printHexByte(word>>8);
    125e:	89 2f       	mov	r24, r25
    1260:	0e 94 1d 09 	call	0x123a	; 0x123a <printHexByte>
	printHexByte(word & ~(0xff<<8));
    1264:	8c 2f       	mov	r24, r28
    1266:	0e 94 1d 09 	call	0x123a	; 0x123a <printHexByte>
	printString("H");
    126a:	82 e8       	ldi	r24, 0x82	; 130
    126c:	92 e0       	ldi	r25, 0x02	; 2
    126e:	0e 94 01 09 	call	0x1202	; 0x1202 <printString>
	
}
    1272:	cf 91       	pop	r28
    1274:	08 95       	ret

00001276 <__divmodhi4>:
    1276:	97 fb       	bst	r25, 7
    1278:	07 2e       	mov	r0, r23
    127a:	16 f4       	brtc	.+4      	; 0x1280 <__divmodhi4+0xa>
    127c:	00 94       	com	r0
    127e:	07 d0       	rcall	.+14     	; 0x128e <__divmodhi4_neg1>
    1280:	77 fd       	sbrc	r23, 7
    1282:	09 d0       	rcall	.+18     	; 0x1296 <__divmodhi4_neg2>
    1284:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__udivmodhi4>
    1288:	07 fc       	sbrc	r0, 7
    128a:	05 d0       	rcall	.+10     	; 0x1296 <__divmodhi4_neg2>
    128c:	3e f4       	brtc	.+14     	; 0x129c <__divmodhi4_exit>

0000128e <__divmodhi4_neg1>:
    128e:	90 95       	com	r25
    1290:	81 95       	neg	r24
    1292:	9f 4f       	sbci	r25, 0xFF	; 255
    1294:	08 95       	ret

00001296 <__divmodhi4_neg2>:
    1296:	70 95       	com	r23
    1298:	61 95       	neg	r22
    129a:	7f 4f       	sbci	r23, 0xFF	; 255

0000129c <__divmodhi4_exit>:
    129c:	08 95       	ret

0000129e <__umulhisi3>:
    129e:	a2 9f       	mul	r26, r18
    12a0:	b0 01       	movw	r22, r0
    12a2:	b3 9f       	mul	r27, r19
    12a4:	c0 01       	movw	r24, r0
    12a6:	a3 9f       	mul	r26, r19
    12a8:	70 0d       	add	r23, r0
    12aa:	81 1d       	adc	r24, r1
    12ac:	11 24       	eor	r1, r1
    12ae:	91 1d       	adc	r25, r1
    12b0:	b2 9f       	mul	r27, r18
    12b2:	70 0d       	add	r23, r0
    12b4:	81 1d       	adc	r24, r1
    12b6:	11 24       	eor	r1, r1
    12b8:	91 1d       	adc	r25, r1
    12ba:	08 95       	ret

000012bc <__udivmodhi4>:
    12bc:	aa 1b       	sub	r26, r26
    12be:	bb 1b       	sub	r27, r27
    12c0:	51 e1       	ldi	r21, 0x11	; 17
    12c2:	07 c0       	rjmp	.+14     	; 0x12d2 <__udivmodhi4_ep>

000012c4 <__udivmodhi4_loop>:
    12c4:	aa 1f       	adc	r26, r26
    12c6:	bb 1f       	adc	r27, r27
    12c8:	a6 17       	cp	r26, r22
    12ca:	b7 07       	cpc	r27, r23
    12cc:	10 f0       	brcs	.+4      	; 0x12d2 <__udivmodhi4_ep>
    12ce:	a6 1b       	sub	r26, r22
    12d0:	b7 0b       	sbc	r27, r23

000012d2 <__udivmodhi4_ep>:
    12d2:	88 1f       	adc	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	5a 95       	dec	r21
    12d8:	a9 f7       	brne	.-22     	; 0x12c4 <__udivmodhi4_loop>
    12da:	80 95       	com	r24
    12dc:	90 95       	com	r25
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	08 95       	ret

000012e4 <malloc>:
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	82 30       	cpi	r24, 0x02	; 2
    12ee:	91 05       	cpc	r25, r1
    12f0:	10 f4       	brcc	.+4      	; 0x12f6 <malloc+0x12>
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <__flp>
    12fa:	f0 91 89 02 	lds	r31, 0x0289	; 0x800289 <__flp+0x1>
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	a0 e0       	ldi	r26, 0x00	; 0
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	30 97       	sbiw	r30, 0x00	; 0
    1308:	19 f1       	breq	.+70     	; 0x1350 <malloc+0x6c>
    130a:	40 81       	ld	r20, Z
    130c:	51 81       	ldd	r21, Z+1	; 0x01
    130e:	02 81       	ldd	r16, Z+2	; 0x02
    1310:	13 81       	ldd	r17, Z+3	; 0x03
    1312:	48 17       	cp	r20, r24
    1314:	59 07       	cpc	r21, r25
    1316:	c8 f0       	brcs	.+50     	; 0x134a <malloc+0x66>
    1318:	84 17       	cp	r24, r20
    131a:	95 07       	cpc	r25, r21
    131c:	69 f4       	brne	.+26     	; 0x1338 <malloc+0x54>
    131e:	10 97       	sbiw	r26, 0x00	; 0
    1320:	31 f0       	breq	.+12     	; 0x132e <malloc+0x4a>
    1322:	12 96       	adiw	r26, 0x02	; 2
    1324:	0c 93       	st	X, r16
    1326:	12 97       	sbiw	r26, 0x02	; 2
    1328:	13 96       	adiw	r26, 0x03	; 3
    132a:	1c 93       	st	X, r17
    132c:	27 c0       	rjmp	.+78     	; 0x137c <malloc+0x98>
    132e:	00 93 88 02 	sts	0x0288, r16	; 0x800288 <__flp>
    1332:	10 93 89 02 	sts	0x0289, r17	; 0x800289 <__flp+0x1>
    1336:	22 c0       	rjmp	.+68     	; 0x137c <malloc+0x98>
    1338:	21 15       	cp	r18, r1
    133a:	31 05       	cpc	r19, r1
    133c:	19 f0       	breq	.+6      	; 0x1344 <malloc+0x60>
    133e:	42 17       	cp	r20, r18
    1340:	53 07       	cpc	r21, r19
    1342:	18 f4       	brcc	.+6      	; 0x134a <malloc+0x66>
    1344:	9a 01       	movw	r18, r20
    1346:	bd 01       	movw	r22, r26
    1348:	ef 01       	movw	r28, r30
    134a:	df 01       	movw	r26, r30
    134c:	f8 01       	movw	r30, r16
    134e:	db cf       	rjmp	.-74     	; 0x1306 <malloc+0x22>
    1350:	21 15       	cp	r18, r1
    1352:	31 05       	cpc	r19, r1
    1354:	f9 f0       	breq	.+62     	; 0x1394 <malloc+0xb0>
    1356:	28 1b       	sub	r18, r24
    1358:	39 0b       	sbc	r19, r25
    135a:	24 30       	cpi	r18, 0x04	; 4
    135c:	31 05       	cpc	r19, r1
    135e:	80 f4       	brcc	.+32     	; 0x1380 <malloc+0x9c>
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	9b 81       	ldd	r25, Y+3	; 0x03
    1364:	61 15       	cp	r22, r1
    1366:	71 05       	cpc	r23, r1
    1368:	21 f0       	breq	.+8      	; 0x1372 <malloc+0x8e>
    136a:	fb 01       	movw	r30, r22
    136c:	93 83       	std	Z+3, r25	; 0x03
    136e:	82 83       	std	Z+2, r24	; 0x02
    1370:	04 c0       	rjmp	.+8      	; 0x137a <malloc+0x96>
    1372:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <__flp+0x1>
    1376:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <__flp>
    137a:	fe 01       	movw	r30, r28
    137c:	32 96       	adiw	r30, 0x02	; 2
    137e:	44 c0       	rjmp	.+136    	; 0x1408 <malloc+0x124>
    1380:	fe 01       	movw	r30, r28
    1382:	e2 0f       	add	r30, r18
    1384:	f3 1f       	adc	r31, r19
    1386:	81 93       	st	Z+, r24
    1388:	91 93       	st	Z+, r25
    138a:	22 50       	subi	r18, 0x02	; 2
    138c:	31 09       	sbc	r19, r1
    138e:	39 83       	std	Y+1, r19	; 0x01
    1390:	28 83       	st	Y, r18
    1392:	3a c0       	rjmp	.+116    	; 0x1408 <malloc+0x124>
    1394:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <__brkval>
    1398:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <__brkval+0x1>
    139c:	23 2b       	or	r18, r19
    139e:	41 f4       	brne	.+16     	; 0x13b0 <malloc+0xcc>
    13a0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    13a4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    13a8:	30 93 87 02 	sts	0x0287, r19	; 0x800287 <__brkval+0x1>
    13ac:	20 93 86 02 	sts	0x0286, r18	; 0x800286 <__brkval>
    13b0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    13b4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    13b8:	21 15       	cp	r18, r1
    13ba:	31 05       	cpc	r19, r1
    13bc:	41 f4       	brne	.+16     	; 0x13ce <malloc+0xea>
    13be:	2d b7       	in	r18, 0x3d	; 61
    13c0:	3e b7       	in	r19, 0x3e	; 62
    13c2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    13c6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    13ca:	24 1b       	sub	r18, r20
    13cc:	35 0b       	sbc	r19, r21
    13ce:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <__brkval>
    13d2:	f0 91 87 02 	lds	r31, 0x0287	; 0x800287 <__brkval+0x1>
    13d6:	e2 17       	cp	r30, r18
    13d8:	f3 07       	cpc	r31, r19
    13da:	a0 f4       	brcc	.+40     	; 0x1404 <malloc+0x120>
    13dc:	2e 1b       	sub	r18, r30
    13de:	3f 0b       	sbc	r19, r31
    13e0:	28 17       	cp	r18, r24
    13e2:	39 07       	cpc	r19, r25
    13e4:	78 f0       	brcs	.+30     	; 0x1404 <malloc+0x120>
    13e6:	ac 01       	movw	r20, r24
    13e8:	4e 5f       	subi	r20, 0xFE	; 254
    13ea:	5f 4f       	sbci	r21, 0xFF	; 255
    13ec:	24 17       	cp	r18, r20
    13ee:	35 07       	cpc	r19, r21
    13f0:	48 f0       	brcs	.+18     	; 0x1404 <malloc+0x120>
    13f2:	4e 0f       	add	r20, r30
    13f4:	5f 1f       	adc	r21, r31
    13f6:	50 93 87 02 	sts	0x0287, r21	; 0x800287 <__brkval+0x1>
    13fa:	40 93 86 02 	sts	0x0286, r20	; 0x800286 <__brkval>
    13fe:	81 93       	st	Z+, r24
    1400:	91 93       	st	Z+, r25
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <malloc+0x124>
    1404:	e0 e0       	ldi	r30, 0x00	; 0
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	cf 01       	movw	r24, r30
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	1f 91       	pop	r17
    1410:	0f 91       	pop	r16
    1412:	08 95       	ret

00001414 <free>:
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	09 f4       	brne	.+2      	; 0x141e <free+0xa>
    141c:	81 c0       	rjmp	.+258    	; 0x1520 <free+0x10c>
    141e:	fc 01       	movw	r30, r24
    1420:	32 97       	sbiw	r30, 0x02	; 2
    1422:	13 82       	std	Z+3, r1	; 0x03
    1424:	12 82       	std	Z+2, r1	; 0x02
    1426:	a0 91 88 02 	lds	r26, 0x0288	; 0x800288 <__flp>
    142a:	b0 91 89 02 	lds	r27, 0x0289	; 0x800289 <__flp+0x1>
    142e:	10 97       	sbiw	r26, 0x00	; 0
    1430:	81 f4       	brne	.+32     	; 0x1452 <free+0x3e>
    1432:	20 81       	ld	r18, Z
    1434:	31 81       	ldd	r19, Z+1	; 0x01
    1436:	82 0f       	add	r24, r18
    1438:	93 1f       	adc	r25, r19
    143a:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <__brkval>
    143e:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <__brkval+0x1>
    1442:	28 17       	cp	r18, r24
    1444:	39 07       	cpc	r19, r25
    1446:	51 f5       	brne	.+84     	; 0x149c <free+0x88>
    1448:	f0 93 87 02 	sts	0x0287, r31	; 0x800287 <__brkval+0x1>
    144c:	e0 93 86 02 	sts	0x0286, r30	; 0x800286 <__brkval>
    1450:	67 c0       	rjmp	.+206    	; 0x1520 <free+0x10c>
    1452:	ed 01       	movw	r28, r26
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	ce 17       	cp	r28, r30
    145a:	df 07       	cpc	r29, r31
    145c:	40 f4       	brcc	.+16     	; 0x146e <free+0x5a>
    145e:	4a 81       	ldd	r20, Y+2	; 0x02
    1460:	5b 81       	ldd	r21, Y+3	; 0x03
    1462:	9e 01       	movw	r18, r28
    1464:	41 15       	cp	r20, r1
    1466:	51 05       	cpc	r21, r1
    1468:	f1 f0       	breq	.+60     	; 0x14a6 <free+0x92>
    146a:	ea 01       	movw	r28, r20
    146c:	f5 cf       	rjmp	.-22     	; 0x1458 <free+0x44>
    146e:	d3 83       	std	Z+3, r29	; 0x03
    1470:	c2 83       	std	Z+2, r28	; 0x02
    1472:	40 81       	ld	r20, Z
    1474:	51 81       	ldd	r21, Z+1	; 0x01
    1476:	84 0f       	add	r24, r20
    1478:	95 1f       	adc	r25, r21
    147a:	c8 17       	cp	r28, r24
    147c:	d9 07       	cpc	r29, r25
    147e:	59 f4       	brne	.+22     	; 0x1496 <free+0x82>
    1480:	88 81       	ld	r24, Y
    1482:	99 81       	ldd	r25, Y+1	; 0x01
    1484:	84 0f       	add	r24, r20
    1486:	95 1f       	adc	r25, r21
    1488:	02 96       	adiw	r24, 0x02	; 2
    148a:	91 83       	std	Z+1, r25	; 0x01
    148c:	80 83       	st	Z, r24
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	9b 81       	ldd	r25, Y+3	; 0x03
    1492:	93 83       	std	Z+3, r25	; 0x03
    1494:	82 83       	std	Z+2, r24	; 0x02
    1496:	21 15       	cp	r18, r1
    1498:	31 05       	cpc	r19, r1
    149a:	29 f4       	brne	.+10     	; 0x14a6 <free+0x92>
    149c:	f0 93 89 02 	sts	0x0289, r31	; 0x800289 <__flp+0x1>
    14a0:	e0 93 88 02 	sts	0x0288, r30	; 0x800288 <__flp>
    14a4:	3d c0       	rjmp	.+122    	; 0x1520 <free+0x10c>
    14a6:	e9 01       	movw	r28, r18
    14a8:	fb 83       	std	Y+3, r31	; 0x03
    14aa:	ea 83       	std	Y+2, r30	; 0x02
    14ac:	49 91       	ld	r20, Y+
    14ae:	59 91       	ld	r21, Y+
    14b0:	c4 0f       	add	r28, r20
    14b2:	d5 1f       	adc	r29, r21
    14b4:	ec 17       	cp	r30, r28
    14b6:	fd 07       	cpc	r31, r29
    14b8:	61 f4       	brne	.+24     	; 0x14d2 <free+0xbe>
    14ba:	80 81       	ld	r24, Z
    14bc:	91 81       	ldd	r25, Z+1	; 0x01
    14be:	84 0f       	add	r24, r20
    14c0:	95 1f       	adc	r25, r21
    14c2:	02 96       	adiw	r24, 0x02	; 2
    14c4:	e9 01       	movw	r28, r18
    14c6:	99 83       	std	Y+1, r25	; 0x01
    14c8:	88 83       	st	Y, r24
    14ca:	82 81       	ldd	r24, Z+2	; 0x02
    14cc:	93 81       	ldd	r25, Z+3	; 0x03
    14ce:	9b 83       	std	Y+3, r25	; 0x03
    14d0:	8a 83       	std	Y+2, r24	; 0x02
    14d2:	e0 e0       	ldi	r30, 0x00	; 0
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	12 96       	adiw	r26, 0x02	; 2
    14d8:	8d 91       	ld	r24, X+
    14da:	9c 91       	ld	r25, X
    14dc:	13 97       	sbiw	r26, 0x03	; 3
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	19 f0       	breq	.+6      	; 0x14e8 <free+0xd4>
    14e2:	fd 01       	movw	r30, r26
    14e4:	dc 01       	movw	r26, r24
    14e6:	f7 cf       	rjmp	.-18     	; 0x14d6 <free+0xc2>
    14e8:	8d 91       	ld	r24, X+
    14ea:	9c 91       	ld	r25, X
    14ec:	11 97       	sbiw	r26, 0x01	; 1
    14ee:	9d 01       	movw	r18, r26
    14f0:	2e 5f       	subi	r18, 0xFE	; 254
    14f2:	3f 4f       	sbci	r19, 0xFF	; 255
    14f4:	82 0f       	add	r24, r18
    14f6:	93 1f       	adc	r25, r19
    14f8:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <__brkval>
    14fc:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <__brkval+0x1>
    1500:	28 17       	cp	r18, r24
    1502:	39 07       	cpc	r19, r25
    1504:	69 f4       	brne	.+26     	; 0x1520 <free+0x10c>
    1506:	30 97       	sbiw	r30, 0x00	; 0
    1508:	29 f4       	brne	.+10     	; 0x1514 <free+0x100>
    150a:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <__flp+0x1>
    150e:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <__flp>
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <free+0x104>
    1514:	13 82       	std	Z+3, r1	; 0x03
    1516:	12 82       	std	Z+2, r1	; 0x02
    1518:	b0 93 87 02 	sts	0x0287, r27	; 0x800287 <__brkval+0x1>
    151c:	a0 93 86 02 	sts	0x0286, r26	; 0x800286 <__brkval>
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	08 95       	ret

00001526 <_exit>:
    1526:	f8 94       	cli

00001528 <__stop_program>:
    1528:	ff cf       	rjmp	.-2      	; 0x1528 <__stop_program>
