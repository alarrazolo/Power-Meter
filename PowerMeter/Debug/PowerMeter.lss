
PowerMeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000186  00800100  0000133a  000013ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000133a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800286  00800286  00001554  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001584  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036f3  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db9  00000000  00000000  00004f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001584  00000000  00000000  00005d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000768  00000000  00000000  0000728c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009c3  00000000  00000000  000079f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cf6  00000000  00000000  000083b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  0000a0ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e3       	ldi	r30, 0x3A	; 58
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 38       	cpi	r26, 0x86	; 134
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a6 e8       	ldi	r26, 0x86	; 134
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 38       	cpi	r26, 0x8C	; 140
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <main>
      9e:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initI2C>:
      a6:	80 e2       	ldi	r24, 0x20	; 32
      a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
      ac:	ec eb       	ldi	r30, 0xBC	; 188
      ae:	f0 e0       	ldi	r31, 0x00	; 0
      b0:	80 81       	ld	r24, Z
      b2:	84 60       	ori	r24, 0x04	; 4
      b4:	80 83       	st	Z, r24
      b6:	08 95       	ret

000000b8 <get_pIC_RegValue>:
	//set_pIC_RegValue(CalStart, 0x5678);
	//set_pIC_RegValue(AdjStart, 0x5678);
}


uint16_t get_pIC_RegValue(uint8_t pICRegister){
      b8:	cf 93       	push	r28
	
	//send AND read Byte with register address Byte to read back 16 bit value.
	
	PORTB &= ~(1<<0); // set chip select bit low to initiate SPI communication. 
      ba:	28 98       	cbi	0x05, 0	; 5
	SPI_tradeByte(ReadRegPower | pICRegister); // AND read Byte with register address and send it over SPI
      bc:	80 68       	ori	r24, 0x80	; 128
      be:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <SPI_tradeByte>
	uint8_t highByte = SPI_tradeByte(0); // Read MSD Byte first.
      c2:	80 e0       	ldi	r24, 0x00	; 0
      c4:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <SPI_tradeByte>
      c8:	c8 2f       	mov	r28, r24
	uint8_t lowByte = SPI_tradeByte(0); // Read LSD Byte second.
      ca:	80 e0       	ldi	r24, 0x00	; 0
      cc:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <SPI_tradeByte>
	PORTB |= (1<<0); // set chip select bit high to terminate SPI communication.
      d0:	28 9a       	sbi	0x05, 0	; 5
	uint16_t full16Byte = (highByte << 8) | lowByte; // Combine MSB and LSB together into 16 bit Byte.
	return full16Byte; // return Byte to function call. 
      d2:	2c 2f       	mov	r18, r28
      d4:	30 e0       	ldi	r19, 0x00	; 0
      d6:	32 2f       	mov	r19, r18
      d8:	22 27       	eor	r18, r18
	
	//printHexByte(pIC_d1bitHigh);
	//printHexByte(pIC_d1bitLow);
	//printString("H\r\n");
	
}
      da:	a9 01       	movw	r20, r18
      dc:	48 2b       	or	r20, r24
      de:	ca 01       	movw	r24, r20
      e0:	cf 91       	pop	r28
      e2:	08 95       	ret

000000e4 <set_pIC_RegValue>:

void set_pIC_RegValue(uint8_t pICRegister, uint16_t byte){
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
      e8:	c6 2f       	mov	r28, r22
      ea:	d7 2f       	mov	r29, r23
	
	//send AND write Byte with register Byte to write 16 bit value into register.
	
	PORTB &= ~(1<<0); // set chip select bit low to initiate SPI communication. 
      ec:	28 98       	cbi	0x05, 0	; 5
	SPI_tradeByte(WriteRegPower | pICRegister); // AND write Byte with register address and send it over SPI.
      ee:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <SPI_tradeByte>
	uint8_t highByte = (byte>>8);
	uint8_t lowByte = byte & ~(0xff<<8);
	SPI_tradeByte(highByte); // Write MSD Byte first.
      f2:	8d 2f       	mov	r24, r29
      f4:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <SPI_tradeByte>
	SPI_tradeByte(lowByte); // Write LSD Byte second.
      f8:	8c 2f       	mov	r24, r28
      fa:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <SPI_tradeByte>
	PORTB |= (1<<0); // set chip select bit high to terminate SPI communication.
      fe:	28 9a       	sbi	0x05, 0	; 5
	//printString(" to value: ");
	//printHexByte(highBit);
	//printHexByte(lowBit);
	//printString("H\r\n");
	
}
     100:	df 91       	pop	r29
     102:	cf 91       	pop	r28
     104:	08 95       	ret

00000106 <pIC_Start>:
	m90E26 *pIC = malloc(sizeof(m90E26));
	memset(pIC, 0, sizeof(m90E26));
	return pIC;
}

void pIC_Start(void){
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
	
	// set chip select port to output.
	DDRB |= (1<<0);
     10a:	20 9a       	sbi	0x04, 0	; 4
	//set chip select on power meter IC high
	PORTB |= (1<<0);
     10c:	28 9a       	sbi	0x05, 0	; 5
	
	if(!((SPCR >> MSTR)&0x01)) SPI_init();
     10e:	0c b4       	in	r0, 0x2c	; 44
     110:	04 fe       	sbrs	r0, 4
     112:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <SPI_init>
	
	set_pIC_RegValue(CalStart, 0x5678);
     116:	68 e7       	ldi	r22, 0x78	; 120
     118:	76 e5       	ldi	r23, 0x56	; 86
     11a:	80 e2       	ldi	r24, 0x20	; 32
     11c:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(PLconstH, 0x0030);
     120:	60 e3       	ldi	r22, 0x30	; 48
     122:	70 e0       	ldi	r23, 0x00	; 0
     124:	81 e2       	ldi	r24, 0x21	; 33
     126:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(PLconstL, 0xB3D3);
     12a:	63 ed       	ldi	r22, 0xD3	; 211
     12c:	73 eb       	ldi	r23, 0xB3	; 179
     12e:	82 e2       	ldi	r24, 0x22	; 34
     130:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(Lgain, 0x0000);
     134:	60 e0       	ldi	r22, 0x00	; 0
     136:	70 e0       	ldi	r23, 0x00	; 0
     138:	83 e2       	ldi	r24, 0x23	; 35
     13a:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(Lphi, 0x0000);
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	84 e2       	ldi	r24, 0x24	; 36
     144:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(Ngain, 0x0000);
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	70 e0       	ldi	r23, 0x00	; 0
     14c:	85 e2       	ldi	r24, 0x25	; 37
     14e:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(Nphi, 0x0000);
     152:	60 e0       	ldi	r22, 0x00	; 0
     154:	70 e0       	ldi	r23, 0x00	; 0
     156:	86 e2       	ldi	r24, 0x26	; 38
     158:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(PStartTh, 0x08BD);
     15c:	6d eb       	ldi	r22, 0xBD	; 189
     15e:	78 e0       	ldi	r23, 0x08	; 8
     160:	87 e2       	ldi	r24, 0x27	; 39
     162:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(PNolTH, 0x0000);
     166:	60 e0       	ldi	r22, 0x00	; 0
     168:	70 e0       	ldi	r23, 0x00	; 0
     16a:	88 e2       	ldi	r24, 0x28	; 40
     16c:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(QStartTh, 0x0AEC);
     170:	6c ee       	ldi	r22, 0xEC	; 236
     172:	7a e0       	ldi	r23, 0x0A	; 10
     174:	89 e2       	ldi	r24, 0x29	; 41
     176:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(QNolTH, 0x0000);
     17a:	60 e0       	ldi	r22, 0x00	; 0
     17c:	70 e0       	ldi	r23, 0x00	; 0
     17e:	8a e2       	ldi	r24, 0x2A	; 42
     180:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(MMode, 0x3422);
     184:	62 e2       	ldi	r22, 0x22	; 34
     186:	74 e3       	ldi	r23, 0x34	; 52
     188:	8b e2       	ldi	r24, 0x2B	; 43
     18a:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	uint16_t calibrationCS1 = get_pIC_RegValue(CS1);
     18e:	8c e2       	ldi	r24, 0x2C	; 44
     190:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
	set_pIC_RegValue(CS1, calibrationCS1);
     194:	bc 01       	movw	r22, r24
     196:	8c e2       	ldi	r24, 0x2C	; 44
     198:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(CalStart, 0x8765);
     19c:	65 e6       	ldi	r22, 0x65	; 101
     19e:	77 e8       	ldi	r23, 0x87	; 135
     1a0:	80 e2       	ldi	r24, 0x20	; 32
     1a2:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	
	
	
	set_pIC_RegValue(AdjStart, 0x5678);
     1a6:	68 e7       	ldi	r22, 0x78	; 120
     1a8:	76 e5       	ldi	r23, 0x56	; 86
     1aa:	80 e3       	ldi	r24, 0x30	; 48
     1ac:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	
	set_pIC_RegValue(Ugain, 0x8561);
     1b0:	61 e6       	ldi	r22, 0x61	; 97
     1b2:	75 e8       	ldi	r23, 0x85	; 133
     1b4:	81 e3       	ldi	r24, 0x31	; 49
     1b6:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(IgainL, 0x3D1C);
     1ba:	6c e1       	ldi	r22, 0x1C	; 28
     1bc:	7d e3       	ldi	r23, 0x3D	; 61
     1be:	82 e3       	ldi	r24, 0x32	; 50
     1c0:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(IgainN, 0x7530);
     1c4:	60 e3       	ldi	r22, 0x30	; 48
     1c6:	75 e7       	ldi	r23, 0x75	; 117
     1c8:	83 e3       	ldi	r24, 0x33	; 51
     1ca:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(Uoffset, 0x0000);
     1ce:	60 e0       	ldi	r22, 0x00	; 0
     1d0:	70 e0       	ldi	r23, 0x00	; 0
     1d2:	84 e3       	ldi	r24, 0x34	; 52
     1d4:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(IoffsetL, 0x0000);
     1d8:	60 e0       	ldi	r22, 0x00	; 0
     1da:	70 e0       	ldi	r23, 0x00	; 0
     1dc:	85 e3       	ldi	r24, 0x35	; 53
     1de:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(IoffsetN, 0x0000);
     1e2:	60 e0       	ldi	r22, 0x00	; 0
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	86 e3       	ldi	r24, 0x36	; 54
     1e8:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(PoffsetL, 0x0000);
     1ec:	60 e0       	ldi	r22, 0x00	; 0
     1ee:	70 e0       	ldi	r23, 0x00	; 0
     1f0:	87 e3       	ldi	r24, 0x37	; 55
     1f2:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(QoffsetL, 0x0000);
     1f6:	60 e0       	ldi	r22, 0x00	; 0
     1f8:	70 e0       	ldi	r23, 0x00	; 0
     1fa:	88 e3       	ldi	r24, 0x38	; 56
     1fc:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(PoffsetN, 0x0000);
     200:	60 e0       	ldi	r22, 0x00	; 0
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	89 e3       	ldi	r24, 0x39	; 57
     206:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(QoffsetN, 0x0000);
     20a:	60 e0       	ldi	r22, 0x00	; 0
     20c:	70 e0       	ldi	r23, 0x00	; 0
     20e:	8a e3       	ldi	r24, 0x3A	; 58
     210:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	uint16_t calibrationCS2 = get_pIC_RegValue(CS2);
     214:	8b e3       	ldi	r24, 0x3B	; 59
     216:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
     21a:	ec 01       	movw	r28, r24
	set_pIC_RegValue(CS2, 0x0000);
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	70 e0       	ldi	r23, 0x00	; 0
     220:	8b e3       	ldi	r24, 0x3B	; 59
     222:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(CS2, calibrationCS2);
     226:	be 01       	movw	r22, r28
     228:	8b e3       	ldi	r24, 0x3B	; 59
     22a:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	set_pIC_RegValue(AdjStart, 0x8765);
     22e:	65 e6       	ldi	r22, 0x65	; 101
     230:	77 e8       	ldi	r23, 0x87	; 135
     232:	80 e3       	ldi	r24, 0x30	; 48
     234:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
	
	//set_pIC_RegValue(CalStart, 0x5678);
	//set_pIC_RegValue(AdjStart, 0x5678);
}
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	08 95       	ret

0000023e <printVoltage>:
	//printHexByte(lowBit);
	//printString("H\r\n");
	
}

void printVoltage(uint16_t word){
     23e:	0f 93       	push	r16
     240:	1f 93       	push	r17
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	8c 01       	movw	r16, r24
	transmitByte('0' + (word / 10000));                 /* Ten-thousands */
     248:	9c 01       	movw	r18, r24
     24a:	32 95       	swap	r19
     24c:	22 95       	swap	r18
     24e:	2f 70       	andi	r18, 0x0F	; 15
     250:	23 27       	eor	r18, r19
     252:	3f 70       	andi	r19, 0x0F	; 15
     254:	23 27       	eor	r18, r19
     256:	a7 e4       	ldi	r26, 0x47	; 71
     258:	b3 e0       	ldi	r27, 0x03	; 3
     25a:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     25e:	96 95       	lsr	r25
     260:	87 95       	ror	r24
     262:	96 95       	lsr	r25
     264:	87 95       	ror	r24
     266:	96 95       	lsr	r25
     268:	87 95       	ror	r24
     26a:	80 5d       	subi	r24, 0xD0	; 208
     26c:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
	transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
     270:	98 01       	movw	r18, r16
     272:	36 95       	lsr	r19
     274:	27 95       	ror	r18
     276:	36 95       	lsr	r19
     278:	27 95       	ror	r18
     27a:	36 95       	lsr	r19
     27c:	27 95       	ror	r18
     27e:	a5 ec       	ldi	r26, 0xC5	; 197
     280:	b0 e2       	ldi	r27, 0x20	; 32
     282:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     286:	ac 01       	movw	r20, r24
     288:	52 95       	swap	r21
     28a:	42 95       	swap	r20
     28c:	4f 70       	andi	r20, 0x0F	; 15
     28e:	45 27       	eor	r20, r21
     290:	5f 70       	andi	r21, 0x0F	; 15
     292:	45 27       	eor	r20, r21
     294:	9a 01       	movw	r18, r20
     296:	ad ec       	ldi	r26, 0xCD	; 205
     298:	bc ec       	ldi	r27, 0xCC	; 204
     29a:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     29e:	96 95       	lsr	r25
     2a0:	87 95       	ror	r24
     2a2:	96 95       	lsr	r25
     2a4:	87 95       	ror	r24
     2a6:	96 95       	lsr	r25
     2a8:	87 95       	ror	r24
     2aa:	9c 01       	movw	r18, r24
     2ac:	22 0f       	add	r18, r18
     2ae:	33 1f       	adc	r19, r19
     2b0:	88 0f       	add	r24, r24
     2b2:	99 1f       	adc	r25, r25
     2b4:	88 0f       	add	r24, r24
     2b6:	99 1f       	adc	r25, r25
     2b8:	88 0f       	add	r24, r24
     2ba:	99 1f       	adc	r25, r25
     2bc:	82 0f       	add	r24, r18
     2be:	93 1f       	adc	r25, r19
     2c0:	9a 01       	movw	r18, r20
     2c2:	28 1b       	sub	r18, r24
     2c4:	39 0b       	sbc	r19, r25
     2c6:	c9 01       	movw	r24, r18
     2c8:	80 5d       	subi	r24, 0xD0	; 208
     2ca:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
	transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
     2ce:	98 01       	movw	r18, r16
     2d0:	36 95       	lsr	r19
     2d2:	27 95       	ror	r18
     2d4:	36 95       	lsr	r19
     2d6:	27 95       	ror	r18
     2d8:	ab e7       	ldi	r26, 0x7B	; 123
     2da:	b4 e1       	ldi	r27, 0x14	; 20
     2dc:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     2e0:	ac 01       	movw	r20, r24
     2e2:	56 95       	lsr	r21
     2e4:	47 95       	ror	r20
     2e6:	9a 01       	movw	r18, r20
     2e8:	ad ec       	ldi	r26, 0xCD	; 205
     2ea:	bc ec       	ldi	r27, 0xCC	; 204
     2ec:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     2f0:	96 95       	lsr	r25
     2f2:	87 95       	ror	r24
     2f4:	96 95       	lsr	r25
     2f6:	87 95       	ror	r24
     2f8:	96 95       	lsr	r25
     2fa:	87 95       	ror	r24
     2fc:	9c 01       	movw	r18, r24
     2fe:	22 0f       	add	r18, r18
     300:	33 1f       	adc	r19, r19
     302:	88 0f       	add	r24, r24
     304:	99 1f       	adc	r25, r25
     306:	88 0f       	add	r24, r24
     308:	99 1f       	adc	r25, r25
     30a:	88 0f       	add	r24, r24
     30c:	99 1f       	adc	r25, r25
     30e:	82 0f       	add	r24, r18
     310:	93 1f       	adc	r25, r19
     312:	9a 01       	movw	r18, r20
     314:	28 1b       	sub	r18, r24
     316:	39 0b       	sbc	r19, r25
     318:	c9 01       	movw	r24, r18
     31a:	80 5d       	subi	r24, 0xD0	; 208
     31c:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
	printString("."); //
     320:	86 e0       	ldi	r24, 0x06	; 6
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	transmitByte('0' + ((word / 10) % 10));                      /* Tens */
     328:	98 01       	movw	r18, r16
     32a:	ad ec       	ldi	r26, 0xCD	; 205
     32c:	bc ec       	ldi	r27, 0xCC	; 204
     32e:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     332:	ec 01       	movw	r28, r24
     334:	d6 95       	lsr	r29
     336:	c7 95       	ror	r28
     338:	d6 95       	lsr	r29
     33a:	c7 95       	ror	r28
     33c:	d6 95       	lsr	r29
     33e:	c7 95       	ror	r28
     340:	9e 01       	movw	r18, r28
     342:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     346:	96 95       	lsr	r25
     348:	87 95       	ror	r24
     34a:	96 95       	lsr	r25
     34c:	87 95       	ror	r24
     34e:	96 95       	lsr	r25
     350:	87 95       	ror	r24
     352:	9c 01       	movw	r18, r24
     354:	22 0f       	add	r18, r18
     356:	33 1f       	adc	r19, r19
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	88 0f       	add	r24, r24
     362:	99 1f       	adc	r25, r25
     364:	82 0f       	add	r24, r18
     366:	93 1f       	adc	r25, r19
     368:	9e 01       	movw	r18, r28
     36a:	28 1b       	sub	r18, r24
     36c:	39 0b       	sbc	r19, r25
     36e:	c9 01       	movw	r24, r18
     370:	80 5d       	subi	r24, 0xD0	; 208
     372:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
	transmitByte('0' + (word % 10));                             /* Ones */
     376:	ce 01       	movw	r24, r28
     378:	88 0f       	add	r24, r24
     37a:	99 1f       	adc	r25, r25
     37c:	cc 0f       	add	r28, r28
     37e:	dd 1f       	adc	r29, r29
     380:	cc 0f       	add	r28, r28
     382:	dd 1f       	adc	r29, r29
     384:	cc 0f       	add	r28, r28
     386:	dd 1f       	adc	r29, r29
     388:	c8 0f       	add	r28, r24
     38a:	d9 1f       	adc	r29, r25
     38c:	c8 01       	movw	r24, r16
     38e:	8c 1b       	sub	r24, r28
     390:	9d 0b       	sbc	r25, r29
     392:	80 5d       	subi	r24, 0xD0	; 208
     394:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
}
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	1f 91       	pop	r17
     39e:	0f 91       	pop	r16
     3a0:	08 95       	ret

000003a2 <printCurrent>:

void printCurrent(uint16_t word){
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	8c 01       	movw	r16, r24
	transmitByte('0' + (word / 10000));                 /* Ten-thousands */
     3ac:	9c 01       	movw	r18, r24
     3ae:	32 95       	swap	r19
     3b0:	22 95       	swap	r18
     3b2:	2f 70       	andi	r18, 0x0F	; 15
     3b4:	23 27       	eor	r18, r19
     3b6:	3f 70       	andi	r19, 0x0F	; 15
     3b8:	23 27       	eor	r18, r19
     3ba:	a7 e4       	ldi	r26, 0x47	; 71
     3bc:	b3 e0       	ldi	r27, 0x03	; 3
     3be:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     3c2:	96 95       	lsr	r25
     3c4:	87 95       	ror	r24
     3c6:	96 95       	lsr	r25
     3c8:	87 95       	ror	r24
     3ca:	96 95       	lsr	r25
     3cc:	87 95       	ror	r24
     3ce:	80 5d       	subi	r24, 0xD0	; 208
     3d0:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
	transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
     3d4:	98 01       	movw	r18, r16
     3d6:	36 95       	lsr	r19
     3d8:	27 95       	ror	r18
     3da:	36 95       	lsr	r19
     3dc:	27 95       	ror	r18
     3de:	36 95       	lsr	r19
     3e0:	27 95       	ror	r18
     3e2:	a5 ec       	ldi	r26, 0xC5	; 197
     3e4:	b0 e2       	ldi	r27, 0x20	; 32
     3e6:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     3ea:	ac 01       	movw	r20, r24
     3ec:	52 95       	swap	r21
     3ee:	42 95       	swap	r20
     3f0:	4f 70       	andi	r20, 0x0F	; 15
     3f2:	45 27       	eor	r20, r21
     3f4:	5f 70       	andi	r21, 0x0F	; 15
     3f6:	45 27       	eor	r20, r21
     3f8:	9a 01       	movw	r18, r20
     3fa:	ad ec       	ldi	r26, 0xCD	; 205
     3fc:	bc ec       	ldi	r27, 0xCC	; 204
     3fe:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     402:	96 95       	lsr	r25
     404:	87 95       	ror	r24
     406:	96 95       	lsr	r25
     408:	87 95       	ror	r24
     40a:	96 95       	lsr	r25
     40c:	87 95       	ror	r24
     40e:	9c 01       	movw	r18, r24
     410:	22 0f       	add	r18, r18
     412:	33 1f       	adc	r19, r19
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	88 0f       	add	r24, r24
     41a:	99 1f       	adc	r25, r25
     41c:	88 0f       	add	r24, r24
     41e:	99 1f       	adc	r25, r25
     420:	82 0f       	add	r24, r18
     422:	93 1f       	adc	r25, r19
     424:	9a 01       	movw	r18, r20
     426:	28 1b       	sub	r18, r24
     428:	39 0b       	sbc	r19, r25
     42a:	c9 01       	movw	r24, r18
     42c:	80 5d       	subi	r24, 0xD0	; 208
     42e:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
	printString("."); //
     432:	86 e0       	ldi	r24, 0x06	; 6
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
     43a:	98 01       	movw	r18, r16
     43c:	36 95       	lsr	r19
     43e:	27 95       	ror	r18
     440:	36 95       	lsr	r19
     442:	27 95       	ror	r18
     444:	ab e7       	ldi	r26, 0x7B	; 123
     446:	b4 e1       	ldi	r27, 0x14	; 20
     448:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     44c:	ac 01       	movw	r20, r24
     44e:	56 95       	lsr	r21
     450:	47 95       	ror	r20
     452:	9a 01       	movw	r18, r20
     454:	ad ec       	ldi	r26, 0xCD	; 205
     456:	bc ec       	ldi	r27, 0xCC	; 204
     458:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     45c:	96 95       	lsr	r25
     45e:	87 95       	ror	r24
     460:	96 95       	lsr	r25
     462:	87 95       	ror	r24
     464:	96 95       	lsr	r25
     466:	87 95       	ror	r24
     468:	9c 01       	movw	r18, r24
     46a:	22 0f       	add	r18, r18
     46c:	33 1f       	adc	r19, r19
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	88 0f       	add	r24, r24
     478:	99 1f       	adc	r25, r25
     47a:	82 0f       	add	r24, r18
     47c:	93 1f       	adc	r25, r19
     47e:	9a 01       	movw	r18, r20
     480:	28 1b       	sub	r18, r24
     482:	39 0b       	sbc	r19, r25
     484:	c9 01       	movw	r24, r18
     486:	80 5d       	subi	r24, 0xD0	; 208
     488:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
	transmitByte('0' + ((word / 10) % 10));                      /* Tens */
     48c:	98 01       	movw	r18, r16
     48e:	ad ec       	ldi	r26, 0xCD	; 205
     490:	bc ec       	ldi	r27, 0xCC	; 204
     492:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     496:	ec 01       	movw	r28, r24
     498:	d6 95       	lsr	r29
     49a:	c7 95       	ror	r28
     49c:	d6 95       	lsr	r29
     49e:	c7 95       	ror	r28
     4a0:	d6 95       	lsr	r29
     4a2:	c7 95       	ror	r28
     4a4:	9e 01       	movw	r18, r28
     4a6:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     4aa:	96 95       	lsr	r25
     4ac:	87 95       	ror	r24
     4ae:	96 95       	lsr	r25
     4b0:	87 95       	ror	r24
     4b2:	96 95       	lsr	r25
     4b4:	87 95       	ror	r24
     4b6:	9c 01       	movw	r18, r24
     4b8:	22 0f       	add	r18, r18
     4ba:	33 1f       	adc	r19, r19
     4bc:	88 0f       	add	r24, r24
     4be:	99 1f       	adc	r25, r25
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	88 0f       	add	r24, r24
     4c6:	99 1f       	adc	r25, r25
     4c8:	82 0f       	add	r24, r18
     4ca:	93 1f       	adc	r25, r19
     4cc:	9e 01       	movw	r18, r28
     4ce:	28 1b       	sub	r18, r24
     4d0:	39 0b       	sbc	r19, r25
     4d2:	c9 01       	movw	r24, r18
     4d4:	80 5d       	subi	r24, 0xD0	; 208
     4d6:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
	transmitByte('0' + (word % 10));                             /* Ones */
     4da:	ce 01       	movw	r24, r28
     4dc:	88 0f       	add	r24, r24
     4de:	99 1f       	adc	r25, r25
     4e0:	cc 0f       	add	r28, r28
     4e2:	dd 1f       	adc	r29, r29
     4e4:	cc 0f       	add	r28, r28
     4e6:	dd 1f       	adc	r29, r29
     4e8:	cc 0f       	add	r28, r28
     4ea:	dd 1f       	adc	r29, r29
     4ec:	c8 0f       	add	r28, r24
     4ee:	d9 1f       	adc	r29, r25
     4f0:	c8 01       	movw	r24, r16
     4f2:	8c 1b       	sub	r24, r28
     4f4:	9d 0b       	sbc	r25, r29
     4f6:	80 5d       	subi	r24, 0xD0	; 208
     4f8:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
}
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	08 95       	ret

00000506 <printPower>:

void printPower(int16_t word){
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	ec 01       	movw	r28, r24
	if(word>>15){
     510:	99 23       	and	r25, r25
     512:	0c f0       	brlt	.+2      	; 0x516 <printPower+0x10>
     514:	3f c0       	rjmp	.+126    	; 0x594 <printPower+0x8e>
		//word &= ~(1UL<<15);
		printString("-");
     516:	88 e0       	ldi	r24, 0x08	; 8
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
		//word ^= (0xffff & ~(1UL<<15));
		word ^= 0xffff;
		word++;
     51e:	d1 95       	neg	r29
     520:	c1 95       	neg	r28
     522:	d1 09       	sbc	r29, r1
		transmitByte('0' + (word / 10000));                 /* Ten-thousands */
     524:	ce 01       	movw	r24, r28
     526:	60 e1       	ldi	r22, 0x10	; 16
     528:	77 e2       	ldi	r23, 0x27	; 39
     52a:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     52e:	80 e3       	ldi	r24, 0x30	; 48
     530:	86 0f       	add	r24, r22
     532:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
		transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
     536:	ce 01       	movw	r24, r28
     538:	68 ee       	ldi	r22, 0xE8	; 232
     53a:	73 e0       	ldi	r23, 0x03	; 3
     53c:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     540:	cb 01       	movw	r24, r22
     542:	0a e0       	ldi	r16, 0x0A	; 10
     544:	10 e0       	ldi	r17, 0x00	; 0
     546:	b8 01       	movw	r22, r16
     548:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     54c:	80 5d       	subi	r24, 0xD0	; 208
     54e:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
		printString("."); //
     552:	86 e0       	ldi	r24, 0x06	; 6
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
		transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
     55a:	ce 01       	movw	r24, r28
     55c:	64 e6       	ldi	r22, 0x64	; 100
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     564:	cb 01       	movw	r24, r22
     566:	b8 01       	movw	r22, r16
     568:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     56c:	80 5d       	subi	r24, 0xD0	; 208
     56e:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
		transmitByte('0' + ((word / 10) % 10));                      /* Tens */
     572:	ce 01       	movw	r24, r28
     574:	b8 01       	movw	r22, r16
     576:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     57a:	c8 2f       	mov	r28, r24
     57c:	cb 01       	movw	r24, r22
     57e:	b8 01       	movw	r22, r16
     580:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     584:	80 5d       	subi	r24, 0xD0	; 208
     586:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
		transmitByte('0' + (word % 10));                             /* Ones */
     58a:	80 e3       	ldi	r24, 0x30	; 48
     58c:	8c 0f       	add	r24, r28
     58e:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
     592:	36 c0       	rjmp	.+108    	; 0x600 <printPower+0xfa>
	}
	else{
		transmitByte('0' + (word / 10000));                 /* Ten-thousands */
     594:	60 e1       	ldi	r22, 0x10	; 16
     596:	77 e2       	ldi	r23, 0x27	; 39
     598:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     59c:	80 e3       	ldi	r24, 0x30	; 48
     59e:	86 0f       	add	r24, r22
     5a0:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
		transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
     5a4:	ce 01       	movw	r24, r28
     5a6:	68 ee       	ldi	r22, 0xE8	; 232
     5a8:	73 e0       	ldi	r23, 0x03	; 3
     5aa:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     5ae:	cb 01       	movw	r24, r22
     5b0:	0a e0       	ldi	r16, 0x0A	; 10
     5b2:	10 e0       	ldi	r17, 0x00	; 0
     5b4:	b8 01       	movw	r22, r16
     5b6:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     5ba:	80 5d       	subi	r24, 0xD0	; 208
     5bc:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
		printString("."); //
     5c0:	86 e0       	ldi	r24, 0x06	; 6
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
		transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
     5c8:	ce 01       	movw	r24, r28
     5ca:	64 e6       	ldi	r22, 0x64	; 100
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     5d2:	cb 01       	movw	r24, r22
     5d4:	b8 01       	movw	r22, r16
     5d6:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     5da:	80 5d       	subi	r24, 0xD0	; 208
     5dc:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
		transmitByte('0' + ((word / 10) % 10));                      /* Tens */
     5e0:	ce 01       	movw	r24, r28
     5e2:	b8 01       	movw	r22, r16
     5e4:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     5e8:	c8 2f       	mov	r28, r24
     5ea:	cb 01       	movw	r24, r22
     5ec:	b8 01       	movw	r22, r16
     5ee:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     5f2:	80 5d       	subi	r24, 0xD0	; 208
     5f4:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
		transmitByte('0' + (word % 10));                             /* Ones */
     5f8:	80 e3       	ldi	r24, 0x30	; 48
     5fa:	8c 0f       	add	r24, r28
     5fc:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
	}
	
}
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	08 95       	ret

0000060a <printFrequency>:

void printFrequency(uint16_t word){
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	8c 01       	movw	r16, r24
	//transmitByte('0' + (word / 10000));                 /* Ten-thousands */
	transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
     614:	9c 01       	movw	r18, r24
     616:	36 95       	lsr	r19
     618:	27 95       	ror	r18
     61a:	36 95       	lsr	r19
     61c:	27 95       	ror	r18
     61e:	36 95       	lsr	r19
     620:	27 95       	ror	r18
     622:	a5 ec       	ldi	r26, 0xC5	; 197
     624:	b0 e2       	ldi	r27, 0x20	; 32
     626:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     62a:	ac 01       	movw	r20, r24
     62c:	52 95       	swap	r21
     62e:	42 95       	swap	r20
     630:	4f 70       	andi	r20, 0x0F	; 15
     632:	45 27       	eor	r20, r21
     634:	5f 70       	andi	r21, 0x0F	; 15
     636:	45 27       	eor	r20, r21
     638:	9a 01       	movw	r18, r20
     63a:	ad ec       	ldi	r26, 0xCD	; 205
     63c:	bc ec       	ldi	r27, 0xCC	; 204
     63e:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     642:	96 95       	lsr	r25
     644:	87 95       	ror	r24
     646:	96 95       	lsr	r25
     648:	87 95       	ror	r24
     64a:	96 95       	lsr	r25
     64c:	87 95       	ror	r24
     64e:	9c 01       	movw	r18, r24
     650:	22 0f       	add	r18, r18
     652:	33 1f       	adc	r19, r19
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
     658:	88 0f       	add	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	88 0f       	add	r24, r24
     65e:	99 1f       	adc	r25, r25
     660:	82 0f       	add	r24, r18
     662:	93 1f       	adc	r25, r19
     664:	9a 01       	movw	r18, r20
     666:	28 1b       	sub	r18, r24
     668:	39 0b       	sbc	r19, r25
     66a:	c9 01       	movw	r24, r18
     66c:	80 5d       	subi	r24, 0xD0	; 208
     66e:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
	transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
     672:	98 01       	movw	r18, r16
     674:	36 95       	lsr	r19
     676:	27 95       	ror	r18
     678:	36 95       	lsr	r19
     67a:	27 95       	ror	r18
     67c:	ab e7       	ldi	r26, 0x7B	; 123
     67e:	b4 e1       	ldi	r27, 0x14	; 20
     680:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     684:	ac 01       	movw	r20, r24
     686:	56 95       	lsr	r21
     688:	47 95       	ror	r20
     68a:	9a 01       	movw	r18, r20
     68c:	ad ec       	ldi	r26, 0xCD	; 205
     68e:	bc ec       	ldi	r27, 0xCC	; 204
     690:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     694:	96 95       	lsr	r25
     696:	87 95       	ror	r24
     698:	96 95       	lsr	r25
     69a:	87 95       	ror	r24
     69c:	96 95       	lsr	r25
     69e:	87 95       	ror	r24
     6a0:	9c 01       	movw	r18, r24
     6a2:	22 0f       	add	r18, r18
     6a4:	33 1f       	adc	r19, r19
     6a6:	88 0f       	add	r24, r24
     6a8:	99 1f       	adc	r25, r25
     6aa:	88 0f       	add	r24, r24
     6ac:	99 1f       	adc	r25, r25
     6ae:	88 0f       	add	r24, r24
     6b0:	99 1f       	adc	r25, r25
     6b2:	82 0f       	add	r24, r18
     6b4:	93 1f       	adc	r25, r19
     6b6:	9a 01       	movw	r18, r20
     6b8:	28 1b       	sub	r18, r24
     6ba:	39 0b       	sbc	r19, r25
     6bc:	c9 01       	movw	r24, r18
     6be:	80 5d       	subi	r24, 0xD0	; 208
     6c0:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
	printString("."); //
     6c4:	86 e0       	ldi	r24, 0x06	; 6
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	transmitByte('0' + ((word / 10) % 10));                      /* Tens */
     6cc:	98 01       	movw	r18, r16
     6ce:	ad ec       	ldi	r26, 0xCD	; 205
     6d0:	bc ec       	ldi	r27, 0xCC	; 204
     6d2:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     6d6:	ec 01       	movw	r28, r24
     6d8:	d6 95       	lsr	r29
     6da:	c7 95       	ror	r28
     6dc:	d6 95       	lsr	r29
     6de:	c7 95       	ror	r28
     6e0:	d6 95       	lsr	r29
     6e2:	c7 95       	ror	r28
     6e4:	9e 01       	movw	r18, r28
     6e6:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     6ea:	96 95       	lsr	r25
     6ec:	87 95       	ror	r24
     6ee:	96 95       	lsr	r25
     6f0:	87 95       	ror	r24
     6f2:	96 95       	lsr	r25
     6f4:	87 95       	ror	r24
     6f6:	9c 01       	movw	r18, r24
     6f8:	22 0f       	add	r18, r18
     6fa:	33 1f       	adc	r19, r19
     6fc:	88 0f       	add	r24, r24
     6fe:	99 1f       	adc	r25, r25
     700:	88 0f       	add	r24, r24
     702:	99 1f       	adc	r25, r25
     704:	88 0f       	add	r24, r24
     706:	99 1f       	adc	r25, r25
     708:	82 0f       	add	r24, r18
     70a:	93 1f       	adc	r25, r19
     70c:	9e 01       	movw	r18, r28
     70e:	28 1b       	sub	r18, r24
     710:	39 0b       	sbc	r19, r25
     712:	c9 01       	movw	r24, r18
     714:	80 5d       	subi	r24, 0xD0	; 208
     716:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
	transmitByte('0' + (word % 10));                             /* Ones */
     71a:	ce 01       	movw	r24, r28
     71c:	88 0f       	add	r24, r24
     71e:	99 1f       	adc	r25, r25
     720:	cc 0f       	add	r28, r28
     722:	dd 1f       	adc	r29, r29
     724:	cc 0f       	add	r28, r28
     726:	dd 1f       	adc	r29, r29
     728:	cc 0f       	add	r28, r28
     72a:	dd 1f       	adc	r29, r29
     72c:	c8 0f       	add	r28, r24
     72e:	d9 1f       	adc	r29, r25
     730:	c8 01       	movw	r24, r16
     732:	8c 1b       	sub	r24, r28
     734:	9d 0b       	sbc	r25, r29
     736:	80 5d       	subi	r24, 0xD0	; 208
     738:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
}
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	08 95       	ret

00000746 <printPowerFactor>:

void printPowerFactor(int16_t word){
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	ec 01       	movw	r28, r24
	if(word>>15){
     750:	99 23       	and	r25, r25
     752:	a4 f5       	brge	.+104    	; 0x7bc <printPowerFactor+0x76>
		word &= ~(1UL<<15);
     754:	df 77       	andi	r29, 0x7F	; 127
		printString("-");
     756:	88 e0       	ldi	r24, 0x08	; 8
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
		//word ^= (0xffff & ~(1UL<<16));
		//word++;
		//transmitByte('0' + (word / 10000));                 /* Ten-thousands */
		transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
     75e:	ce 01       	movw	r24, r28
     760:	68 ee       	ldi	r22, 0xE8	; 232
     762:	73 e0       	ldi	r23, 0x03	; 3
     764:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     768:	cb 01       	movw	r24, r22
     76a:	0a e0       	ldi	r16, 0x0A	; 10
     76c:	10 e0       	ldi	r17, 0x00	; 0
     76e:	b8 01       	movw	r22, r16
     770:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     774:	80 5d       	subi	r24, 0xD0	; 208
     776:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
		printString("."); //
     77a:	86 e0       	ldi	r24, 0x06	; 6
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
		transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
     782:	ce 01       	movw	r24, r28
     784:	64 e6       	ldi	r22, 0x64	; 100
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     78c:	cb 01       	movw	r24, r22
     78e:	b8 01       	movw	r22, r16
     790:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     794:	80 5d       	subi	r24, 0xD0	; 208
     796:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
		transmitByte('0' + ((word / 10) % 10));                      /* Tens */
     79a:	ce 01       	movw	r24, r28
     79c:	b8 01       	movw	r22, r16
     79e:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     7a2:	c8 2f       	mov	r28, r24
     7a4:	cb 01       	movw	r24, r22
     7a6:	b8 01       	movw	r22, r16
     7a8:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     7ac:	80 5d       	subi	r24, 0xD0	; 208
     7ae:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
		transmitByte('0' + (word % 10));                             /* Ones */
     7b2:	80 e3       	ldi	r24, 0x30	; 48
     7b4:	8c 0f       	add	r24, r28
     7b6:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
     7ba:	2d c0       	rjmp	.+90     	; 0x816 <printPowerFactor+0xd0>
	}
	else{
		//transmitByte('0' + (word / 10000));                 /* Ten-thousands */
		transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
     7bc:	68 ee       	ldi	r22, 0xE8	; 232
     7be:	73 e0       	ldi	r23, 0x03	; 3
     7c0:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     7c4:	cb 01       	movw	r24, r22
     7c6:	0a e0       	ldi	r16, 0x0A	; 10
     7c8:	10 e0       	ldi	r17, 0x00	; 0
     7ca:	b8 01       	movw	r22, r16
     7cc:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     7d0:	80 5d       	subi	r24, 0xD0	; 208
     7d2:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
		printString("."); //
     7d6:	86 e0       	ldi	r24, 0x06	; 6
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
		transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
     7de:	ce 01       	movw	r24, r28
     7e0:	64 e6       	ldi	r22, 0x64	; 100
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     7e8:	cb 01       	movw	r24, r22
     7ea:	b8 01       	movw	r22, r16
     7ec:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     7f0:	80 5d       	subi	r24, 0xD0	; 208
     7f2:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
		transmitByte('0' + ((word / 10) % 10));                      /* Tens */
     7f6:	ce 01       	movw	r24, r28
     7f8:	b8 01       	movw	r22, r16
     7fa:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     7fe:	c8 2f       	mov	r28, r24
     800:	cb 01       	movw	r24, r22
     802:	b8 01       	movw	r22, r16
     804:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     808:	80 5d       	subi	r24, 0xD0	; 208
     80a:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
		transmitByte('0' + (word % 10));                             /* Ones */
     80e:	80 e3       	ldi	r24, 0x30	; 48
     810:	8c 0f       	add	r24, r28
     812:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
	}
	
}
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	1f 91       	pop	r17
     81c:	0f 91       	pop	r16
     81e:	08 95       	ret

00000820 <printPhaseAngle>:

void printPhaseAngle(int16_t word){
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	ec 01       	movw	r28, r24
	if(word>>15){
     82a:	99 23       	and	r25, r25
     82c:	b4 f5       	brge	.+108    	; 0x89a <printPhaseAngle+0x7a>
		//word &= ~(1UL<<15);
		printString("-");
     82e:	88 e0       	ldi	r24, 0x08	; 8
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
		//word ^= (0xffff & ~(1UL<<15));
		word ^= 0xffff;
		word++;
     836:	d1 95       	neg	r29
     838:	c1 95       	neg	r28
     83a:	d1 09       	sbc	r29, r1
		//transmitByte('0' + (word / 10000));                 /* Ten-thousands */
		transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
     83c:	ce 01       	movw	r24, r28
     83e:	68 ee       	ldi	r22, 0xE8	; 232
     840:	73 e0       	ldi	r23, 0x03	; 3
     842:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     846:	cb 01       	movw	r24, r22
     848:	0a e0       	ldi	r16, 0x0A	; 10
     84a:	10 e0       	ldi	r17, 0x00	; 0
     84c:	b8 01       	movw	r22, r16
     84e:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     852:	80 5d       	subi	r24, 0xD0	; 208
     854:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
		transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
     858:	ce 01       	movw	r24, r28
     85a:	64 e6       	ldi	r22, 0x64	; 100
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     862:	cb 01       	movw	r24, r22
     864:	b8 01       	movw	r22, r16
     866:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     86a:	80 5d       	subi	r24, 0xD0	; 208
     86c:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
		transmitByte('0' + ((word / 10) % 10));                      /* Tens */
     870:	ce 01       	movw	r24, r28
     872:	b8 01       	movw	r22, r16
     874:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     878:	c8 2f       	mov	r28, r24
     87a:	cb 01       	movw	r24, r22
     87c:	b8 01       	movw	r22, r16
     87e:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     882:	80 5d       	subi	r24, 0xD0	; 208
     884:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
		printString("."); //
     888:	86 e0       	ldi	r24, 0x06	; 6
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
		transmitByte('0' + (word % 10));                             /* Ones */
     890:	80 e3       	ldi	r24, 0x30	; 48
     892:	8c 0f       	add	r24, r28
     894:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
     898:	2d c0       	rjmp	.+90     	; 0x8f4 <printPhaseAngle+0xd4>
	}
	else{
		//transmitByte('0' + (word / 10000));                 /* Ten-thousands */
		transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
     89a:	68 ee       	ldi	r22, 0xE8	; 232
     89c:	73 e0       	ldi	r23, 0x03	; 3
     89e:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     8a2:	cb 01       	movw	r24, r22
     8a4:	0a e0       	ldi	r16, 0x0A	; 10
     8a6:	10 e0       	ldi	r17, 0x00	; 0
     8a8:	b8 01       	movw	r22, r16
     8aa:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     8ae:	80 5d       	subi	r24, 0xD0	; 208
     8b0:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
		transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
     8b4:	ce 01       	movw	r24, r28
     8b6:	64 e6       	ldi	r22, 0x64	; 100
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     8be:	cb 01       	movw	r24, r22
     8c0:	b8 01       	movw	r22, r16
     8c2:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     8c6:	80 5d       	subi	r24, 0xD0	; 208
     8c8:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
		transmitByte('0' + ((word / 10) % 10));                      /* Tens */
     8cc:	ce 01       	movw	r24, r28
     8ce:	b8 01       	movw	r22, r16
     8d0:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     8d4:	c8 2f       	mov	r28, r24
     8d6:	cb 01       	movw	r24, r22
     8d8:	b8 01       	movw	r22, r16
     8da:	0e 94 43 08 	call	0x1086	; 0x1086 <__divmodhi4>
     8de:	80 5d       	subi	r24, 0xD0	; 208
     8e0:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
		printString("."); //
     8e4:	86 e0       	ldi	r24, 0x06	; 6
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
		transmitByte('0' + (word % 10));                             /* Ones */
     8ec:	80 e3       	ldi	r24, 0x30	; 48
     8ee:	8c 0f       	add	r24, r28
     8f0:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
	}
	
}
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	08 95       	ret

000008fe <printEnergy>:

void printEnergy(uint16_t word){
     8fe:	0f 93       	push	r16
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	8c 01       	movw	r16, r24
	transmitByte('0' + (word / 10000));                 /* Ten-thousands */
     908:	9c 01       	movw	r18, r24
     90a:	32 95       	swap	r19
     90c:	22 95       	swap	r18
     90e:	2f 70       	andi	r18, 0x0F	; 15
     910:	23 27       	eor	r18, r19
     912:	3f 70       	andi	r19, 0x0F	; 15
     914:	23 27       	eor	r18, r19
     916:	a7 e4       	ldi	r26, 0x47	; 71
     918:	b3 e0       	ldi	r27, 0x03	; 3
     91a:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     91e:	96 95       	lsr	r25
     920:	87 95       	ror	r24
     922:	96 95       	lsr	r25
     924:	87 95       	ror	r24
     926:	96 95       	lsr	r25
     928:	87 95       	ror	r24
     92a:	80 5d       	subi	r24, 0xD0	; 208
     92c:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
	transmitByte('0' + ((word / 1000) % 10));               /* Thousands */
     930:	98 01       	movw	r18, r16
     932:	36 95       	lsr	r19
     934:	27 95       	ror	r18
     936:	36 95       	lsr	r19
     938:	27 95       	ror	r18
     93a:	36 95       	lsr	r19
     93c:	27 95       	ror	r18
     93e:	a5 ec       	ldi	r26, 0xC5	; 197
     940:	b0 e2       	ldi	r27, 0x20	; 32
     942:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     946:	ac 01       	movw	r20, r24
     948:	52 95       	swap	r21
     94a:	42 95       	swap	r20
     94c:	4f 70       	andi	r20, 0x0F	; 15
     94e:	45 27       	eor	r20, r21
     950:	5f 70       	andi	r21, 0x0F	; 15
     952:	45 27       	eor	r20, r21
     954:	9a 01       	movw	r18, r20
     956:	ad ec       	ldi	r26, 0xCD	; 205
     958:	bc ec       	ldi	r27, 0xCC	; 204
     95a:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     95e:	96 95       	lsr	r25
     960:	87 95       	ror	r24
     962:	96 95       	lsr	r25
     964:	87 95       	ror	r24
     966:	96 95       	lsr	r25
     968:	87 95       	ror	r24
     96a:	9c 01       	movw	r18, r24
     96c:	22 0f       	add	r18, r18
     96e:	33 1f       	adc	r19, r19
     970:	88 0f       	add	r24, r24
     972:	99 1f       	adc	r25, r25
     974:	88 0f       	add	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	82 0f       	add	r24, r18
     97e:	93 1f       	adc	r25, r19
     980:	9a 01       	movw	r18, r20
     982:	28 1b       	sub	r18, r24
     984:	39 0b       	sbc	r19, r25
     986:	c9 01       	movw	r24, r18
     988:	80 5d       	subi	r24, 0xD0	; 208
     98a:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
	transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
     98e:	98 01       	movw	r18, r16
     990:	36 95       	lsr	r19
     992:	27 95       	ror	r18
     994:	36 95       	lsr	r19
     996:	27 95       	ror	r18
     998:	ab e7       	ldi	r26, 0x7B	; 123
     99a:	b4 e1       	ldi	r27, 0x14	; 20
     99c:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     9a0:	ac 01       	movw	r20, r24
     9a2:	56 95       	lsr	r21
     9a4:	47 95       	ror	r20
     9a6:	9a 01       	movw	r18, r20
     9a8:	ad ec       	ldi	r26, 0xCD	; 205
     9aa:	bc ec       	ldi	r27, 0xCC	; 204
     9ac:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     9b0:	96 95       	lsr	r25
     9b2:	87 95       	ror	r24
     9b4:	96 95       	lsr	r25
     9b6:	87 95       	ror	r24
     9b8:	96 95       	lsr	r25
     9ba:	87 95       	ror	r24
     9bc:	9c 01       	movw	r18, r24
     9be:	22 0f       	add	r18, r18
     9c0:	33 1f       	adc	r19, r19
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	82 0f       	add	r24, r18
     9d0:	93 1f       	adc	r25, r19
     9d2:	9a 01       	movw	r18, r20
     9d4:	28 1b       	sub	r18, r24
     9d6:	39 0b       	sbc	r19, r25
     9d8:	c9 01       	movw	r24, r18
     9da:	80 5d       	subi	r24, 0xD0	; 208
     9dc:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
	transmitByte('0' + ((word / 10) % 10));                      /* Tens */
     9e0:	98 01       	movw	r18, r16
     9e2:	ad ec       	ldi	r26, 0xCD	; 205
     9e4:	bc ec       	ldi	r27, 0xCC	; 204
     9e6:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     9ea:	ec 01       	movw	r28, r24
     9ec:	d6 95       	lsr	r29
     9ee:	c7 95       	ror	r28
     9f0:	d6 95       	lsr	r29
     9f2:	c7 95       	ror	r28
     9f4:	d6 95       	lsr	r29
     9f6:	c7 95       	ror	r28
     9f8:	9e 01       	movw	r18, r28
     9fa:	0e 94 57 08 	call	0x10ae	; 0x10ae <__umulhisi3>
     9fe:	96 95       	lsr	r25
     a00:	87 95       	ror	r24
     a02:	96 95       	lsr	r25
     a04:	87 95       	ror	r24
     a06:	96 95       	lsr	r25
     a08:	87 95       	ror	r24
     a0a:	9c 01       	movw	r18, r24
     a0c:	22 0f       	add	r18, r18
     a0e:	33 1f       	adc	r19, r19
     a10:	88 0f       	add	r24, r24
     a12:	99 1f       	adc	r25, r25
     a14:	88 0f       	add	r24, r24
     a16:	99 1f       	adc	r25, r25
     a18:	88 0f       	add	r24, r24
     a1a:	99 1f       	adc	r25, r25
     a1c:	82 0f       	add	r24, r18
     a1e:	93 1f       	adc	r25, r19
     a20:	9e 01       	movw	r18, r28
     a22:	28 1b       	sub	r18, r24
     a24:	39 0b       	sbc	r19, r25
     a26:	c9 01       	movw	r24, r18
     a28:	80 5d       	subi	r24, 0xD0	; 208
     a2a:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
	printString("."); //
     a2e:	86 e0       	ldi	r24, 0x06	; 6
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	transmitByte('0' + (word % 10));                             /* Ones */
     a36:	ce 01       	movw	r24, r28
     a38:	88 0f       	add	r24, r24
     a3a:	99 1f       	adc	r25, r25
     a3c:	cc 0f       	add	r28, r28
     a3e:	dd 1f       	adc	r29, r29
     a40:	cc 0f       	add	r28, r28
     a42:	dd 1f       	adc	r29, r29
     a44:	cc 0f       	add	r28, r28
     a46:	dd 1f       	adc	r29, r29
     a48:	c8 0f       	add	r28, r24
     a4a:	d9 1f       	adc	r29, r25
     a4c:	c8 01       	movw	r24, r16
     a4e:	8c 1b       	sub	r24, r28
     a50:	9d 0b       	sbc	r25, r29
     a52:	80 5d       	subi	r24, 0xD0	; 208
     a54:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	08 95       	ret

00000a62 <setup_rf>:
	printString("/");
	printByte(date);
	printString("/");
	printWord(year);
	printString("\r\n");
}
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	0e 94 7e 06 	call	0xcfc	; 0xcfc <nRF24L01_init>
     a6a:	ec 01       	movw	r28, r24
     a6c:	85 e2       	ldi	r24, 0x25	; 37
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	99 83       	std	Y+1, r25	; 0x01
     a72:	88 83       	st	Y, r24
     a74:	22 e0       	ldi	r18, 0x02	; 2
     a76:	2a 83       	std	Y+2, r18	; 0x02
     a78:	9c 83       	std	Y+4, r25	; 0x04
     a7a:	8b 83       	std	Y+3, r24	; 0x03
     a7c:	21 e0       	ldi	r18, 0x01	; 1
     a7e:	2d 83       	std	Y+5, r18	; 0x05
     a80:	9f 83       	std	Y+7, r25	; 0x07
     a82:	8e 83       	std	Y+6, r24	; 0x06
     a84:	25 e0       	ldi	r18, 0x05	; 5
     a86:	28 87       	std	Y+8, r18	; 0x08
     a88:	9a 87       	std	Y+10, r25	; 0x0a
     a8a:	89 87       	std	Y+9, r24	; 0x09
     a8c:	23 e0       	ldi	r18, 0x03	; 3
     a8e:	2b 87       	std	Y+11, r18	; 0x0b
     a90:	9d 87       	std	Y+13, r25	; 0x0d
     a92:	8c 87       	std	Y+12, r24	; 0x0c
     a94:	84 e0       	ldi	r24, 0x04	; 4
     a96:	8e 87       	std	Y+14, r24	; 0x0e
     a98:	e9 e6       	ldi	r30, 0x69	; 105
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	80 81       	ld	r24, Z
     a9e:	82 60       	ori	r24, 0x02	; 2
     aa0:	80 83       	st	Z, r24
     aa2:	e8 9a       	sbi	0x1d, 0	; 29
     aa4:	ce 01       	movw	r24, r28
     aa6:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <nRF24L01_begin>
     aaa:	ce 01       	movw	r24, r28
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	08 95       	ret

00000ab2 <setup_timer>:
     ab2:	e1 e8       	ldi	r30, 0x81	; 129
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	80 81       	ld	r24, Z
     ab8:	88 60       	ori	r24, 0x08	; 8
     aba:	80 83       	st	Z, r24
     abc:	af e6       	ldi	r26, 0x6F	; 111
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	8c 91       	ld	r24, X
     ac2:	82 60       	ori	r24, 0x02	; 2
     ac4:	8c 93       	st	X, r24
     ac6:	82 e1       	ldi	r24, 0x12	; 18
     ac8:	9a e7       	ldi	r25, 0x7A	; 122
     aca:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     ace:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     ad2:	80 81       	ld	r24, Z
     ad4:	84 60       	ori	r24, 0x04	; 4
     ad6:	80 83       	st	Z, r24
     ad8:	08 95       	ret

00000ada <print_power_IC_settings>:

void print_power_IC_settings(void){
	printString("Power IC Settings:");
     ada:	82 e4       	ldi	r24, 0x42	; 66
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	printString("\r\n");
     ae2:	81 e8       	ldi	r24, 0x81	; 129
     ae4:	92 e0       	ldi	r25, 0x02	; 2
     ae6:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	
	printString("System Status: ");
     aea:	85 e5       	ldi	r24, 0x55	; 85
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	printHexWord(get_pIC_RegValue(SysStatus));
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
     af8:	0e 94 35 08 	call	0x106a	; 0x106a <printHexWord>
	printString("\r\n");
     afc:	81 e8       	ldi	r24, 0x81	; 129
     afe:	92 e0       	ldi	r25, 0x02	; 2
     b00:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	
	printString("Metering Status: ");
     b04:	85 e6       	ldi	r24, 0x65	; 101
     b06:	91 e0       	ldi	r25, 0x01	; 1
     b08:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	printHexWord(get_pIC_RegValue(EnStatus));
     b0c:	86 e4       	ldi	r24, 0x46	; 70
     b0e:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
     b12:	0e 94 35 08 	call	0x106a	; 0x106a <printHexWord>
	printString("\r\n");
     b16:	81 e8       	ldi	r24, 0x81	; 129
     b18:	92 e0       	ldi	r25, 0x02	; 2
     b1a:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	
	printString("Metering Mode: ");
     b1e:	87 e7       	ldi	r24, 0x77	; 119
     b20:	91 e0       	ldi	r25, 0x01	; 1
     b22:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	printHexWord(get_pIC_RegValue(MMode));
     b26:	8b e2       	ldi	r24, 0x2B	; 43
     b28:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
     b2c:	0e 94 35 08 	call	0x106a	; 0x106a <printHexWord>
	printString("\r\n");
     b30:	81 e8       	ldi	r24, 0x81	; 129
     b32:	92 e0       	ldi	r25, 0x02	; 2
     b34:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	
	printString("Checksum 1: ");
     b38:	87 e8       	ldi	r24, 0x87	; 135
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	printHexWord(get_pIC_RegValue(CS1));
     b40:	8c e2       	ldi	r24, 0x2C	; 44
     b42:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
     b46:	0e 94 35 08 	call	0x106a	; 0x106a <printHexWord>
	printString("\r\n");
     b4a:	81 e8       	ldi	r24, 0x81	; 129
     b4c:	92 e0       	ldi	r25, 0x02	; 2
     b4e:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	
	printString("Checksum 2: ");
     b52:	84 e9       	ldi	r24, 0x94	; 148
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	printHexWord((get_pIC_RegValue(CS2)));
     b5a:	8b e3       	ldi	r24, 0x3B	; 59
     b5c:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
     b60:	0e 94 35 08 	call	0x106a	; 0x106a <printHexWord>
	printString("\r\n");
     b64:	81 e8       	ldi	r24, 0x81	; 129
     b66:	92 e0       	ldi	r25, 0x02	; 2
     b68:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	
	printString("Measurement Calibration Start Command: ");
     b6c:	81 ea       	ldi	r24, 0xA1	; 161
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	printHexWord((get_pIC_RegValue(AdjStart)));
     b74:	80 e3       	ldi	r24, 0x30	; 48
     b76:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
     b7a:	0e 94 35 08 	call	0x106a	; 0x106a <printHexWord>
	printString("\r\n");
     b7e:	81 e8       	ldi	r24, 0x81	; 129
     b80:	92 e0       	ldi	r25, 0x02	; 2
     b82:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	
	printString("Voltage RMS Gain: ");
     b86:	89 ec       	ldi	r24, 0xC9	; 201
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	printHexWord((get_pIC_RegValue(Ugain)));
     b8e:	81 e3       	ldi	r24, 0x31	; 49
     b90:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
     b94:	0e 94 35 08 	call	0x106a	; 0x106a <printHexWord>
	printString("\r\n");
     b98:	81 e8       	ldi	r24, 0x81	; 129
     b9a:	92 e0       	ldi	r25, 0x02	; 2
     b9c:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	
	printString("L Line Current RMS Gain: ");
     ba0:	8c ed       	ldi	r24, 0xDC	; 220
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	printHexWord((get_pIC_RegValue(IgainL)));
     ba8:	82 e3       	ldi	r24, 0x32	; 50
     baa:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
     bae:	0e 94 35 08 	call	0x106a	; 0x106a <printHexWord>
	printString("\r\n");
     bb2:	81 e8       	ldi	r24, 0x81	; 129
     bb4:	92 e0       	ldi	r25, 0x02	; 2
     bb6:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
     bba:	08 95       	ret

00000bbc <print_power_data>:

void print_power_data(void){
	
	//printString("Measurement Calibration start: \r\n");
	//printWord(get_pIC_RegValue(AdjStart));
	printString("Voltage: ");
     bbc:	86 ef       	ldi	r24, 0xF6	; 246
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	printVoltage(get_pIC_RegValue(Urms));
     bc4:	89 e4       	ldi	r24, 0x49	; 73
     bc6:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
     bca:	0e 94 1f 01 	call	0x23e	; 0x23e <printVoltage>
	printString("\t\tCurrent: ");
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	92 e0       	ldi	r25, 0x02	; 2
     bd2:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	printCurrent(get_pIC_RegValue(Irms));
     bd6:	88 e4       	ldi	r24, 0x48	; 72
     bd8:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
     bdc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <printCurrent>
	printString("\r\n");
     be0:	81 e8       	ldi	r24, 0x81	; 129
     be2:	92 e0       	ldi	r25, 0x02	; 2
     be4:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	printString("Frequency: ");
     be8:	8c e0       	ldi	r24, 0x0C	; 12
     bea:	92 e0       	ldi	r25, 0x02	; 2
     bec:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	printFrequency(get_pIC_RegValue(Freq));
     bf0:	8c e4       	ldi	r24, 0x4C	; 76
     bf2:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
     bf6:	0e 94 05 03 	call	0x60a	; 0x60a <printFrequency>
	printString("\tPower Factor: ");
     bfa:	88 e1       	ldi	r24, 0x18	; 24
     bfc:	92 e0       	ldi	r25, 0x02	; 2
     bfe:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	printPowerFactor(get_pIC_RegValue(PowerF));
     c02:	8d e4       	ldi	r24, 0x4D	; 77
     c04:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
     c08:	0e 94 a3 03 	call	0x746	; 0x746 <printPowerFactor>
	printString("\tPhase Angle: ");
     c0c:	88 e2       	ldi	r24, 0x28	; 40
     c0e:	92 e0       	ldi	r25, 0x02	; 2
     c10:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	printPhaseAngle(get_pIC_RegValue(Pangle));
     c14:	8e e4       	ldi	r24, 0x4E	; 78
     c16:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
     c1a:	0e 94 10 04 	call	0x820	; 0x820 <printPhaseAngle>
	printString("\n\rActive Power: ");
     c1e:	87 e3       	ldi	r24, 0x37	; 55
     c20:	92 e0       	ldi	r25, 0x02	; 2
     c22:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	printPower(get_pIC_RegValue(Pmean));
     c26:	8a e4       	ldi	r24, 0x4A	; 74
     c28:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
     c2c:	0e 94 83 02 	call	0x506	; 0x506 <printPower>
	printString("\tReactive Power: ");
     c30:	88 e4       	ldi	r24, 0x48	; 72
     c32:	92 e0       	ldi	r25, 0x02	; 2
     c34:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	printPower(get_pIC_RegValue(Qmean));
     c38:	8b e4       	ldi	r24, 0x4B	; 75
     c3a:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
     c3e:	0e 94 83 02 	call	0x506	; 0x506 <printPower>
	printString("\tAbsolute Power: ");
     c42:	8a e5       	ldi	r24, 0x5A	; 90
     c44:	92 e0       	ldi	r25, 0x02	; 2
     c46:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	printPower(get_pIC_RegValue(Smean));
     c4a:	8f e4       	ldi	r24, 0x4F	; 79
     c4c:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
     c50:	0e 94 83 02 	call	0x506	; 0x506 <printPower>
	printString("\r\n\n");
     c54:	8c e6       	ldi	r24, 0x6C	; 108
     c56:	92 e0       	ldi	r25, 0x02	; 2
     c58:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
     c5c:	08 95       	ret

00000c5e <main>:
uint8_t clockAddressW = 0b11010000; // read bit for DS1307
uint8_t to_address[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2}; // RF channel address.

int main(void)
{
	initUSART();
     c5e:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <initUSART>
	initI2C();
     c62:	0e 94 53 00 	call	0xa6	; 0xa6 <initI2C>
	SPI_init();
     c66:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <SPI_init>
	
	//bool on = false;
	sei();
     c6a:	78 94       	sei
	//nRF24L01 *rf = setup_rf();
	setup_rf();
     c6c:	0e 94 31 05 	call	0xa62	; 0xa62 <setup_rf>
	//m90E26 *pIC = setup_powerIC();
	
	pIC_Start();
     c70:	0e 94 83 00 	call	0x106	; 0x106 <pIC_Start>
	setup_timer();
     c74:	0e 94 59 05 	call	0xab2	; 0xab2 <setup_timer>
	
	printString("Starting Program!\r\n");
     c78:	80 e7       	ldi	r24, 0x70	; 112
     c7a:	92 e0       	ldi	r25, 0x02	; 2
     c7c:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	
	//print_RF_settings();
	
	print_power_IC_settings();
     c80:	0e 94 6d 05 	call	0xada	; 0xada <print_power_IC_settings>
	//set_pIC_RegValue(SmallPMod, 0xA987);
	int counter=0;
	
	//print_power_data();
	int kWh = 0;
     c84:	c0 e0       	ldi	r28, 0x00	; 0
     c86:	d0 e0       	ldi	r29, 0x00	; 0
	
	//print_RF_settings();
	
	print_power_IC_settings();
	//set_pIC_RegValue(SmallPMod, 0xA987);
	int counter=0;
     c88:	00 e0       	ldi	r16, 0x00	; 0
     c8a:	10 e0       	ldi	r17, 0x00	; 0
	int kWh = 0;
	
    while (1) 
    {
		
		if (send_message){
     c8c:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <__data_end>
     c90:	88 23       	and	r24, r24
     c92:	e1 f3       	breq	.-8      	; 0xc8c <main+0x2e>
			print_power_data();
     c94:	0e 94 de 05 	call	0xbbc	; 0xbbc <print_power_data>
			kWh += get_pIC_RegValue(ATenergy);
     c98:	82 e4       	ldi	r24, 0x42	; 66
     c9a:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
     c9e:	c8 0f       	add	r28, r24
     ca0:	d9 1f       	adc	r29, r25
			printEnergy(kWh);
     ca2:	ce 01       	movw	r24, r28
     ca4:	0e 94 7f 04 	call	0x8fe	; 0x8fe <printEnergy>
			printString("\r\n");
     ca8:	81 e8       	ldi	r24, 0x81	; 129
     caa:	92 e0       	ldi	r25, 0x02	; 2
     cac:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
			send_message = false;
     cb0:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <__data_end>
			if (counter < 5){
     cb4:	05 30       	cpi	r16, 0x05	; 5
     cb6:	11 05       	cpc	r17, r1
     cb8:	4c f7       	brge	.-46     	; 0xc8c <main+0x2e>
				//printHexWord(get_pIC_RegValue(Pmean));
				//printString("\r\n");
				counter++;
     cba:	0f 5f       	subi	r16, 0xFF	; 255
     cbc:	1f 4f       	sbci	r17, 0xFF	; 255
     cbe:	e6 cf       	rjmp	.-52     	; 0xc8c <main+0x2e>

00000cc0 <__vector_11>:
	printString("\r\n\n");
	
}

// each one second interrupt
ISR(TIMER1_COMPA_vect) {
     cc0:	1f 92       	push	r1
     cc2:	0f 92       	push	r0
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	0f 92       	push	r0
     cc8:	11 24       	eor	r1, r1
     cca:	8f 93       	push	r24
	send_message = true;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <__data_end>
}
     cd2:	8f 91       	pop	r24
     cd4:	0f 90       	pop	r0
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	0f 90       	pop	r0
     cda:	1f 90       	pop	r1
     cdc:	18 95       	reti

00000cde <__vector_1>:

// nRF24L01 interrupt
ISR(INT0_vect) {
     cde:	1f 92       	push	r1
     ce0:	0f 92       	push	r0
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	0f 92       	push	r0
     ce6:	11 24       	eor	r1, r1
     ce8:	8f 93       	push	r24
	rf_interrupt = true;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <rf_interrupt>
     cf0:	8f 91       	pop	r24
     cf2:	0f 90       	pop	r0
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	0f 90       	pop	r0
     cf8:	1f 90       	pop	r1
     cfa:	18 95       	reti

00000cfc <nRF24L01_init>:
     cfc:	80 e1       	ldi	r24, 0x10	; 16
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <malloc>
     d04:	20 e1       	ldi	r18, 0x10	; 16
     d06:	fc 01       	movw	r30, r24
     d08:	11 92       	st	Z+, r1
     d0a:	2a 95       	dec	r18
     d0c:	e9 f7       	brne	.-6      	; 0xd08 <nRF24L01_init+0xc>
     d0e:	08 95       	ret

00000d10 <nRF24L01_send_command>:
     d10:	cf 92       	push	r12
     d12:	df 92       	push	r13
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	7c 01       	movw	r14, r24
     d22:	86 2f       	mov	r24, r22
     d24:	6a 01       	movw	r12, r20
     d26:	89 01       	movw	r16, r18
     d28:	d7 01       	movw	r26, r14
     d2a:	ed 91       	ld	r30, X+
     d2c:	fc 91       	ld	r31, X
     d2e:	11 97       	sbiw	r26, 0x01	; 1
     d30:	90 81       	ld	r25, Z
     d32:	21 e0       	ldi	r18, 0x01	; 1
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	12 96       	adiw	r26, 0x02	; 2
     d38:	0c 90       	ld	r0, X
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <nRF24L01_send_command+0x30>
     d3c:	22 0f       	add	r18, r18
     d3e:	33 1f       	adc	r19, r19
     d40:	0a 94       	dec	r0
     d42:	e2 f7       	brpl	.-8      	; 0xd3c <nRF24L01_send_command+0x2c>
     d44:	20 95       	com	r18
     d46:	29 23       	and	r18, r25
     d48:	20 83       	st	Z, r18
     d4a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <SPI_tradeByte>
     d4e:	f7 01       	movw	r30, r14
     d50:	87 87       	std	Z+15, r24	; 0x0f
     d52:	01 15       	cp	r16, r1
     d54:	11 05       	cpc	r17, r1
     d56:	51 f0       	breq	.+20     	; 0xd6c <nRF24L01_send_command+0x5c>
     d58:	e6 01       	movw	r28, r12
     d5a:	0c 0d       	add	r16, r12
     d5c:	1d 1d       	adc	r17, r13
     d5e:	88 81       	ld	r24, Y
     d60:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <SPI_tradeByte>
     d64:	89 93       	st	Y+, r24
     d66:	c0 17       	cp	r28, r16
     d68:	d1 07       	cpc	r29, r17
     d6a:	c9 f7       	brne	.-14     	; 0xd5e <nRF24L01_send_command+0x4e>
     d6c:	d7 01       	movw	r26, r14
     d6e:	ed 91       	ld	r30, X+
     d70:	fc 91       	ld	r31, X
     d72:	11 97       	sbiw	r26, 0x01	; 1
     d74:	20 81       	ld	r18, Z
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	12 96       	adiw	r26, 0x02	; 2
     d7c:	0c 90       	ld	r0, X
     d7e:	12 97       	sbiw	r26, 0x02	; 2
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <nRF24L01_send_command+0x76>
     d82:	88 0f       	add	r24, r24
     d84:	99 1f       	adc	r25, r25
     d86:	0a 94       	dec	r0
     d88:	e2 f7       	brpl	.-8      	; 0xd82 <nRF24L01_send_command+0x72>
     d8a:	82 2b       	or	r24, r18
     d8c:	80 83       	st	Z, r24
     d8e:	1f 96       	adiw	r26, 0x0f	; 15
     d90:	8c 91       	ld	r24, X
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	ff 90       	pop	r15
     d9c:	ef 90       	pop	r14
     d9e:	df 90       	pop	r13
     da0:	cf 90       	pop	r12
     da2:	08 95       	ret

00000da4 <nRF24L01_write_register>:
     da4:	60 62       	ori	r22, 0x20	; 32
     da6:	0e 94 88 06 	call	0xd10	; 0xd10 <nRF24L01_send_command>
     daa:	08 95       	ret

00000dac <nRF24L01_clear_interrupts>:
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	1f 92       	push	r1
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	20 e7       	ldi	r18, 0x70	; 112
     db8:	29 83       	std	Y+1, r18	; 0x01
     dba:	21 e0       	ldi	r18, 0x01	; 1
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	ae 01       	movw	r20, r28
     dc0:	4f 5f       	subi	r20, 0xFF	; 255
     dc2:	5f 4f       	sbci	r21, 0xFF	; 255
     dc4:	67 e0       	ldi	r22, 0x07	; 7
     dc6:	0e 94 d2 06 	call	0xda4	; 0xda4 <nRF24L01_write_register>
     dca:	0f 90       	pop	r0
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	08 95       	ret

00000dd2 <nRF24L01_begin>:
     dd2:	ff 92       	push	r15
     dd4:	0f 93       	push	r16
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	1f 92       	push	r1
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
     de2:	8c 01       	movw	r16, r24
     de4:	dc 01       	movw	r26, r24
     de6:	ed 91       	ld	r30, X+
     de8:	fc 91       	ld	r31, X
     dea:	11 97       	sbiw	r26, 0x01	; 1
     dec:	42 91       	ld	r20, -Z
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	9c 01       	movw	r18, r24
     df4:	12 96       	adiw	r26, 0x02	; 2
     df6:	0c 90       	ld	r0, X
     df8:	12 97       	sbiw	r26, 0x02	; 2
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <nRF24L01_begin+0x2e>
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <nRF24L01_begin+0x2a>
     e04:	24 2b       	or	r18, r20
     e06:	20 83       	st	Z, r18
     e08:	13 96       	adiw	r26, 0x03	; 3
     e0a:	ed 91       	ld	r30, X+
     e0c:	fc 91       	ld	r31, X
     e0e:	14 97       	sbiw	r26, 0x04	; 4
     e10:	42 91       	ld	r20, -Z
     e12:	9c 01       	movw	r18, r24
     e14:	15 96       	adiw	r26, 0x05	; 5
     e16:	0c 90       	ld	r0, X
     e18:	15 97       	sbiw	r26, 0x05	; 5
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <nRF24L01_begin+0x4e>
     e1c:	22 0f       	add	r18, r18
     e1e:	33 1f       	adc	r19, r19
     e20:	0a 94       	dec	r0
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <nRF24L01_begin+0x4a>
     e24:	24 2b       	or	r18, r20
     e26:	20 83       	st	Z, r18
     e28:	ed 91       	ld	r30, X+
     e2a:	fc 91       	ld	r31, X
     e2c:	11 97       	sbiw	r26, 0x01	; 1
     e2e:	40 81       	ld	r20, Z
     e30:	9c 01       	movw	r18, r24
     e32:	12 96       	adiw	r26, 0x02	; 2
     e34:	0c 90       	ld	r0, X
     e36:	12 97       	sbiw	r26, 0x02	; 2
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <nRF24L01_begin+0x6c>
     e3a:	22 0f       	add	r18, r18
     e3c:	33 1f       	adc	r19, r19
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <nRF24L01_begin+0x68>
     e42:	24 2b       	or	r18, r20
     e44:	20 83       	st	Z, r18
     e46:	13 96       	adiw	r26, 0x03	; 3
     e48:	ed 91       	ld	r30, X+
     e4a:	fc 91       	ld	r31, X
     e4c:	14 97       	sbiw	r26, 0x04	; 4
     e4e:	30 81       	ld	r19, Z
     e50:	ac 01       	movw	r20, r24
     e52:	15 96       	adiw	r26, 0x05	; 5
     e54:	0c 90       	ld	r0, X
     e56:	15 97       	sbiw	r26, 0x05	; 5
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <nRF24L01_begin+0x8c>
     e5a:	44 0f       	add	r20, r20
     e5c:	55 1f       	adc	r21, r21
     e5e:	0a 94       	dec	r0
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <nRF24L01_begin+0x88>
     e62:	24 2f       	mov	r18, r20
     e64:	20 95       	com	r18
     e66:	23 23       	and	r18, r19
     e68:	20 83       	st	Z, r18
     e6a:	16 96       	adiw	r26, 0x06	; 6
     e6c:	ed 91       	ld	r30, X+
     e6e:	fc 91       	ld	r31, X
     e70:	17 97       	sbiw	r26, 0x07	; 7
     e72:	42 91       	ld	r20, -Z
     e74:	9c 01       	movw	r18, r24
     e76:	18 96       	adiw	r26, 0x08	; 8
     e78:	0c 90       	ld	r0, X
     e7a:	18 97       	sbiw	r26, 0x08	; 8
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <nRF24L01_begin+0xb0>
     e7e:	22 0f       	add	r18, r18
     e80:	33 1f       	adc	r19, r19
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <nRF24L01_begin+0xac>
     e86:	24 2b       	or	r18, r20
     e88:	20 83       	st	Z, r18
     e8a:	19 96       	adiw	r26, 0x09	; 9
     e8c:	ed 91       	ld	r30, X+
     e8e:	fc 91       	ld	r31, X
     e90:	1a 97       	sbiw	r26, 0x0a	; 10
     e92:	42 91       	ld	r20, -Z
     e94:	9c 01       	movw	r18, r24
     e96:	1b 96       	adiw	r26, 0x0b	; 11
     e98:	0c 90       	ld	r0, X
     e9a:	1b 97       	sbiw	r26, 0x0b	; 11
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <nRF24L01_begin+0xd0>
     e9e:	22 0f       	add	r18, r18
     ea0:	33 1f       	adc	r19, r19
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <nRF24L01_begin+0xcc>
     ea6:	24 2b       	or	r18, r20
     ea8:	20 83       	st	Z, r18
     eaa:	1c 96       	adiw	r26, 0x0c	; 12
     eac:	ed 91       	ld	r30, X+
     eae:	fc 91       	ld	r31, X
     eb0:	1d 97       	sbiw	r26, 0x0d	; 13
     eb2:	22 91       	ld	r18, -Z
     eb4:	1e 96       	adiw	r26, 0x0e	; 14
     eb6:	0c 90       	ld	r0, X
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <nRF24L01_begin+0xec>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <nRF24L01_begin+0xe8>
     ec2:	80 95       	com	r24
     ec4:	82 23       	and	r24, r18
     ec6:	80 83       	st	Z, r24
     ec8:	0c b4       	in	r0, 0x2c	; 44
     eca:	04 fe       	sbrs	r0, 4
     ecc:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <SPI_init>
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	62 ee       	ldi	r22, 0xE2	; 226
     eda:	c8 01       	movw	r24, r16
     edc:	0e 94 88 06 	call	0xd10	; 0xd10 <nRF24L01_send_command>
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	61 ee       	ldi	r22, 0xE1	; 225
     eea:	c8 01       	movw	r24, r16
     eec:	0e 94 88 06 	call	0xd10	; 0xd10 <nRF24L01_send_command>
     ef0:	c8 01       	movw	r24, r16
     ef2:	0e 94 d6 06 	call	0xdac	; 0xdac <nRF24L01_clear_interrupts>
     ef6:	8f e0       	ldi	r24, 0x0F	; 15
     ef8:	89 83       	std	Y+1, r24	; 0x01
     efa:	21 e0       	ldi	r18, 0x01	; 1
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	ae 01       	movw	r20, r28
     f00:	4f 5f       	subi	r20, 0xFF	; 255
     f02:	5f 4f       	sbci	r21, 0xFF	; 255
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	c8 01       	movw	r24, r16
     f08:	0e 94 d2 06 	call	0xda4	; 0xda4 <nRF24L01_write_register>
     f0c:	0f 2e       	mov	r0, r31
     f0e:	ff e3       	ldi	r31, 0x3F	; 63
     f10:	ff 2e       	mov	r15, r31
     f12:	f0 2d       	mov	r31, r0
     f14:	f9 82       	std	Y+1, r15	; 0x01
     f16:	21 e0       	ldi	r18, 0x01	; 1
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	ae 01       	movw	r20, r28
     f1c:	4f 5f       	subi	r20, 0xFF	; 255
     f1e:	5f 4f       	sbci	r21, 0xFF	; 255
     f20:	61 e0       	ldi	r22, 0x01	; 1
     f22:	c8 01       	movw	r24, r16
     f24:	0e 94 d2 06 	call	0xda4	; 0xda4 <nRF24L01_write_register>
     f28:	89 e0       	ldi	r24, 0x09	; 9
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	21 e0       	ldi	r18, 0x01	; 1
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	ae 01       	movw	r20, r28
     f32:	4f 5f       	subi	r20, 0xFF	; 255
     f34:	5f 4f       	sbci	r21, 0xFF	; 255
     f36:	66 e0       	ldi	r22, 0x06	; 6
     f38:	c8 01       	movw	r24, r16
     f3a:	0e 94 d2 06 	call	0xda4	; 0xda4 <nRF24L01_write_register>
     f3e:	80 e6       	ldi	r24, 0x60	; 96
     f40:	89 83       	std	Y+1, r24	; 0x01
     f42:	21 e0       	ldi	r18, 0x01	; 1
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	ae 01       	movw	r20, r28
     f48:	4f 5f       	subi	r20, 0xFF	; 255
     f4a:	5f 4f       	sbci	r21, 0xFF	; 255
     f4c:	65 e0       	ldi	r22, 0x05	; 5
     f4e:	c8 01       	movw	r24, r16
     f50:	0e 94 d2 06 	call	0xda4	; 0xda4 <nRF24L01_write_register>
     f54:	f9 82       	std	Y+1, r15	; 0x01
     f56:	21 e0       	ldi	r18, 0x01	; 1
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	ae 01       	movw	r20, r28
     f5c:	4f 5f       	subi	r20, 0xFF	; 255
     f5e:	5f 4f       	sbci	r21, 0xFF	; 255
     f60:	6c e1       	ldi	r22, 0x1C	; 28
     f62:	c8 01       	movw	r24, r16
     f64:	0e 94 d2 06 	call	0xda4	; 0xda4 <nRF24L01_write_register>
     f68:	84 e0       	ldi	r24, 0x04	; 4
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	21 e0       	ldi	r18, 0x01	; 1
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	ae 01       	movw	r20, r28
     f72:	4f 5f       	subi	r20, 0xFF	; 255
     f74:	5f 4f       	sbci	r21, 0xFF	; 255
     f76:	6d e1       	ldi	r22, 0x1D	; 29
     f78:	c8 01       	movw	r24, r16
     f7a:	0e 94 d2 06 	call	0xda4	; 0xda4 <nRF24L01_write_register>
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	21 e0       	ldi	r18, 0x01	; 1
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	ae 01       	movw	r20, r28
     f88:	4f 5f       	subi	r20, 0xFF	; 255
     f8a:	5f 4f       	sbci	r21, 0xFF	; 255
     f8c:	62 e0       	ldi	r22, 0x02	; 2
     f8e:	c8 01       	movw	r24, r16
     f90:	0e 94 d2 06 	call	0xda4	; 0xda4 <nRF24L01_write_register>
     f94:	0f 90       	pop	r0
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	08 95       	ret

00000fa2 <SPI_init>:

#include "SPI.h"

void SPI_init(void){
	// set as master
	SPCR |= _BV(MSTR);
     fa2:	8c b5       	in	r24, 0x2c	; 44
     fa4:	80 61       	ori	r24, 0x10	; 16
     fa6:	8c bd       	out	0x2c, r24	; 44
	// enable SPI
	SPCR |= _BV(SPE);
     fa8:	8c b5       	in	r24, 0x2c	; 44
     faa:	80 64       	ori	r24, 0x40	; 64
     fac:	8c bd       	out	0x2c, r24	; 44
	// SPI mode 0: Clock Polarity CPOL = 0, Clock Phase CPHA = 0
	SPCR &= ~_BV(CPOL);
     fae:	8c b5       	in	r24, 0x2c	; 44
     fb0:	87 7f       	andi	r24, 0xF7	; 247
     fb2:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~_BV(CPHA);
     fb4:	8c b5       	in	r24, 0x2c	; 44
     fb6:	8b 7f       	andi	r24, 0xFB	; 251
     fb8:	8c bd       	out	0x2c, r24	; 44
	// Clock 2X speed
	//SPCR &= ~_BV(SPR0);
	SPCR |=_BV(SPR0);
     fba:	8c b5       	in	r24, 0x2c	; 44
     fbc:	81 60       	ori	r24, 0x01	; 1
     fbe:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~_BV(SPR1);
     fc0:	8c b5       	in	r24, 0x2c	; 44
     fc2:	8d 7f       	andi	r24, 0xFD	; 253
     fc4:	8c bd       	out	0x2c, r24	; 44
	//SPSR |= _BV(SPI2X);
	SPSR &= ~_BV(SPI2X);
     fc6:	8d b5       	in	r24, 0x2d	; 45
     fc8:	8e 7f       	andi	r24, 0xFE	; 254
     fca:	8d bd       	out	0x2d, r24	; 45
	// most significant first (MSB)
	SPCR &= ~_BV(DORD);
     fcc:	8c b5       	in	r24, 0x2c	; 44
     fce:	8f 7d       	andi	r24, 0xDF	; 223
     fd0:	8c bd       	out	0x2c, r24	; 44
     fd2:	08 95       	ret

00000fd4 <SPI_tradeByte>:
}

uint8_t SPI_tradeByte(uint8_t byte) {
	SPDR = byte;                       /* SPI starts sending immediately */
     fd4:	8e bd       	out	0x2e, r24	; 46
	//loop_until_bit_is_set(SPSR, SPIF);                /* wait until done */
	while (!(SPSR & _BV(SPIF)));
     fd6:	0d b4       	in	r0, 0x2d	; 45
     fd8:	07 fe       	sbrs	r0, 7
     fda:	fd cf       	rjmp	.-6      	; 0xfd6 <SPI_tradeByte+0x2>
	/* SPDR now contains the received byte */
	return SPDR;
     fdc:	8e b5       	in	r24, 0x2e	; 46
     fde:	08 95       	ret

00000fe0 <initUSART>:
    if (bit_is_set(byte, bit))
      transmitByte('1');
    else
      transmitByte('0');
  }
}
     fe0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     fe4:	83 e3       	ldi	r24, 0x33	; 51
     fe6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     fea:	e0 ec       	ldi	r30, 0xC0	; 192
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	8d 7f       	andi	r24, 0xFD	; 253
     ff2:	80 83       	st	Z, r24
     ff4:	88 e1       	ldi	r24, 0x18	; 24
     ff6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     ffa:	86 e0       	ldi	r24, 0x06	; 6
     ffc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    1000:	08 95       	ret

00001002 <transmitByte>:
    1002:	e0 ec       	ldi	r30, 0xC0	; 192
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	90 81       	ld	r25, Z
    1008:	95 ff       	sbrs	r25, 5
    100a:	fd cf       	rjmp	.-6      	; 0x1006 <transmitByte+0x4>
    100c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1010:	08 95       	ret

00001012 <printString>:
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	fc 01       	movw	r30, r24
    101a:	80 81       	ld	r24, Z
    101c:	88 23       	and	r24, r24
    101e:	59 f0       	breq	.+22     	; 0x1036 <printString+0x24>
    1020:	8f 01       	movw	r16, r30
    1022:	c0 e0       	ldi	r28, 0x00	; 0
    1024:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
    1028:	cf 5f       	subi	r28, 0xFF	; 255
    102a:	f8 01       	movw	r30, r16
    102c:	ec 0f       	add	r30, r28
    102e:	f1 1d       	adc	r31, r1
    1030:	80 81       	ld	r24, Z
    1032:	81 11       	cpse	r24, r1
    1034:	f7 cf       	rjmp	.-18     	; 0x1024 <printString+0x12>
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	08 95       	ret

0000103e <nibbleToHexCharacter>:

char nibbleToHexCharacter(uint8_t nibble) {
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
    103e:	8a 30       	cpi	r24, 0x0A	; 10
    1040:	10 f4       	brcc	.+4      	; 0x1046 <nibbleToHexCharacter+0x8>
    return ('0' + nibble);
    1042:	80 5d       	subi	r24, 0xD0	; 208
    1044:	08 95       	ret
  }
  else {
    return ('A' + nibble - 10);
    1046:	89 5c       	subi	r24, 0xC9	; 201
  }
}
    1048:	08 95       	ret

0000104a <printHexByte>:

void printHexByte(uint8_t byte) {
    104a:	cf 93       	push	r28
    104c:	c8 2f       	mov	r28, r24
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
  transmitByte(nibbleToHexCharacter(nibble));
    104e:	82 95       	swap	r24
    1050:	8f 70       	andi	r24, 0x0F	; 15
    1052:	0e 94 1f 08 	call	0x103e	; 0x103e <nibbleToHexCharacter>
    1056:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
  nibble = byte & 0b00001111;
  transmitByte(nibbleToHexCharacter(nibble));
    105a:	8c 2f       	mov	r24, r28
    105c:	8f 70       	andi	r24, 0x0F	; 15
    105e:	0e 94 1f 08 	call	0x103e	; 0x103e <nibbleToHexCharacter>
    1062:	0e 94 01 08 	call	0x1002	; 0x1002 <transmitByte>
}
    1066:	cf 91       	pop	r28
    1068:	08 95       	ret

0000106a <printHexWord>:
	  transmitByte('0' + ((word / 100) % 10));                 /* Hundreds */
	  transmitByte('0' + ((word / 10) % 10));                      /* Tens */
	  transmitByte('0' + (word % 10));                             /* Ones */
}

void printHexWord(uint16_t word){
    106a:	cf 93       	push	r28
    106c:	c8 2f       	mov	r28, r24
	printHexByte(word>>8);
    106e:	89 2f       	mov	r24, r25
    1070:	0e 94 25 08 	call	0x104a	; 0x104a <printHexByte>
	printHexByte(word & ~(0xff<<8));
    1074:	8c 2f       	mov	r24, r28
    1076:	0e 94 25 08 	call	0x104a	; 0x104a <printHexByte>
	printString("H");
    107a:	84 e8       	ldi	r24, 0x84	; 132
    107c:	92 e0       	ldi	r25, 0x02	; 2
    107e:	0e 94 09 08 	call	0x1012	; 0x1012 <printString>
	
}
    1082:	cf 91       	pop	r28
    1084:	08 95       	ret

00001086 <__divmodhi4>:
    1086:	97 fb       	bst	r25, 7
    1088:	07 2e       	mov	r0, r23
    108a:	16 f4       	brtc	.+4      	; 0x1090 <__divmodhi4+0xa>
    108c:	00 94       	com	r0
    108e:	07 d0       	rcall	.+14     	; 0x109e <__divmodhi4_neg1>
    1090:	77 fd       	sbrc	r23, 7
    1092:	09 d0       	rcall	.+18     	; 0x10a6 <__divmodhi4_neg2>
    1094:	0e 94 66 08 	call	0x10cc	; 0x10cc <__udivmodhi4>
    1098:	07 fc       	sbrc	r0, 7
    109a:	05 d0       	rcall	.+10     	; 0x10a6 <__divmodhi4_neg2>
    109c:	3e f4       	brtc	.+14     	; 0x10ac <__divmodhi4_exit>

0000109e <__divmodhi4_neg1>:
    109e:	90 95       	com	r25
    10a0:	81 95       	neg	r24
    10a2:	9f 4f       	sbci	r25, 0xFF	; 255
    10a4:	08 95       	ret

000010a6 <__divmodhi4_neg2>:
    10a6:	70 95       	com	r23
    10a8:	61 95       	neg	r22
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255

000010ac <__divmodhi4_exit>:
    10ac:	08 95       	ret

000010ae <__umulhisi3>:
    10ae:	a2 9f       	mul	r26, r18
    10b0:	b0 01       	movw	r22, r0
    10b2:	b3 9f       	mul	r27, r19
    10b4:	c0 01       	movw	r24, r0
    10b6:	a3 9f       	mul	r26, r19
    10b8:	70 0d       	add	r23, r0
    10ba:	81 1d       	adc	r24, r1
    10bc:	11 24       	eor	r1, r1
    10be:	91 1d       	adc	r25, r1
    10c0:	b2 9f       	mul	r27, r18
    10c2:	70 0d       	add	r23, r0
    10c4:	81 1d       	adc	r24, r1
    10c6:	11 24       	eor	r1, r1
    10c8:	91 1d       	adc	r25, r1
    10ca:	08 95       	ret

000010cc <__udivmodhi4>:
    10cc:	aa 1b       	sub	r26, r26
    10ce:	bb 1b       	sub	r27, r27
    10d0:	51 e1       	ldi	r21, 0x11	; 17
    10d2:	07 c0       	rjmp	.+14     	; 0x10e2 <__udivmodhi4_ep>

000010d4 <__udivmodhi4_loop>:
    10d4:	aa 1f       	adc	r26, r26
    10d6:	bb 1f       	adc	r27, r27
    10d8:	a6 17       	cp	r26, r22
    10da:	b7 07       	cpc	r27, r23
    10dc:	10 f0       	brcs	.+4      	; 0x10e2 <__udivmodhi4_ep>
    10de:	a6 1b       	sub	r26, r22
    10e0:	b7 0b       	sbc	r27, r23

000010e2 <__udivmodhi4_ep>:
    10e2:	88 1f       	adc	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	5a 95       	dec	r21
    10e8:	a9 f7       	brne	.-22     	; 0x10d4 <__udivmodhi4_loop>
    10ea:	80 95       	com	r24
    10ec:	90 95       	com	r25
    10ee:	bc 01       	movw	r22, r24
    10f0:	cd 01       	movw	r24, r26
    10f2:	08 95       	ret

000010f4 <malloc>:
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	82 30       	cpi	r24, 0x02	; 2
    10fe:	91 05       	cpc	r25, r1
    1100:	10 f4       	brcc	.+4      	; 0x1106 <malloc+0x12>
    1102:	82 e0       	ldi	r24, 0x02	; 2
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	e0 91 8a 02 	lds	r30, 0x028A	; 0x80028a <__flp>
    110a:	f0 91 8b 02 	lds	r31, 0x028B	; 0x80028b <__flp+0x1>
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	a0 e0       	ldi	r26, 0x00	; 0
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	30 97       	sbiw	r30, 0x00	; 0
    1118:	19 f1       	breq	.+70     	; 0x1160 <malloc+0x6c>
    111a:	40 81       	ld	r20, Z
    111c:	51 81       	ldd	r21, Z+1	; 0x01
    111e:	02 81       	ldd	r16, Z+2	; 0x02
    1120:	13 81       	ldd	r17, Z+3	; 0x03
    1122:	48 17       	cp	r20, r24
    1124:	59 07       	cpc	r21, r25
    1126:	c8 f0       	brcs	.+50     	; 0x115a <malloc+0x66>
    1128:	84 17       	cp	r24, r20
    112a:	95 07       	cpc	r25, r21
    112c:	69 f4       	brne	.+26     	; 0x1148 <malloc+0x54>
    112e:	10 97       	sbiw	r26, 0x00	; 0
    1130:	31 f0       	breq	.+12     	; 0x113e <malloc+0x4a>
    1132:	12 96       	adiw	r26, 0x02	; 2
    1134:	0c 93       	st	X, r16
    1136:	12 97       	sbiw	r26, 0x02	; 2
    1138:	13 96       	adiw	r26, 0x03	; 3
    113a:	1c 93       	st	X, r17
    113c:	27 c0       	rjmp	.+78     	; 0x118c <malloc+0x98>
    113e:	00 93 8a 02 	sts	0x028A, r16	; 0x80028a <__flp>
    1142:	10 93 8b 02 	sts	0x028B, r17	; 0x80028b <__flp+0x1>
    1146:	22 c0       	rjmp	.+68     	; 0x118c <malloc+0x98>
    1148:	21 15       	cp	r18, r1
    114a:	31 05       	cpc	r19, r1
    114c:	19 f0       	breq	.+6      	; 0x1154 <malloc+0x60>
    114e:	42 17       	cp	r20, r18
    1150:	53 07       	cpc	r21, r19
    1152:	18 f4       	brcc	.+6      	; 0x115a <malloc+0x66>
    1154:	9a 01       	movw	r18, r20
    1156:	bd 01       	movw	r22, r26
    1158:	ef 01       	movw	r28, r30
    115a:	df 01       	movw	r26, r30
    115c:	f8 01       	movw	r30, r16
    115e:	db cf       	rjmp	.-74     	; 0x1116 <malloc+0x22>
    1160:	21 15       	cp	r18, r1
    1162:	31 05       	cpc	r19, r1
    1164:	f9 f0       	breq	.+62     	; 0x11a4 <malloc+0xb0>
    1166:	28 1b       	sub	r18, r24
    1168:	39 0b       	sbc	r19, r25
    116a:	24 30       	cpi	r18, 0x04	; 4
    116c:	31 05       	cpc	r19, r1
    116e:	80 f4       	brcc	.+32     	; 0x1190 <malloc+0x9c>
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	9b 81       	ldd	r25, Y+3	; 0x03
    1174:	61 15       	cp	r22, r1
    1176:	71 05       	cpc	r23, r1
    1178:	21 f0       	breq	.+8      	; 0x1182 <malloc+0x8e>
    117a:	fb 01       	movw	r30, r22
    117c:	93 83       	std	Z+3, r25	; 0x03
    117e:	82 83       	std	Z+2, r24	; 0x02
    1180:	04 c0       	rjmp	.+8      	; 0x118a <malloc+0x96>
    1182:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <__flp+0x1>
    1186:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <__flp>
    118a:	fe 01       	movw	r30, r28
    118c:	32 96       	adiw	r30, 0x02	; 2
    118e:	44 c0       	rjmp	.+136    	; 0x1218 <malloc+0x124>
    1190:	fe 01       	movw	r30, r28
    1192:	e2 0f       	add	r30, r18
    1194:	f3 1f       	adc	r31, r19
    1196:	81 93       	st	Z+, r24
    1198:	91 93       	st	Z+, r25
    119a:	22 50       	subi	r18, 0x02	; 2
    119c:	31 09       	sbc	r19, r1
    119e:	39 83       	std	Y+1, r19	; 0x01
    11a0:	28 83       	st	Y, r18
    11a2:	3a c0       	rjmp	.+116    	; 0x1218 <malloc+0x124>
    11a4:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <__brkval>
    11a8:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <__brkval+0x1>
    11ac:	23 2b       	or	r18, r19
    11ae:	41 f4       	brne	.+16     	; 0x11c0 <malloc+0xcc>
    11b0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    11b4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    11b8:	30 93 89 02 	sts	0x0289, r19	; 0x800289 <__brkval+0x1>
    11bc:	20 93 88 02 	sts	0x0288, r18	; 0x800288 <__brkval>
    11c0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    11c4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    11c8:	21 15       	cp	r18, r1
    11ca:	31 05       	cpc	r19, r1
    11cc:	41 f4       	brne	.+16     	; 0x11de <malloc+0xea>
    11ce:	2d b7       	in	r18, 0x3d	; 61
    11d0:	3e b7       	in	r19, 0x3e	; 62
    11d2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    11d6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    11da:	24 1b       	sub	r18, r20
    11dc:	35 0b       	sbc	r19, r21
    11de:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <__brkval>
    11e2:	f0 91 89 02 	lds	r31, 0x0289	; 0x800289 <__brkval+0x1>
    11e6:	e2 17       	cp	r30, r18
    11e8:	f3 07       	cpc	r31, r19
    11ea:	a0 f4       	brcc	.+40     	; 0x1214 <malloc+0x120>
    11ec:	2e 1b       	sub	r18, r30
    11ee:	3f 0b       	sbc	r19, r31
    11f0:	28 17       	cp	r18, r24
    11f2:	39 07       	cpc	r19, r25
    11f4:	78 f0       	brcs	.+30     	; 0x1214 <malloc+0x120>
    11f6:	ac 01       	movw	r20, r24
    11f8:	4e 5f       	subi	r20, 0xFE	; 254
    11fa:	5f 4f       	sbci	r21, 0xFF	; 255
    11fc:	24 17       	cp	r18, r20
    11fe:	35 07       	cpc	r19, r21
    1200:	48 f0       	brcs	.+18     	; 0x1214 <malloc+0x120>
    1202:	4e 0f       	add	r20, r30
    1204:	5f 1f       	adc	r21, r31
    1206:	50 93 89 02 	sts	0x0289, r21	; 0x800289 <__brkval+0x1>
    120a:	40 93 88 02 	sts	0x0288, r20	; 0x800288 <__brkval>
    120e:	81 93       	st	Z+, r24
    1210:	91 93       	st	Z+, r25
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <malloc+0x124>
    1214:	e0 e0       	ldi	r30, 0x00	; 0
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	cf 01       	movw	r24, r30
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	08 95       	ret

00001224 <free>:
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	09 f4       	brne	.+2      	; 0x122e <free+0xa>
    122c:	81 c0       	rjmp	.+258    	; 0x1330 <free+0x10c>
    122e:	fc 01       	movw	r30, r24
    1230:	32 97       	sbiw	r30, 0x02	; 2
    1232:	13 82       	std	Z+3, r1	; 0x03
    1234:	12 82       	std	Z+2, r1	; 0x02
    1236:	a0 91 8a 02 	lds	r26, 0x028A	; 0x80028a <__flp>
    123a:	b0 91 8b 02 	lds	r27, 0x028B	; 0x80028b <__flp+0x1>
    123e:	10 97       	sbiw	r26, 0x00	; 0
    1240:	81 f4       	brne	.+32     	; 0x1262 <free+0x3e>
    1242:	20 81       	ld	r18, Z
    1244:	31 81       	ldd	r19, Z+1	; 0x01
    1246:	82 0f       	add	r24, r18
    1248:	93 1f       	adc	r25, r19
    124a:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <__brkval>
    124e:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <__brkval+0x1>
    1252:	28 17       	cp	r18, r24
    1254:	39 07       	cpc	r19, r25
    1256:	51 f5       	brne	.+84     	; 0x12ac <free+0x88>
    1258:	f0 93 89 02 	sts	0x0289, r31	; 0x800289 <__brkval+0x1>
    125c:	e0 93 88 02 	sts	0x0288, r30	; 0x800288 <__brkval>
    1260:	67 c0       	rjmp	.+206    	; 0x1330 <free+0x10c>
    1262:	ed 01       	movw	r28, r26
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	ce 17       	cp	r28, r30
    126a:	df 07       	cpc	r29, r31
    126c:	40 f4       	brcc	.+16     	; 0x127e <free+0x5a>
    126e:	4a 81       	ldd	r20, Y+2	; 0x02
    1270:	5b 81       	ldd	r21, Y+3	; 0x03
    1272:	9e 01       	movw	r18, r28
    1274:	41 15       	cp	r20, r1
    1276:	51 05       	cpc	r21, r1
    1278:	f1 f0       	breq	.+60     	; 0x12b6 <free+0x92>
    127a:	ea 01       	movw	r28, r20
    127c:	f5 cf       	rjmp	.-22     	; 0x1268 <free+0x44>
    127e:	d3 83       	std	Z+3, r29	; 0x03
    1280:	c2 83       	std	Z+2, r28	; 0x02
    1282:	40 81       	ld	r20, Z
    1284:	51 81       	ldd	r21, Z+1	; 0x01
    1286:	84 0f       	add	r24, r20
    1288:	95 1f       	adc	r25, r21
    128a:	c8 17       	cp	r28, r24
    128c:	d9 07       	cpc	r29, r25
    128e:	59 f4       	brne	.+22     	; 0x12a6 <free+0x82>
    1290:	88 81       	ld	r24, Y
    1292:	99 81       	ldd	r25, Y+1	; 0x01
    1294:	84 0f       	add	r24, r20
    1296:	95 1f       	adc	r25, r21
    1298:	02 96       	adiw	r24, 0x02	; 2
    129a:	91 83       	std	Z+1, r25	; 0x01
    129c:	80 83       	st	Z, r24
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	9b 81       	ldd	r25, Y+3	; 0x03
    12a2:	93 83       	std	Z+3, r25	; 0x03
    12a4:	82 83       	std	Z+2, r24	; 0x02
    12a6:	21 15       	cp	r18, r1
    12a8:	31 05       	cpc	r19, r1
    12aa:	29 f4       	brne	.+10     	; 0x12b6 <free+0x92>
    12ac:	f0 93 8b 02 	sts	0x028B, r31	; 0x80028b <__flp+0x1>
    12b0:	e0 93 8a 02 	sts	0x028A, r30	; 0x80028a <__flp>
    12b4:	3d c0       	rjmp	.+122    	; 0x1330 <free+0x10c>
    12b6:	e9 01       	movw	r28, r18
    12b8:	fb 83       	std	Y+3, r31	; 0x03
    12ba:	ea 83       	std	Y+2, r30	; 0x02
    12bc:	49 91       	ld	r20, Y+
    12be:	59 91       	ld	r21, Y+
    12c0:	c4 0f       	add	r28, r20
    12c2:	d5 1f       	adc	r29, r21
    12c4:	ec 17       	cp	r30, r28
    12c6:	fd 07       	cpc	r31, r29
    12c8:	61 f4       	brne	.+24     	; 0x12e2 <free+0xbe>
    12ca:	80 81       	ld	r24, Z
    12cc:	91 81       	ldd	r25, Z+1	; 0x01
    12ce:	84 0f       	add	r24, r20
    12d0:	95 1f       	adc	r25, r21
    12d2:	02 96       	adiw	r24, 0x02	; 2
    12d4:	e9 01       	movw	r28, r18
    12d6:	99 83       	std	Y+1, r25	; 0x01
    12d8:	88 83       	st	Y, r24
    12da:	82 81       	ldd	r24, Z+2	; 0x02
    12dc:	93 81       	ldd	r25, Z+3	; 0x03
    12de:	9b 83       	std	Y+3, r25	; 0x03
    12e0:	8a 83       	std	Y+2, r24	; 0x02
    12e2:	e0 e0       	ldi	r30, 0x00	; 0
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	12 96       	adiw	r26, 0x02	; 2
    12e8:	8d 91       	ld	r24, X+
    12ea:	9c 91       	ld	r25, X
    12ec:	13 97       	sbiw	r26, 0x03	; 3
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	19 f0       	breq	.+6      	; 0x12f8 <free+0xd4>
    12f2:	fd 01       	movw	r30, r26
    12f4:	dc 01       	movw	r26, r24
    12f6:	f7 cf       	rjmp	.-18     	; 0x12e6 <free+0xc2>
    12f8:	8d 91       	ld	r24, X+
    12fa:	9c 91       	ld	r25, X
    12fc:	11 97       	sbiw	r26, 0x01	; 1
    12fe:	9d 01       	movw	r18, r26
    1300:	2e 5f       	subi	r18, 0xFE	; 254
    1302:	3f 4f       	sbci	r19, 0xFF	; 255
    1304:	82 0f       	add	r24, r18
    1306:	93 1f       	adc	r25, r19
    1308:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <__brkval>
    130c:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <__brkval+0x1>
    1310:	28 17       	cp	r18, r24
    1312:	39 07       	cpc	r19, r25
    1314:	69 f4       	brne	.+26     	; 0x1330 <free+0x10c>
    1316:	30 97       	sbiw	r30, 0x00	; 0
    1318:	29 f4       	brne	.+10     	; 0x1324 <free+0x100>
    131a:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <__flp+0x1>
    131e:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <__flp>
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <free+0x104>
    1324:	13 82       	std	Z+3, r1	; 0x03
    1326:	12 82       	std	Z+2, r1	; 0x02
    1328:	b0 93 89 02 	sts	0x0289, r27	; 0x800289 <__brkval+0x1>
    132c:	a0 93 88 02 	sts	0x0288, r26	; 0x800288 <__brkval>
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	08 95       	ret

00001336 <_exit>:
    1336:	f8 94       	cli

00001338 <__stop_program>:
    1338:	ff cf       	rjmp	.-2      	; 0x1338 <__stop_program>
