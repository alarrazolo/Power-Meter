
PowerMeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000122  00800100  00000a6e  00000b02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800222  00800222  00000c24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b22  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db9  00000000  00000000  00003a06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001189  00000000  00000000  000047bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000624  00000000  00000000  00005948  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008da  00000000  00000000  00005f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016e2  00000000  00000000  00006846  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00007f28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <main>
  9e:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initI2C>:
//#ifndef F_CPU                          /* if not defined in Makefile... */
//#define F_CPU  1000000UL                     /* set a safe default baud rate */
//#endif

void initI2C(void) {
  TWBR = 32;                               /* set bit rate, see p. 242 */
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
                                     /* 8MHz / (16+2*TWBR*1) ~= 100kHz */
  TWCR |= (1 << TWEN);                                       /* enable */
  ac:	ec eb       	ldi	r30, 0xBC	; 188
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <get_pIC_RegValue>:
	set_pIC_RegValue(AdjStart, 0x56, 0x78);
	
}


uint16_t get_pIC_RegValue(uint8_t pICRegister){
  b8:	cf 93       	push	r28
	
	//send AND read Byte with register address Byte to read back 16 bit value.
	
	PORTB &= ~(1<<0); // set chip select bit low to initiate SPI communication. 
  ba:	28 98       	cbi	0x05, 0	; 5
	SPI_tradeByte(ReadRegPower | pICRegister); // AND read Byte with register address and send it over SPI
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_tradeByte>
	uint8_t highByte = SPI_tradeByte(0); // Read MSD Byte first.
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_tradeByte>
  c8:	c8 2f       	mov	r28, r24
	uint8_t lowByte = SPI_tradeByte(0); // Read LSD Byte second.
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_tradeByte>
	PORTB |= (1<<0); // set chip select bit high to terminate SPI communication.
  d0:	28 9a       	sbi	0x05, 0	; 5
	uint16_t full16Byte = (highByte << 8) | lowByte; // Combine MSB and LSB together into 16 bit Byte.
	return full16Byte; // return Byte to function call. 
  d2:	2c 2f       	mov	r18, r28
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	32 2f       	mov	r19, r18
  d8:	22 27       	eor	r18, r18
	
	//printHexByte(pIC_d1bitHigh);
	//printHexByte(pIC_d1bitLow);
	//printString("H\r\n");
	
}
  da:	a9 01       	movw	r20, r18
  dc:	48 2b       	or	r20, r24
  de:	ca 01       	movw	r24, r20
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <set_pIC_RegValue>:

void set_pIC_RegValue(uint8_t pICRegister, uint8_t highByte, uint8_t lowByte){
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	d6 2f       	mov	r29, r22
  ea:	c4 2f       	mov	r28, r20
	
	//send AND write Byte with register Byte to write 16 bit value into register.
	
	PORTB &= ~(1<<0); // set chip select bit low to initiate SPI communication. 
  ec:	28 98       	cbi	0x05, 0	; 5
	SPI_tradeByte(WriteRegPower | pICRegister); // AND write Byte with register address and send it over SPI.
  ee:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_tradeByte>
	SPI_tradeByte(highByte); // Write MSD Byte first.
  f2:	8d 2f       	mov	r24, r29
  f4:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_tradeByte>
	SPI_tradeByte(lowByte); // Write LSD Byte second.
  f8:	8c 2f       	mov	r24, r28
  fa:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_tradeByte>
	PORTB |= (1<<0); // set chip select bit high to terminate SPI communication.
  fe:	28 9a       	sbi	0x05, 0	; 5
	//printString(" to value: ");
	//printHexByte(highBit);
	//printHexByte(lowBit);
	//printString("H\r\n");
	
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <pIC_Start>:
}

void pIC_Start(void){
	
	// set chip select port to output.
	DDRB |= (1<<0);
 106:	20 9a       	sbi	0x04, 0	; 4
	//set chip select on power meter IC high
	PORTB |= (1<<0);
 108:	28 9a       	sbi	0x05, 0	; 5
	
	if(!((SPCR >> MSTR)&0x01)) SPI_init();
 10a:	0c b4       	in	r0, 0x2c	; 44
 10c:	04 fe       	sbrs	r0, 4
 10e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <SPI_init>
	set_pIC_RegValue(AdjStart, 0x56, 0x78);
 112:	48 e7       	ldi	r20, 0x78	; 120
 114:	66 e5       	ldi	r22, 0x56	; 86
 116:	80 e3       	ldi	r24, 0x30	; 48
 118:	0e 94 72 00 	call	0xe4	; 0xe4 <set_pIC_RegValue>
 11c:	08 95       	ret

0000011e <setup_rf>:
	printString("/");
	printByte(date);
	printString("/");
	printWord(year);
	printString("\r\n");
}
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	0e 94 98 01 	call	0x330	; 0x330 <nRF24L01_init>
 126:	ec 01       	movw	r28, r24
 128:	85 e2       	ldi	r24, 0x25	; 37
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	99 83       	std	Y+1, r25	; 0x01
 12e:	88 83       	st	Y, r24
 130:	22 e0       	ldi	r18, 0x02	; 2
 132:	2a 83       	std	Y+2, r18	; 0x02
 134:	9c 83       	std	Y+4, r25	; 0x04
 136:	8b 83       	std	Y+3, r24	; 0x03
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	2d 83       	std	Y+5, r18	; 0x05
 13c:	9f 83       	std	Y+7, r25	; 0x07
 13e:	8e 83       	std	Y+6, r24	; 0x06
 140:	25 e0       	ldi	r18, 0x05	; 5
 142:	28 87       	std	Y+8, r18	; 0x08
 144:	9a 87       	std	Y+10, r25	; 0x0a
 146:	89 87       	std	Y+9, r24	; 0x09
 148:	23 e0       	ldi	r18, 0x03	; 3
 14a:	2b 87       	std	Y+11, r18	; 0x0b
 14c:	9d 87       	std	Y+13, r25	; 0x0d
 14e:	8c 87       	std	Y+12, r24	; 0x0c
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	8e 87       	std	Y+14, r24	; 0x0e
 154:	e9 e6       	ldi	r30, 0x69	; 105
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	80 83       	st	Z, r24
 15e:	e8 9a       	sbi	0x1d, 0	; 29
 160:	ce 01       	movw	r24, r28
 162:	0e 94 03 02 	call	0x406	; 0x406 <nRF24L01_begin>
 166:	ce 01       	movw	r24, r28
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <setup_timer>:
 16e:	e1 e8       	ldi	r30, 0x81	; 129
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	88 60       	ori	r24, 0x08	; 8
 176:	80 83       	st	Z, r24
 178:	af e6       	ldi	r26, 0x6F	; 111
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	8c 91       	ld	r24, X
 17e:	82 60       	ori	r24, 0x02	; 2
 180:	8c 93       	st	X, r24
 182:	82 e1       	ldi	r24, 0x12	; 18
 184:	9a e7       	ldi	r25, 0x7A	; 122
 186:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 18a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 18e:	80 81       	ld	r24, Z
 190:	84 60       	ori	r24, 0x04	; 4
 192:	80 83       	st	Z, r24
 194:	08 95       	ret

00000196 <print_RF_settings>:
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
 19e:	85 e0       	ldi	r24, 0x05	; 5
 1a0:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <getRFRegValue>
 1a4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <printHexByte>
 1a8:	82 e2       	ldi	r24, 0x22	; 34
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
 1b0:	86 e2       	ldi	r24, 0x26	; 38
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
 1b8:	86 e0       	ldi	r24, 0x06	; 6
 1ba:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <getRFRegValue>
 1be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <printHexByte>
 1c2:	82 e2       	ldi	r24, 0x22	; 34
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
 1ca:	08 95       	ret

000001cc <print_power_IC_settings>:

void print_power_IC_settings(void){
	printString("Power IC Settings:");
 1cc:	8e e3       	ldi	r24, 0x3E	; 62
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
	printString("\r\n");
 1d4:	88 ec       	ldi	r24, 0xC8	; 200
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
	
	printString("pIC Reg Value 01H: ");
 1dc:	81 e5       	ldi	r24, 0x51	; 81
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
	printWord(get_pIC_RegValue(0x01));
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 1ea:	0e 94 41 03 	call	0x682	; 0x682 <printWord>
	printString("\r\n");
 1ee:	88 ec       	ldi	r24, 0xC8	; 200
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
	
	printString("pIC Reg Value 03H: ");
 1f6:	85 e6       	ldi	r24, 0x65	; 101
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
	printWord(get_pIC_RegValue(0x03));
 1fe:	83 e0       	ldi	r24, 0x03	; 3
 200:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 204:	0e 94 41 03 	call	0x682	; 0x682 <printWord>
	printString("\r\n");
 208:	88 ec       	ldi	r24, 0xC8	; 200
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
	
	printString("Metering Mode: ");
 210:	89 e7       	ldi	r24, 0x79	; 121
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
	printWord(get_pIC_RegValue(0x2B));
 218:	8b e2       	ldi	r24, 0x2B	; 43
 21a:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 21e:	0e 94 41 03 	call	0x682	; 0x682 <printWord>
	printString("\r\n");
 222:	88 ec       	ldi	r24, 0xC8	; 200
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
	
	printString("Measurement Calibration start: ");
 22a:	89 e8       	ldi	r24, 0x89	; 137
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
	printWord((get_pIC_RegValue(0x30)));
 232:	80 e3       	ldi	r24, 0x30	; 48
 234:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 238:	0e 94 41 03 	call	0x682	; 0x682 <printWord>
	printString("\r\n");
 23c:	88 ec       	ldi	r24, 0xC8	; 200
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
 244:	08 95       	ret

00000246 <print_power_data>:
	
}

void print_power_data(void){
	
	printString("Measurement Calibration start: \r\n");
 246:	89 ea       	ldi	r24, 0xA9	; 169
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
	printWord(get_pIC_RegValue(0x30));
 24e:	80 e3       	ldi	r24, 0x30	; 48
 250:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 254:	0e 94 41 03 	call	0x682	; 0x682 <printWord>
	printString("Voltage: ");
 258:	8b ec       	ldi	r24, 0xCB	; 203
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
	printWord(get_pIC_RegValue(0x49));
 260:	89 e4       	ldi	r24, 0x49	; 73
 262:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 266:	0e 94 41 03 	call	0x682	; 0x682 <printWord>
	printString("\tCurrent: ");
 26a:	85 ed       	ldi	r24, 0xD5	; 213
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
	printWord(get_pIC_RegValue(0x48));
 272:	88 e4       	ldi	r24, 0x48	; 72
 274:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 278:	0e 94 41 03 	call	0x682	; 0x682 <printWord>
	printString("\t Active Power: ");
 27c:	80 ee       	ldi	r24, 0xE0	; 224
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
	printWord(get_pIC_RegValue(0x4A));
 284:	8a e4       	ldi	r24, 0x4A	; 74
 286:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 28a:	0e 94 41 03 	call	0x682	; 0x682 <printWord>
	printString("\tFrequency: ");
 28e:	81 ef       	ldi	r24, 0xF1	; 241
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
	printWord(get_pIC_RegValue(0x4C));
 296:	8c e4       	ldi	r24, 0x4C	; 76
 298:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 29c:	0e 94 41 03 	call	0x682	; 0x682 <printWord>
	printString("\tPower Factor: ");
 2a0:	8e ef       	ldi	r24, 0xFE	; 254
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
	printWord(get_pIC_RegValue(0x4D));
 2a8:	8d e4       	ldi	r24, 0x4D	; 77
 2aa:	0e 94 5c 00 	call	0xb8	; 0xb8 <get_pIC_RegValue>
 2ae:	0e 94 41 03 	call	0x682	; 0x682 <printWord>
	printString("\r\n");
 2b2:	88 ec       	ldi	r24, 0xC8	; 200
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
 2ba:	08 95       	ret

000002bc <main>:
uint8_t clockAddressW = 0b11010000; // read bit for DS1307
uint8_t to_address[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2}; // RF channel address.

int main(void)
{
	initUSART();
 2bc:	0e 94 12 03 	call	0x624	; 0x624 <initUSART>
	initI2C();
 2c0:	0e 94 53 00 	call	0xa6	; 0xa6 <initI2C>
	SPI_init();
 2c4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <SPI_init>
	
	//bool on = false;
	sei();
 2c8:	78 94       	sei
	//nRF24L01 *rf = setup_rf();
	setup_rf();
 2ca:	0e 94 8f 00 	call	0x11e	; 0x11e <setup_rf>
	//m90E26 *pIC = setup_powerIC();
	
	pIC_Start();
 2ce:	0e 94 83 00 	call	0x106	; 0x106 <pIC_Start>
	setup_timer();
 2d2:	0e 94 b7 00 	call	0x16e	; 0x16e <setup_timer>
	
	printString("Starting Program!\r\n");
 2d6:	8e e0       	ldi	r24, 0x0E	; 14
 2d8:	92 e0       	ldi	r25, 0x02	; 2
 2da:	0e 94 2b 03 	call	0x656	; 0x656 <printString>
	
	print_RF_settings();
 2de:	0e 94 cb 00 	call	0x196	; 0x196 <print_RF_settings>
	
	print_power_IC_settings();
 2e2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <print_power_IC_settings>
	
    while (1) 
    {
		
		if (send_message) print_power_data();
 2e6:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end>
 2ea:	88 23       	and	r24, r24
 2ec:	e1 f3       	breq	.-8      	; 0x2e6 <main+0x2a>
 2ee:	0e 94 23 01 	call	0x246	; 0x246 <print_power_data>
 2f2:	f9 cf       	rjmp	.-14     	; 0x2e6 <main+0x2a>

000002f4 <__vector_11>:
	printString("\r\n");
	
}

// each one second interrupt
ISR(TIMER1_COMPA_vect) {
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	8f 93       	push	r24
	send_message = true;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <__data_end>
}
 306:	8f 91       	pop	r24
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <__vector_1>:

// nRF24L01 interrupt
ISR(INT0_vect) {
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	8f 93       	push	r24
	rf_interrupt = true;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <rf_interrupt>
 324:	8f 91       	pop	r24
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <nRF24L01_init>:
        nRF24L01_send_command(rf, R_RX_PAYLOAD, &message->data,
            message->length);
    }

    return true;
}
 330:	80 e1       	ldi	r24, 0x10	; 16
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 14 04 	call	0x828	; 0x828 <malloc>
 338:	20 e1       	ldi	r18, 0x10	; 16
 33a:	fc 01       	movw	r30, r24
 33c:	11 92       	st	Z+, r1
 33e:	2a 95       	dec	r18
 340:	e9 f7       	brne	.-6      	; 0x33c <nRF24L01_init+0xc>
 342:	08 95       	ret

00000344 <nRF24L01_send_command>:
 344:	cf 92       	push	r12
 346:	df 92       	push	r13
 348:	ef 92       	push	r14
 34a:	ff 92       	push	r15
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	7c 01       	movw	r14, r24
 356:	86 2f       	mov	r24, r22
 358:	6a 01       	movw	r12, r20
 35a:	89 01       	movw	r16, r18
 35c:	d7 01       	movw	r26, r14
 35e:	ed 91       	ld	r30, X+
 360:	fc 91       	ld	r31, X
 362:	11 97       	sbiw	r26, 0x01	; 1
 364:	90 81       	ld	r25, Z
 366:	21 e0       	ldi	r18, 0x01	; 1
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	12 96       	adiw	r26, 0x02	; 2
 36c:	0c 90       	ld	r0, X
 36e:	02 c0       	rjmp	.+4      	; 0x374 <nRF24L01_send_command+0x30>
 370:	22 0f       	add	r18, r18
 372:	33 1f       	adc	r19, r19
 374:	0a 94       	dec	r0
 376:	e2 f7       	brpl	.-8      	; 0x370 <nRF24L01_send_command+0x2c>
 378:	20 95       	com	r18
 37a:	29 23       	and	r18, r25
 37c:	20 83       	st	Z, r18
 37e:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_tradeByte>
 382:	f7 01       	movw	r30, r14
 384:	87 87       	std	Z+15, r24	; 0x0f
 386:	01 15       	cp	r16, r1
 388:	11 05       	cpc	r17, r1
 38a:	51 f0       	breq	.+20     	; 0x3a0 <nRF24L01_send_command+0x5c>
 38c:	e6 01       	movw	r28, r12
 38e:	0c 0d       	add	r16, r12
 390:	1d 1d       	adc	r17, r13
 392:	88 81       	ld	r24, Y
 394:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_tradeByte>
 398:	89 93       	st	Y+, r24
 39a:	c0 17       	cp	r28, r16
 39c:	d1 07       	cpc	r29, r17
 39e:	c9 f7       	brne	.-14     	; 0x392 <nRF24L01_send_command+0x4e>
 3a0:	d7 01       	movw	r26, r14
 3a2:	ed 91       	ld	r30, X+
 3a4:	fc 91       	ld	r31, X
 3a6:	11 97       	sbiw	r26, 0x01	; 1
 3a8:	20 81       	ld	r18, Z
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	12 96       	adiw	r26, 0x02	; 2
 3b0:	0c 90       	ld	r0, X
 3b2:	12 97       	sbiw	r26, 0x02	; 2
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <nRF24L01_send_command+0x76>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	0a 94       	dec	r0
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <nRF24L01_send_command+0x72>
 3be:	82 2b       	or	r24, r18
 3c0:	80 83       	st	Z, r24
 3c2:	1f 96       	adiw	r26, 0x0f	; 15
 3c4:	8c 91       	ld	r24, X
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	1f 91       	pop	r17
 3cc:	0f 91       	pop	r16
 3ce:	ff 90       	pop	r15
 3d0:	ef 90       	pop	r14
 3d2:	df 90       	pop	r13
 3d4:	cf 90       	pop	r12
 3d6:	08 95       	ret

000003d8 <nRF24L01_write_register>:
 3d8:	60 62       	ori	r22, 0x20	; 32
 3da:	0e 94 a2 01 	call	0x344	; 0x344 <nRF24L01_send_command>
 3de:	08 95       	ret

000003e0 <nRF24L01_clear_interrupts>:
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	1f 92       	push	r1
 3e6:	cd b7       	in	r28, 0x3d	; 61
 3e8:	de b7       	in	r29, 0x3e	; 62
 3ea:	20 e7       	ldi	r18, 0x70	; 112
 3ec:	29 83       	std	Y+1, r18	; 0x01
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	ae 01       	movw	r20, r28
 3f4:	4f 5f       	subi	r20, 0xFF	; 255
 3f6:	5f 4f       	sbci	r21, 0xFF	; 255
 3f8:	67 e0       	ldi	r22, 0x07	; 7
 3fa:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <nRF24L01_write_register>
 3fe:	0f 90       	pop	r0
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <nRF24L01_begin>:
 406:	ff 92       	push	r15
 408:	0f 93       	push	r16
 40a:	1f 93       	push	r17
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	1f 92       	push	r1
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62
 416:	8c 01       	movw	r16, r24
 418:	dc 01       	movw	r26, r24
 41a:	ed 91       	ld	r30, X+
 41c:	fc 91       	ld	r31, X
 41e:	11 97       	sbiw	r26, 0x01	; 1
 420:	42 91       	ld	r20, -Z
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	9c 01       	movw	r18, r24
 428:	12 96       	adiw	r26, 0x02	; 2
 42a:	0c 90       	ld	r0, X
 42c:	12 97       	sbiw	r26, 0x02	; 2
 42e:	02 c0       	rjmp	.+4      	; 0x434 <nRF24L01_begin+0x2e>
 430:	22 0f       	add	r18, r18
 432:	33 1f       	adc	r19, r19
 434:	0a 94       	dec	r0
 436:	e2 f7       	brpl	.-8      	; 0x430 <nRF24L01_begin+0x2a>
 438:	24 2b       	or	r18, r20
 43a:	20 83       	st	Z, r18
 43c:	13 96       	adiw	r26, 0x03	; 3
 43e:	ed 91       	ld	r30, X+
 440:	fc 91       	ld	r31, X
 442:	14 97       	sbiw	r26, 0x04	; 4
 444:	42 91       	ld	r20, -Z
 446:	9c 01       	movw	r18, r24
 448:	15 96       	adiw	r26, 0x05	; 5
 44a:	0c 90       	ld	r0, X
 44c:	15 97       	sbiw	r26, 0x05	; 5
 44e:	02 c0       	rjmp	.+4      	; 0x454 <nRF24L01_begin+0x4e>
 450:	22 0f       	add	r18, r18
 452:	33 1f       	adc	r19, r19
 454:	0a 94       	dec	r0
 456:	e2 f7       	brpl	.-8      	; 0x450 <nRF24L01_begin+0x4a>
 458:	24 2b       	or	r18, r20
 45a:	20 83       	st	Z, r18
 45c:	ed 91       	ld	r30, X+
 45e:	fc 91       	ld	r31, X
 460:	11 97       	sbiw	r26, 0x01	; 1
 462:	40 81       	ld	r20, Z
 464:	9c 01       	movw	r18, r24
 466:	12 96       	adiw	r26, 0x02	; 2
 468:	0c 90       	ld	r0, X
 46a:	12 97       	sbiw	r26, 0x02	; 2
 46c:	02 c0       	rjmp	.+4      	; 0x472 <nRF24L01_begin+0x6c>
 46e:	22 0f       	add	r18, r18
 470:	33 1f       	adc	r19, r19
 472:	0a 94       	dec	r0
 474:	e2 f7       	brpl	.-8      	; 0x46e <nRF24L01_begin+0x68>
 476:	24 2b       	or	r18, r20
 478:	20 83       	st	Z, r18
 47a:	13 96       	adiw	r26, 0x03	; 3
 47c:	ed 91       	ld	r30, X+
 47e:	fc 91       	ld	r31, X
 480:	14 97       	sbiw	r26, 0x04	; 4
 482:	30 81       	ld	r19, Z
 484:	ac 01       	movw	r20, r24
 486:	15 96       	adiw	r26, 0x05	; 5
 488:	0c 90       	ld	r0, X
 48a:	15 97       	sbiw	r26, 0x05	; 5
 48c:	02 c0       	rjmp	.+4      	; 0x492 <nRF24L01_begin+0x8c>
 48e:	44 0f       	add	r20, r20
 490:	55 1f       	adc	r21, r21
 492:	0a 94       	dec	r0
 494:	e2 f7       	brpl	.-8      	; 0x48e <nRF24L01_begin+0x88>
 496:	24 2f       	mov	r18, r20
 498:	20 95       	com	r18
 49a:	23 23       	and	r18, r19
 49c:	20 83       	st	Z, r18
 49e:	16 96       	adiw	r26, 0x06	; 6
 4a0:	ed 91       	ld	r30, X+
 4a2:	fc 91       	ld	r31, X
 4a4:	17 97       	sbiw	r26, 0x07	; 7
 4a6:	42 91       	ld	r20, -Z
 4a8:	9c 01       	movw	r18, r24
 4aa:	18 96       	adiw	r26, 0x08	; 8
 4ac:	0c 90       	ld	r0, X
 4ae:	18 97       	sbiw	r26, 0x08	; 8
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <nRF24L01_begin+0xb0>
 4b2:	22 0f       	add	r18, r18
 4b4:	33 1f       	adc	r19, r19
 4b6:	0a 94       	dec	r0
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <nRF24L01_begin+0xac>
 4ba:	24 2b       	or	r18, r20
 4bc:	20 83       	st	Z, r18
 4be:	19 96       	adiw	r26, 0x09	; 9
 4c0:	ed 91       	ld	r30, X+
 4c2:	fc 91       	ld	r31, X
 4c4:	1a 97       	sbiw	r26, 0x0a	; 10
 4c6:	42 91       	ld	r20, -Z
 4c8:	9c 01       	movw	r18, r24
 4ca:	1b 96       	adiw	r26, 0x0b	; 11
 4cc:	0c 90       	ld	r0, X
 4ce:	1b 97       	sbiw	r26, 0x0b	; 11
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <nRF24L01_begin+0xd0>
 4d2:	22 0f       	add	r18, r18
 4d4:	33 1f       	adc	r19, r19
 4d6:	0a 94       	dec	r0
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <nRF24L01_begin+0xcc>
 4da:	24 2b       	or	r18, r20
 4dc:	20 83       	st	Z, r18
 4de:	1c 96       	adiw	r26, 0x0c	; 12
 4e0:	ed 91       	ld	r30, X+
 4e2:	fc 91       	ld	r31, X
 4e4:	1d 97       	sbiw	r26, 0x0d	; 13
 4e6:	22 91       	ld	r18, -Z
 4e8:	1e 96       	adiw	r26, 0x0e	; 14
 4ea:	0c 90       	ld	r0, X
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <nRF24L01_begin+0xec>
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	0a 94       	dec	r0
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <nRF24L01_begin+0xe8>
 4f6:	80 95       	com	r24
 4f8:	82 23       	and	r24, r18
 4fa:	80 83       	st	Z, r24
 4fc:	0c b4       	in	r0, 0x2c	; 44
 4fe:	04 fe       	sbrs	r0, 4
 500:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <SPI_init>
 504:	20 e0       	ldi	r18, 0x00	; 0
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	40 e0       	ldi	r20, 0x00	; 0
 50a:	50 e0       	ldi	r21, 0x00	; 0
 50c:	62 ee       	ldi	r22, 0xE2	; 226
 50e:	c8 01       	movw	r24, r16
 510:	0e 94 a2 01 	call	0x344	; 0x344 <nRF24L01_send_command>
 514:	20 e0       	ldi	r18, 0x00	; 0
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	40 e0       	ldi	r20, 0x00	; 0
 51a:	50 e0       	ldi	r21, 0x00	; 0
 51c:	61 ee       	ldi	r22, 0xE1	; 225
 51e:	c8 01       	movw	r24, r16
 520:	0e 94 a2 01 	call	0x344	; 0x344 <nRF24L01_send_command>
 524:	c8 01       	movw	r24, r16
 526:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <nRF24L01_clear_interrupts>
 52a:	8f e0       	ldi	r24, 0x0F	; 15
 52c:	89 83       	std	Y+1, r24	; 0x01
 52e:	21 e0       	ldi	r18, 0x01	; 1
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	ae 01       	movw	r20, r28
 534:	4f 5f       	subi	r20, 0xFF	; 255
 536:	5f 4f       	sbci	r21, 0xFF	; 255
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	c8 01       	movw	r24, r16
 53c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <nRF24L01_write_register>
 540:	0f 2e       	mov	r0, r31
 542:	ff e3       	ldi	r31, 0x3F	; 63
 544:	ff 2e       	mov	r15, r31
 546:	f0 2d       	mov	r31, r0
 548:	f9 82       	std	Y+1, r15	; 0x01
 54a:	21 e0       	ldi	r18, 0x01	; 1
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	ae 01       	movw	r20, r28
 550:	4f 5f       	subi	r20, 0xFF	; 255
 552:	5f 4f       	sbci	r21, 0xFF	; 255
 554:	61 e0       	ldi	r22, 0x01	; 1
 556:	c8 01       	movw	r24, r16
 558:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <nRF24L01_write_register>
 55c:	89 e0       	ldi	r24, 0x09	; 9
 55e:	89 83       	std	Y+1, r24	; 0x01
 560:	21 e0       	ldi	r18, 0x01	; 1
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	ae 01       	movw	r20, r28
 566:	4f 5f       	subi	r20, 0xFF	; 255
 568:	5f 4f       	sbci	r21, 0xFF	; 255
 56a:	66 e0       	ldi	r22, 0x06	; 6
 56c:	c8 01       	movw	r24, r16
 56e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <nRF24L01_write_register>
 572:	80 e6       	ldi	r24, 0x60	; 96
 574:	89 83       	std	Y+1, r24	; 0x01
 576:	21 e0       	ldi	r18, 0x01	; 1
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	ae 01       	movw	r20, r28
 57c:	4f 5f       	subi	r20, 0xFF	; 255
 57e:	5f 4f       	sbci	r21, 0xFF	; 255
 580:	65 e0       	ldi	r22, 0x05	; 5
 582:	c8 01       	movw	r24, r16
 584:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <nRF24L01_write_register>
 588:	f9 82       	std	Y+1, r15	; 0x01
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	ae 01       	movw	r20, r28
 590:	4f 5f       	subi	r20, 0xFF	; 255
 592:	5f 4f       	sbci	r21, 0xFF	; 255
 594:	6c e1       	ldi	r22, 0x1C	; 28
 596:	c8 01       	movw	r24, r16
 598:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <nRF24L01_write_register>
 59c:	84 e0       	ldi	r24, 0x04	; 4
 59e:	89 83       	std	Y+1, r24	; 0x01
 5a0:	21 e0       	ldi	r18, 0x01	; 1
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	ae 01       	movw	r20, r28
 5a6:	4f 5f       	subi	r20, 0xFF	; 255
 5a8:	5f 4f       	sbci	r21, 0xFF	; 255
 5aa:	6d e1       	ldi	r22, 0x1D	; 29
 5ac:	c8 01       	movw	r24, r16
 5ae:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <nRF24L01_write_register>
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	89 83       	std	Y+1, r24	; 0x01
 5b6:	21 e0       	ldi	r18, 0x01	; 1
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	ae 01       	movw	r20, r28
 5bc:	4f 5f       	subi	r20, 0xFF	; 255
 5be:	5f 4f       	sbci	r21, 0xFF	; 255
 5c0:	62 e0       	ldi	r22, 0x02	; 2
 5c2:	c8 01       	movw	r24, r16
 5c4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <nRF24L01_write_register>
 5c8:	0f 90       	pop	r0
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	1f 91       	pop	r17
 5d0:	0f 91       	pop	r16
 5d2:	ff 90       	pop	r15
 5d4:	08 95       	ret

000005d6 <getRFRegValue>:
    nRF24L01_write_register(rf, STATUS, &data, 1);
}

uint8_t getRFRegValue(uint8_t rfRegister){
	
	PORTB &= ~(1<<2);
 5d6:	2a 98       	cbi	0x05, 2	; 5
	SPI_tradeByte(R_REGISTER | rfRegister);
 5d8:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_tradeByte>
	uint8_t rf_d1bit = SPI_tradeByte(0);
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	0e 94 0c 03 	call	0x618	; 0x618 <SPI_tradeByte>
	PORTB |= (1<<2);
 5e2:	2a 9a       	sbi	0x05, 2	; 5
	return rf_d1bit;
	
}
 5e4:	08 95       	ret

000005e6 <SPI_init>:

#include "SPI.h"

void SPI_init(void){
	// set as master
	SPCR |= _BV(MSTR);
 5e6:	8c b5       	in	r24, 0x2c	; 44
 5e8:	80 61       	ori	r24, 0x10	; 16
 5ea:	8c bd       	out	0x2c, r24	; 44
	// enable SPI
	SPCR |= _BV(SPE);
 5ec:	8c b5       	in	r24, 0x2c	; 44
 5ee:	80 64       	ori	r24, 0x40	; 64
 5f0:	8c bd       	out	0x2c, r24	; 44
	// SPI mode 0: Clock Polarity CPOL = 0, Clock Phase CPHA = 0
	SPCR &= ~_BV(CPOL);
 5f2:	8c b5       	in	r24, 0x2c	; 44
 5f4:	87 7f       	andi	r24, 0xF7	; 247
 5f6:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~_BV(CPHA);
 5f8:	8c b5       	in	r24, 0x2c	; 44
 5fa:	8b 7f       	andi	r24, 0xFB	; 251
 5fc:	8c bd       	out	0x2c, r24	; 44
	// Clock 2X speed
	//SPCR &= ~_BV(SPR0);
	SPCR |= _BV(SPR0);
 5fe:	8c b5       	in	r24, 0x2c	; 44
 600:	81 60       	ori	r24, 0x01	; 1
 602:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~_BV(SPR1);
 604:	8c b5       	in	r24, 0x2c	; 44
 606:	8d 7f       	andi	r24, 0xFD	; 253
 608:	8c bd       	out	0x2c, r24	; 44
	//SPSR |= _BV(SPI2X);
	SPSR &= ~_BV(SPI2X);
 60a:	8d b5       	in	r24, 0x2d	; 45
 60c:	8e 7f       	andi	r24, 0xFE	; 254
 60e:	8d bd       	out	0x2d, r24	; 45
	// most significant first (MSB)
	SPCR &= ~_BV(DORD);
 610:	8c b5       	in	r24, 0x2c	; 44
 612:	8f 7d       	andi	r24, 0xDF	; 223
 614:	8c bd       	out	0x2c, r24	; 44
 616:	08 95       	ret

00000618 <SPI_tradeByte>:
}

uint8_t SPI_tradeByte(uint8_t byte) {
	SPDR = byte;                       /* SPI starts sending immediately */
 618:	8e bd       	out	0x2e, r24	; 46
	//loop_until_bit_is_set(SPSR, SPIF);                /* wait until done */
	while (!(SPSR & _BV(SPIF)));
 61a:	0d b4       	in	r0, 0x2d	; 45
 61c:	07 fe       	sbrs	r0, 7
 61e:	fd cf       	rjmp	.-6      	; 0x61a <SPI_tradeByte+0x2>
	/* SPDR now contains the received byte */
	return SPDR;
 620:	8e b5       	in	r24, 0x2e	; 46
 622:	08 95       	ret

00000624 <initUSART>:
    if (bit_is_set(byte, bit))
      transmitByte('1');
    else
      transmitByte('0');
  }
}
 624:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 628:	83 e3       	ldi	r24, 0x33	; 51
 62a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 62e:	e0 ec       	ldi	r30, 0xC0	; 192
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	80 81       	ld	r24, Z
 634:	8d 7f       	andi	r24, 0xFD	; 253
 636:	80 83       	st	Z, r24
 638:	88 e1       	ldi	r24, 0x18	; 24
 63a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 63e:	86 e0       	ldi	r24, 0x06	; 6
 640:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 644:	08 95       	ret

00000646 <transmitByte>:
 646:	e0 ec       	ldi	r30, 0xC0	; 192
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	90 81       	ld	r25, Z
 64c:	95 ff       	sbrs	r25, 5
 64e:	fd cf       	rjmp	.-6      	; 0x64a <transmitByte+0x4>
 650:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 654:	08 95       	ret

00000656 <printString>:
 656:	0f 93       	push	r16
 658:	1f 93       	push	r17
 65a:	cf 93       	push	r28
 65c:	fc 01       	movw	r30, r24
 65e:	80 81       	ld	r24, Z
 660:	88 23       	and	r24, r24
 662:	59 f0       	breq	.+22     	; 0x67a <printString+0x24>
 664:	8f 01       	movw	r16, r30
 666:	c0 e0       	ldi	r28, 0x00	; 0
 668:	0e 94 23 03 	call	0x646	; 0x646 <transmitByte>
 66c:	cf 5f       	subi	r28, 0xFF	; 255
 66e:	f8 01       	movw	r30, r16
 670:	ec 0f       	add	r30, r28
 672:	f1 1d       	adc	r31, r1
 674:	80 81       	ld	r24, Z
 676:	81 11       	cpse	r24, r1
 678:	f7 cf       	rjmp	.-18     	; 0x668 <printString+0x12>
 67a:	cf 91       	pop	r28
 67c:	1f 91       	pop	r17
 67e:	0f 91       	pop	r16
 680:	08 95       	ret

00000682 <printWord>:
 682:	0f 93       	push	r16
 684:	1f 93       	push	r17
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
 68a:	8c 01       	movw	r16, r24
 68c:	9c 01       	movw	r18, r24
 68e:	32 95       	swap	r19
 690:	22 95       	swap	r18
 692:	2f 70       	andi	r18, 0x0F	; 15
 694:	23 27       	eor	r18, r19
 696:	3f 70       	andi	r19, 0x0F	; 15
 698:	23 27       	eor	r18, r19
 69a:	a7 e4       	ldi	r26, 0x47	; 71
 69c:	b3 e0       	ldi	r27, 0x03	; 3
 69e:	0e 94 05 04 	call	0x80a	; 0x80a <__umulhisi3>
 6a2:	96 95       	lsr	r25
 6a4:	87 95       	ror	r24
 6a6:	96 95       	lsr	r25
 6a8:	87 95       	ror	r24
 6aa:	96 95       	lsr	r25
 6ac:	87 95       	ror	r24
 6ae:	80 5d       	subi	r24, 0xD0	; 208
 6b0:	0e 94 23 03 	call	0x646	; 0x646 <transmitByte>
 6b4:	98 01       	movw	r18, r16
 6b6:	36 95       	lsr	r19
 6b8:	27 95       	ror	r18
 6ba:	36 95       	lsr	r19
 6bc:	27 95       	ror	r18
 6be:	36 95       	lsr	r19
 6c0:	27 95       	ror	r18
 6c2:	a5 ec       	ldi	r26, 0xC5	; 197
 6c4:	b0 e2       	ldi	r27, 0x20	; 32
 6c6:	0e 94 05 04 	call	0x80a	; 0x80a <__umulhisi3>
 6ca:	ac 01       	movw	r20, r24
 6cc:	52 95       	swap	r21
 6ce:	42 95       	swap	r20
 6d0:	4f 70       	andi	r20, 0x0F	; 15
 6d2:	45 27       	eor	r20, r21
 6d4:	5f 70       	andi	r21, 0x0F	; 15
 6d6:	45 27       	eor	r20, r21
 6d8:	9a 01       	movw	r18, r20
 6da:	ad ec       	ldi	r26, 0xCD	; 205
 6dc:	bc ec       	ldi	r27, 0xCC	; 204
 6de:	0e 94 05 04 	call	0x80a	; 0x80a <__umulhisi3>
 6e2:	96 95       	lsr	r25
 6e4:	87 95       	ror	r24
 6e6:	96 95       	lsr	r25
 6e8:	87 95       	ror	r24
 6ea:	96 95       	lsr	r25
 6ec:	87 95       	ror	r24
 6ee:	9c 01       	movw	r18, r24
 6f0:	22 0f       	add	r18, r18
 6f2:	33 1f       	adc	r19, r19
 6f4:	88 0f       	add	r24, r24
 6f6:	99 1f       	adc	r25, r25
 6f8:	88 0f       	add	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	88 0f       	add	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	82 0f       	add	r24, r18
 702:	93 1f       	adc	r25, r19
 704:	9a 01       	movw	r18, r20
 706:	28 1b       	sub	r18, r24
 708:	39 0b       	sbc	r19, r25
 70a:	c9 01       	movw	r24, r18
 70c:	80 5d       	subi	r24, 0xD0	; 208
 70e:	0e 94 23 03 	call	0x646	; 0x646 <transmitByte>
 712:	98 01       	movw	r18, r16
 714:	36 95       	lsr	r19
 716:	27 95       	ror	r18
 718:	36 95       	lsr	r19
 71a:	27 95       	ror	r18
 71c:	ab e7       	ldi	r26, 0x7B	; 123
 71e:	b4 e1       	ldi	r27, 0x14	; 20
 720:	0e 94 05 04 	call	0x80a	; 0x80a <__umulhisi3>
 724:	ac 01       	movw	r20, r24
 726:	56 95       	lsr	r21
 728:	47 95       	ror	r20
 72a:	9a 01       	movw	r18, r20
 72c:	ad ec       	ldi	r26, 0xCD	; 205
 72e:	bc ec       	ldi	r27, 0xCC	; 204
 730:	0e 94 05 04 	call	0x80a	; 0x80a <__umulhisi3>
 734:	96 95       	lsr	r25
 736:	87 95       	ror	r24
 738:	96 95       	lsr	r25
 73a:	87 95       	ror	r24
 73c:	96 95       	lsr	r25
 73e:	87 95       	ror	r24
 740:	9c 01       	movw	r18, r24
 742:	22 0f       	add	r18, r18
 744:	33 1f       	adc	r19, r19
 746:	88 0f       	add	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	88 0f       	add	r24, r24
 74c:	99 1f       	adc	r25, r25
 74e:	88 0f       	add	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	82 0f       	add	r24, r18
 754:	93 1f       	adc	r25, r19
 756:	9a 01       	movw	r18, r20
 758:	28 1b       	sub	r18, r24
 75a:	39 0b       	sbc	r19, r25
 75c:	c9 01       	movw	r24, r18
 75e:	80 5d       	subi	r24, 0xD0	; 208
 760:	0e 94 23 03 	call	0x646	; 0x646 <transmitByte>
 764:	98 01       	movw	r18, r16
 766:	ad ec       	ldi	r26, 0xCD	; 205
 768:	bc ec       	ldi	r27, 0xCC	; 204
 76a:	0e 94 05 04 	call	0x80a	; 0x80a <__umulhisi3>
 76e:	ec 01       	movw	r28, r24
 770:	d6 95       	lsr	r29
 772:	c7 95       	ror	r28
 774:	d6 95       	lsr	r29
 776:	c7 95       	ror	r28
 778:	d6 95       	lsr	r29
 77a:	c7 95       	ror	r28
 77c:	9e 01       	movw	r18, r28
 77e:	0e 94 05 04 	call	0x80a	; 0x80a <__umulhisi3>
 782:	96 95       	lsr	r25
 784:	87 95       	ror	r24
 786:	96 95       	lsr	r25
 788:	87 95       	ror	r24
 78a:	96 95       	lsr	r25
 78c:	87 95       	ror	r24
 78e:	9c 01       	movw	r18, r24
 790:	22 0f       	add	r18, r18
 792:	33 1f       	adc	r19, r19
 794:	88 0f       	add	r24, r24
 796:	99 1f       	adc	r25, r25
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	82 0f       	add	r24, r18
 7a2:	93 1f       	adc	r25, r19
 7a4:	9e 01       	movw	r18, r28
 7a6:	28 1b       	sub	r18, r24
 7a8:	39 0b       	sbc	r19, r25
 7aa:	c9 01       	movw	r24, r18
 7ac:	80 5d       	subi	r24, 0xD0	; 208
 7ae:	0e 94 23 03 	call	0x646	; 0x646 <transmitByte>
 7b2:	ce 01       	movw	r24, r28
 7b4:	88 0f       	add	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	cc 0f       	add	r28, r28
 7ba:	dd 1f       	adc	r29, r29
 7bc:	cc 0f       	add	r28, r28
 7be:	dd 1f       	adc	r29, r29
 7c0:	cc 0f       	add	r28, r28
 7c2:	dd 1f       	adc	r29, r29
 7c4:	c8 0f       	add	r28, r24
 7c6:	d9 1f       	adc	r29, r25
 7c8:	c8 01       	movw	r24, r16
 7ca:	8c 1b       	sub	r24, r28
 7cc:	9d 0b       	sbc	r25, r29
 7ce:	80 5d       	subi	r24, 0xD0	; 208
 7d0:	0e 94 23 03 	call	0x646	; 0x646 <transmitByte>
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	1f 91       	pop	r17
 7da:	0f 91       	pop	r16
 7dc:	08 95       	ret

000007de <nibbleToHexCharacter>:

char nibbleToHexCharacter(uint8_t nibble) {
                                   /* Converts 4 bits into hexadecimal */
  if (nibble < 10) {
 7de:	8a 30       	cpi	r24, 0x0A	; 10
 7e0:	10 f4       	brcc	.+4      	; 0x7e6 <nibbleToHexCharacter+0x8>
    return ('0' + nibble);
 7e2:	80 5d       	subi	r24, 0xD0	; 208
 7e4:	08 95       	ret
  }
  else {
    return ('A' + nibble - 10);
 7e6:	89 5c       	subi	r24, 0xC9	; 201
  }
}
 7e8:	08 95       	ret

000007ea <printHexByte>:

void printHexByte(uint8_t byte) {
 7ea:	cf 93       	push	r28
 7ec:	c8 2f       	mov	r28, r24
                        /* Prints a byte as its hexadecimal equivalent */
  uint8_t nibble;
  nibble = (byte & 0b11110000) >> 4;
  transmitByte(nibbleToHexCharacter(nibble));
 7ee:	82 95       	swap	r24
 7f0:	8f 70       	andi	r24, 0x0F	; 15
 7f2:	0e 94 ef 03 	call	0x7de	; 0x7de <nibbleToHexCharacter>
 7f6:	0e 94 23 03 	call	0x646	; 0x646 <transmitByte>
  nibble = byte & 0b00001111;
  transmitByte(nibbleToHexCharacter(nibble));
 7fa:	8c 2f       	mov	r24, r28
 7fc:	8f 70       	andi	r24, 0x0F	; 15
 7fe:	0e 94 ef 03 	call	0x7de	; 0x7de <nibbleToHexCharacter>
 802:	0e 94 23 03 	call	0x646	; 0x646 <transmitByte>
}
 806:	cf 91       	pop	r28
 808:	08 95       	ret

0000080a <__umulhisi3>:
 80a:	a2 9f       	mul	r26, r18
 80c:	b0 01       	movw	r22, r0
 80e:	b3 9f       	mul	r27, r19
 810:	c0 01       	movw	r24, r0
 812:	a3 9f       	mul	r26, r19
 814:	70 0d       	add	r23, r0
 816:	81 1d       	adc	r24, r1
 818:	11 24       	eor	r1, r1
 81a:	91 1d       	adc	r25, r1
 81c:	b2 9f       	mul	r27, r18
 81e:	70 0d       	add	r23, r0
 820:	81 1d       	adc	r24, r1
 822:	11 24       	eor	r1, r1
 824:	91 1d       	adc	r25, r1
 826:	08 95       	ret

00000828 <malloc>:
 828:	0f 93       	push	r16
 82a:	1f 93       	push	r17
 82c:	cf 93       	push	r28
 82e:	df 93       	push	r29
 830:	82 30       	cpi	r24, 0x02	; 2
 832:	91 05       	cpc	r25, r1
 834:	10 f4       	brcc	.+4      	; 0x83a <malloc+0x12>
 836:	82 e0       	ldi	r24, 0x02	; 2
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	e0 91 26 02 	lds	r30, 0x0226	; 0x800226 <__flp>
 83e:	f0 91 27 02 	lds	r31, 0x0227	; 0x800227 <__flp+0x1>
 842:	20 e0       	ldi	r18, 0x00	; 0
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	a0 e0       	ldi	r26, 0x00	; 0
 848:	b0 e0       	ldi	r27, 0x00	; 0
 84a:	30 97       	sbiw	r30, 0x00	; 0
 84c:	19 f1       	breq	.+70     	; 0x894 <malloc+0x6c>
 84e:	40 81       	ld	r20, Z
 850:	51 81       	ldd	r21, Z+1	; 0x01
 852:	02 81       	ldd	r16, Z+2	; 0x02
 854:	13 81       	ldd	r17, Z+3	; 0x03
 856:	48 17       	cp	r20, r24
 858:	59 07       	cpc	r21, r25
 85a:	c8 f0       	brcs	.+50     	; 0x88e <malloc+0x66>
 85c:	84 17       	cp	r24, r20
 85e:	95 07       	cpc	r25, r21
 860:	69 f4       	brne	.+26     	; 0x87c <malloc+0x54>
 862:	10 97       	sbiw	r26, 0x00	; 0
 864:	31 f0       	breq	.+12     	; 0x872 <malloc+0x4a>
 866:	12 96       	adiw	r26, 0x02	; 2
 868:	0c 93       	st	X, r16
 86a:	12 97       	sbiw	r26, 0x02	; 2
 86c:	13 96       	adiw	r26, 0x03	; 3
 86e:	1c 93       	st	X, r17
 870:	27 c0       	rjmp	.+78     	; 0x8c0 <malloc+0x98>
 872:	00 93 26 02 	sts	0x0226, r16	; 0x800226 <__flp>
 876:	10 93 27 02 	sts	0x0227, r17	; 0x800227 <__flp+0x1>
 87a:	22 c0       	rjmp	.+68     	; 0x8c0 <malloc+0x98>
 87c:	21 15       	cp	r18, r1
 87e:	31 05       	cpc	r19, r1
 880:	19 f0       	breq	.+6      	; 0x888 <malloc+0x60>
 882:	42 17       	cp	r20, r18
 884:	53 07       	cpc	r21, r19
 886:	18 f4       	brcc	.+6      	; 0x88e <malloc+0x66>
 888:	9a 01       	movw	r18, r20
 88a:	bd 01       	movw	r22, r26
 88c:	ef 01       	movw	r28, r30
 88e:	df 01       	movw	r26, r30
 890:	f8 01       	movw	r30, r16
 892:	db cf       	rjmp	.-74     	; 0x84a <malloc+0x22>
 894:	21 15       	cp	r18, r1
 896:	31 05       	cpc	r19, r1
 898:	f9 f0       	breq	.+62     	; 0x8d8 <malloc+0xb0>
 89a:	28 1b       	sub	r18, r24
 89c:	39 0b       	sbc	r19, r25
 89e:	24 30       	cpi	r18, 0x04	; 4
 8a0:	31 05       	cpc	r19, r1
 8a2:	80 f4       	brcc	.+32     	; 0x8c4 <malloc+0x9c>
 8a4:	8a 81       	ldd	r24, Y+2	; 0x02
 8a6:	9b 81       	ldd	r25, Y+3	; 0x03
 8a8:	61 15       	cp	r22, r1
 8aa:	71 05       	cpc	r23, r1
 8ac:	21 f0       	breq	.+8      	; 0x8b6 <malloc+0x8e>
 8ae:	fb 01       	movw	r30, r22
 8b0:	93 83       	std	Z+3, r25	; 0x03
 8b2:	82 83       	std	Z+2, r24	; 0x02
 8b4:	04 c0       	rjmp	.+8      	; 0x8be <malloc+0x96>
 8b6:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <__flp+0x1>
 8ba:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__flp>
 8be:	fe 01       	movw	r30, r28
 8c0:	32 96       	adiw	r30, 0x02	; 2
 8c2:	44 c0       	rjmp	.+136    	; 0x94c <__stack+0x4d>
 8c4:	fe 01       	movw	r30, r28
 8c6:	e2 0f       	add	r30, r18
 8c8:	f3 1f       	adc	r31, r19
 8ca:	81 93       	st	Z+, r24
 8cc:	91 93       	st	Z+, r25
 8ce:	22 50       	subi	r18, 0x02	; 2
 8d0:	31 09       	sbc	r19, r1
 8d2:	39 83       	std	Y+1, r19	; 0x01
 8d4:	28 83       	st	Y, r18
 8d6:	3a c0       	rjmp	.+116    	; 0x94c <__stack+0x4d>
 8d8:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <__brkval>
 8dc:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <__brkval+0x1>
 8e0:	23 2b       	or	r18, r19
 8e2:	41 f4       	brne	.+16     	; 0x8f4 <malloc+0xcc>
 8e4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 8e8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 8ec:	30 93 25 02 	sts	0x0225, r19	; 0x800225 <__brkval+0x1>
 8f0:	20 93 24 02 	sts	0x0224, r18	; 0x800224 <__brkval>
 8f4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 8f8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 8fc:	21 15       	cp	r18, r1
 8fe:	31 05       	cpc	r19, r1
 900:	41 f4       	brne	.+16     	; 0x912 <__stack+0x13>
 902:	2d b7       	in	r18, 0x3d	; 61
 904:	3e b7       	in	r19, 0x3e	; 62
 906:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 90a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 90e:	24 1b       	sub	r18, r20
 910:	35 0b       	sbc	r19, r21
 912:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <__brkval>
 916:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <__brkval+0x1>
 91a:	e2 17       	cp	r30, r18
 91c:	f3 07       	cpc	r31, r19
 91e:	a0 f4       	brcc	.+40     	; 0x948 <__stack+0x49>
 920:	2e 1b       	sub	r18, r30
 922:	3f 0b       	sbc	r19, r31
 924:	28 17       	cp	r18, r24
 926:	39 07       	cpc	r19, r25
 928:	78 f0       	brcs	.+30     	; 0x948 <__stack+0x49>
 92a:	ac 01       	movw	r20, r24
 92c:	4e 5f       	subi	r20, 0xFE	; 254
 92e:	5f 4f       	sbci	r21, 0xFF	; 255
 930:	24 17       	cp	r18, r20
 932:	35 07       	cpc	r19, r21
 934:	48 f0       	brcs	.+18     	; 0x948 <__stack+0x49>
 936:	4e 0f       	add	r20, r30
 938:	5f 1f       	adc	r21, r31
 93a:	50 93 25 02 	sts	0x0225, r21	; 0x800225 <__brkval+0x1>
 93e:	40 93 24 02 	sts	0x0224, r20	; 0x800224 <__brkval>
 942:	81 93       	st	Z+, r24
 944:	91 93       	st	Z+, r25
 946:	02 c0       	rjmp	.+4      	; 0x94c <__stack+0x4d>
 948:	e0 e0       	ldi	r30, 0x00	; 0
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	cf 01       	movw	r24, r30
 94e:	df 91       	pop	r29
 950:	cf 91       	pop	r28
 952:	1f 91       	pop	r17
 954:	0f 91       	pop	r16
 956:	08 95       	ret

00000958 <free>:
 958:	cf 93       	push	r28
 95a:	df 93       	push	r29
 95c:	00 97       	sbiw	r24, 0x00	; 0
 95e:	09 f4       	brne	.+2      	; 0x962 <free+0xa>
 960:	81 c0       	rjmp	.+258    	; 0xa64 <free+0x10c>
 962:	fc 01       	movw	r30, r24
 964:	32 97       	sbiw	r30, 0x02	; 2
 966:	13 82       	std	Z+3, r1	; 0x03
 968:	12 82       	std	Z+2, r1	; 0x02
 96a:	a0 91 26 02 	lds	r26, 0x0226	; 0x800226 <__flp>
 96e:	b0 91 27 02 	lds	r27, 0x0227	; 0x800227 <__flp+0x1>
 972:	10 97       	sbiw	r26, 0x00	; 0
 974:	81 f4       	brne	.+32     	; 0x996 <free+0x3e>
 976:	20 81       	ld	r18, Z
 978:	31 81       	ldd	r19, Z+1	; 0x01
 97a:	82 0f       	add	r24, r18
 97c:	93 1f       	adc	r25, r19
 97e:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <__brkval>
 982:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <__brkval+0x1>
 986:	28 17       	cp	r18, r24
 988:	39 07       	cpc	r19, r25
 98a:	51 f5       	brne	.+84     	; 0x9e0 <free+0x88>
 98c:	f0 93 25 02 	sts	0x0225, r31	; 0x800225 <__brkval+0x1>
 990:	e0 93 24 02 	sts	0x0224, r30	; 0x800224 <__brkval>
 994:	67 c0       	rjmp	.+206    	; 0xa64 <free+0x10c>
 996:	ed 01       	movw	r28, r26
 998:	20 e0       	ldi	r18, 0x00	; 0
 99a:	30 e0       	ldi	r19, 0x00	; 0
 99c:	ce 17       	cp	r28, r30
 99e:	df 07       	cpc	r29, r31
 9a0:	40 f4       	brcc	.+16     	; 0x9b2 <free+0x5a>
 9a2:	4a 81       	ldd	r20, Y+2	; 0x02
 9a4:	5b 81       	ldd	r21, Y+3	; 0x03
 9a6:	9e 01       	movw	r18, r28
 9a8:	41 15       	cp	r20, r1
 9aa:	51 05       	cpc	r21, r1
 9ac:	f1 f0       	breq	.+60     	; 0x9ea <free+0x92>
 9ae:	ea 01       	movw	r28, r20
 9b0:	f5 cf       	rjmp	.-22     	; 0x99c <free+0x44>
 9b2:	d3 83       	std	Z+3, r29	; 0x03
 9b4:	c2 83       	std	Z+2, r28	; 0x02
 9b6:	40 81       	ld	r20, Z
 9b8:	51 81       	ldd	r21, Z+1	; 0x01
 9ba:	84 0f       	add	r24, r20
 9bc:	95 1f       	adc	r25, r21
 9be:	c8 17       	cp	r28, r24
 9c0:	d9 07       	cpc	r29, r25
 9c2:	59 f4       	brne	.+22     	; 0x9da <free+0x82>
 9c4:	88 81       	ld	r24, Y
 9c6:	99 81       	ldd	r25, Y+1	; 0x01
 9c8:	84 0f       	add	r24, r20
 9ca:	95 1f       	adc	r25, r21
 9cc:	02 96       	adiw	r24, 0x02	; 2
 9ce:	91 83       	std	Z+1, r25	; 0x01
 9d0:	80 83       	st	Z, r24
 9d2:	8a 81       	ldd	r24, Y+2	; 0x02
 9d4:	9b 81       	ldd	r25, Y+3	; 0x03
 9d6:	93 83       	std	Z+3, r25	; 0x03
 9d8:	82 83       	std	Z+2, r24	; 0x02
 9da:	21 15       	cp	r18, r1
 9dc:	31 05       	cpc	r19, r1
 9de:	29 f4       	brne	.+10     	; 0x9ea <free+0x92>
 9e0:	f0 93 27 02 	sts	0x0227, r31	; 0x800227 <__flp+0x1>
 9e4:	e0 93 26 02 	sts	0x0226, r30	; 0x800226 <__flp>
 9e8:	3d c0       	rjmp	.+122    	; 0xa64 <free+0x10c>
 9ea:	e9 01       	movw	r28, r18
 9ec:	fb 83       	std	Y+3, r31	; 0x03
 9ee:	ea 83       	std	Y+2, r30	; 0x02
 9f0:	49 91       	ld	r20, Y+
 9f2:	59 91       	ld	r21, Y+
 9f4:	c4 0f       	add	r28, r20
 9f6:	d5 1f       	adc	r29, r21
 9f8:	ec 17       	cp	r30, r28
 9fa:	fd 07       	cpc	r31, r29
 9fc:	61 f4       	brne	.+24     	; 0xa16 <free+0xbe>
 9fe:	80 81       	ld	r24, Z
 a00:	91 81       	ldd	r25, Z+1	; 0x01
 a02:	84 0f       	add	r24, r20
 a04:	95 1f       	adc	r25, r21
 a06:	02 96       	adiw	r24, 0x02	; 2
 a08:	e9 01       	movw	r28, r18
 a0a:	99 83       	std	Y+1, r25	; 0x01
 a0c:	88 83       	st	Y, r24
 a0e:	82 81       	ldd	r24, Z+2	; 0x02
 a10:	93 81       	ldd	r25, Z+3	; 0x03
 a12:	9b 83       	std	Y+3, r25	; 0x03
 a14:	8a 83       	std	Y+2, r24	; 0x02
 a16:	e0 e0       	ldi	r30, 0x00	; 0
 a18:	f0 e0       	ldi	r31, 0x00	; 0
 a1a:	12 96       	adiw	r26, 0x02	; 2
 a1c:	8d 91       	ld	r24, X+
 a1e:	9c 91       	ld	r25, X
 a20:	13 97       	sbiw	r26, 0x03	; 3
 a22:	00 97       	sbiw	r24, 0x00	; 0
 a24:	19 f0       	breq	.+6      	; 0xa2c <free+0xd4>
 a26:	fd 01       	movw	r30, r26
 a28:	dc 01       	movw	r26, r24
 a2a:	f7 cf       	rjmp	.-18     	; 0xa1a <free+0xc2>
 a2c:	8d 91       	ld	r24, X+
 a2e:	9c 91       	ld	r25, X
 a30:	11 97       	sbiw	r26, 0x01	; 1
 a32:	9d 01       	movw	r18, r26
 a34:	2e 5f       	subi	r18, 0xFE	; 254
 a36:	3f 4f       	sbci	r19, 0xFF	; 255
 a38:	82 0f       	add	r24, r18
 a3a:	93 1f       	adc	r25, r19
 a3c:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <__brkval>
 a40:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <__brkval+0x1>
 a44:	28 17       	cp	r18, r24
 a46:	39 07       	cpc	r19, r25
 a48:	69 f4       	brne	.+26     	; 0xa64 <free+0x10c>
 a4a:	30 97       	sbiw	r30, 0x00	; 0
 a4c:	29 f4       	brne	.+10     	; 0xa58 <free+0x100>
 a4e:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <__flp+0x1>
 a52:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <__flp>
 a56:	02 c0       	rjmp	.+4      	; 0xa5c <free+0x104>
 a58:	13 82       	std	Z+3, r1	; 0x03
 a5a:	12 82       	std	Z+2, r1	; 0x02
 a5c:	b0 93 25 02 	sts	0x0225, r27	; 0x800225 <__brkval+0x1>
 a60:	a0 93 24 02 	sts	0x0224, r26	; 0x800224 <__brkval>
 a64:	df 91       	pop	r29
 a66:	cf 91       	pop	r28
 a68:	08 95       	ret

00000a6a <_exit>:
 a6a:	f8 94       	cli

00000a6c <__stop_program>:
 a6c:	ff cf       	rjmp	.-2      	; 0xa6c <__stop_program>
