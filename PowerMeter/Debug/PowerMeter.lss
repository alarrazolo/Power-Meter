
PowerMeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010a  00800100  00000b30  00000bc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080020a  0080020a  00000cce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028d8  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c5e  00000000  00000000  00003810  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ff3  00000000  00000000  0000446e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  00005464  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008de  00000000  00000000  00005a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017af  00000000  00000000  00006322  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00007ad1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 a0 01 	jmp	0x340	; 0x340 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 11 01 	call	0x222	; 0x222 <main>
  9e:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initI2C>:
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  ac:	ec eb       	ldi	r30, 0xBC	; 188
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <setup_rf>:
	printString("/");
	printByte(date);
	printString("/");
	printWord(year);
	printString("\r\n");
}
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	0e 94 ee 01 	call	0x3dc	; 0x3dc <nRF24L01_init>
  c0:	ec 01       	movw	r28, r24
  c2:	85 e2       	ldi	r24, 0x25	; 37
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	99 83       	std	Y+1, r25	; 0x01
  c8:	88 83       	st	Y, r24
  ca:	22 e0       	ldi	r18, 0x02	; 2
  cc:	2a 83       	std	Y+2, r18	; 0x02
  ce:	9c 83       	std	Y+4, r25	; 0x04
  d0:	8b 83       	std	Y+3, r24	; 0x03
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	2d 83       	std	Y+5, r18	; 0x05
  d6:	9f 83       	std	Y+7, r25	; 0x07
  d8:	8e 83       	std	Y+6, r24	; 0x06
  da:	25 e0       	ldi	r18, 0x05	; 5
  dc:	28 87       	std	Y+8, r18	; 0x08
  de:	9a 87       	std	Y+10, r25	; 0x0a
  e0:	89 87       	std	Y+9, r24	; 0x09
  e2:	23 e0       	ldi	r18, 0x03	; 3
  e4:	2b 87       	std	Y+11, r18	; 0x0b
  e6:	9d 87       	std	Y+13, r25	; 0x0d
  e8:	8c 87       	std	Y+12, r24	; 0x0c
  ea:	84 e0       	ldi	r24, 0x04	; 4
  ec:	8e 87       	std	Y+14, r24	; 0x0e
  ee:	e9 e6       	ldi	r30, 0x69	; 105
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	80 83       	st	Z, r24
  f8:	e8 9a       	sbi	0x1d, 0	; 29
  fa:	ce 01       	movw	r24, r28
  fc:	0e 94 60 02 	call	0x4c0	; 0x4c0 <nRF24L01_begin>
 100:	ce 01       	movw	r24, r28
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <powerIC_init>:
 108:	80 e1       	ldi	r24, 0x10	; 16
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 75 04 	call	0x8ea	; 0x8ea <malloc>
 110:	20 e1       	ldi	r18, 0x10	; 16
 112:	fc 01       	movw	r30, r24
 114:	11 92       	st	Z+, r1
 116:	2a 95       	dec	r18
 118:	e9 f7       	brne	.-6      	; 0x114 <powerIC_init+0xc>
 11a:	08 95       	ret

0000011c <setup_powerIC>:
 11c:	0e 94 84 00 	call	0x108	; 0x108 <powerIC_init>
 120:	fc 01       	movw	r30, r24
 122:	85 e2       	ldi	r24, 0x25	; 37
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	94 83       	std	Z+4, r25	; 0x04
 128:	83 83       	std	Z+3, r24	; 0x03
 12a:	15 82       	std	Z+5, r1	; 0x05
 12c:	97 83       	std	Z+7, r25	; 0x07
 12e:	86 83       	std	Z+6, r24	; 0x06
 130:	25 e0       	ldi	r18, 0x05	; 5
 132:	20 87       	std	Z+8, r18	; 0x08
 134:	92 87       	std	Z+10, r25	; 0x0a
 136:	81 87       	std	Z+9, r24	; 0x09
 138:	23 e0       	ldi	r18, 0x03	; 3
 13a:	23 87       	std	Z+11, r18	; 0x0b
 13c:	95 87       	std	Z+13, r25	; 0x0d
 13e:	84 87       	std	Z+12, r24	; 0x0c
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	86 87       	std	Z+14, r24	; 0x0e
 144:	cf 01       	movw	r24, r30
 146:	08 95       	ret

00000148 <setup_timer>:
 148:	e1 e8       	ldi	r30, 0x81	; 129
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	88 60       	ori	r24, 0x08	; 8
 150:	80 83       	st	Z, r24
 152:	af e6       	ldi	r26, 0x6F	; 111
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	8c 91       	ld	r24, X
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	8c 93       	st	X, r24
 15c:	82 e1       	ldi	r24, 0x12	; 18
 15e:	9a e7       	ldi	r25, 0x7A	; 122
 160:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 164:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 168:	80 81       	ld	r24, Z
 16a:	84 60       	ori	r24, 0x04	; 4
 16c:	80 83       	st	Z, r24
 16e:	08 95       	ret

00000170 <SPI_tradeByte>:
 170:	8e bd       	out	0x2e, r24	; 46
 172:	0d b4       	in	r0, 0x2d	; 45
 174:	07 fe       	sbrs	r0, 7
 176:	fd cf       	rjmp	.-6      	; 0x172 <SPI_tradeByte+0x2>
 178:	8e b5       	in	r24, 0x2e	; 46
 17a:	08 95       	ret

0000017c <printRFRegValue>:

void printRFRegValue(uint8_t rfRegister){
	
	PORTB &= ~(1<<2);
 17c:	2a 98       	cbi	0x05, 2	; 5
	SPI_tradeByte(R_REGISTER | rfRegister);
 17e:	0e 94 b8 00 	call	0x170	; 0x170 <SPI_tradeByte>
	uint8_t rf_d1bit = SPI_tradeByte(0);
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 b8 00 	call	0x170	; 0x170 <SPI_tradeByte>
	PORTB |= (1<<2);
 188:	2a 9a       	sbi	0x05, 2	; 5
	printHexByte(rf_d1bit);
 18a:	0e 94 65 04 	call	0x8ca	; 0x8ca <printHexByte>
	printString("H\r\n");
 18e:	83 e1       	ldi	r24, 0x13	; 19
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	0e 94 49 04 	call	0x892	; 0x892 <printString>
 196:	08 95       	ret

00000198 <get_pIC_RegValue>:
	
}

void get_pIC_RegValue(uint8_t pICRegister){
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
	
	PORTB &= ~(1<<0);
 19c:	28 98       	cbi	0x05, 0	; 5
	SPI_tradeByte(ReadRegPower | pICRegister);
 19e:	80 68       	ori	r24, 0x80	; 128
 1a0:	0e 94 b8 00 	call	0x170	; 0x170 <SPI_tradeByte>
	uint8_t pIC_d1bitHigh = SPI_tradeByte(0);
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 b8 00 	call	0x170	; 0x170 <SPI_tradeByte>
 1aa:	d8 2f       	mov	r29, r24
	uint8_t pIC_d1bitLow = SPI_tradeByte(0);
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 b8 00 	call	0x170	; 0x170 <SPI_tradeByte>
 1b2:	c8 2f       	mov	r28, r24
	PORTB |= (1<<0);
 1b4:	28 9a       	sbi	0x05, 0	; 5
	printHexByte(pIC_d1bitHigh);
 1b6:	8d 2f       	mov	r24, r29
 1b8:	0e 94 65 04 	call	0x8ca	; 0x8ca <printHexByte>
	printHexByte(pIC_d1bitLow);
 1bc:	8c 2f       	mov	r24, r28
 1be:	0e 94 65 04 	call	0x8ca	; 0x8ca <printHexByte>
	printString("H\r\n");
 1c2:	83 e1       	ldi	r24, 0x13	; 19
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 49 04 	call	0x892	; 0x892 <printString>
	
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <set_pIC_RegValue>:

void set_pIC_RegValue(uint8_t pICRegister, uint8_t highBit, uint8_t lowBit){
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	18 2f       	mov	r17, r24
 1d8:	d6 2f       	mov	r29, r22
 1da:	c4 2f       	mov	r28, r20
	
	PORTB &= ~(1<<0);
 1dc:	28 98       	cbi	0x05, 0	; 5
	SPI_tradeByte(WriteRegPower | pICRegister);
 1de:	0e 94 b8 00 	call	0x170	; 0x170 <SPI_tradeByte>
	SPI_tradeByte(highBit);
 1e2:	8d 2f       	mov	r24, r29
 1e4:	0e 94 b8 00 	call	0x170	; 0x170 <SPI_tradeByte>
	SPI_tradeByte(lowBit);
 1e8:	8c 2f       	mov	r24, r28
 1ea:	0e 94 b8 00 	call	0x170	; 0x170 <SPI_tradeByte>
	PORTB |= (1<<0);
 1ee:	28 9a       	sbi	0x05, 0	; 5
	printString("Set Reg: ");
 1f0:	87 e1       	ldi	r24, 0x17	; 23
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	0e 94 49 04 	call	0x892	; 0x892 <printString>
	printHexByte(pICRegister);
 1f8:	81 2f       	mov	r24, r17
 1fa:	0e 94 65 04 	call	0x8ca	; 0x8ca <printHexByte>
	printString(" to value: ");
 1fe:	81 e2       	ldi	r24, 0x21	; 33
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	0e 94 49 04 	call	0x892	; 0x892 <printString>
	printHexByte(highBit);
 206:	8d 2f       	mov	r24, r29
 208:	0e 94 65 04 	call	0x8ca	; 0x8ca <printHexByte>
	printHexByte(lowBit);
 20c:	8c 2f       	mov	r24, r28
 20e:	0e 94 65 04 	call	0x8ca	; 0x8ca <printHexByte>
	printString("H\r\n");
 212:	83 e1       	ldi	r24, 0x13	; 19
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 49 04 	call	0x892	; 0x892 <printString>
	
}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	08 95       	ret

00000222 <main>:
uint8_t clockAddressR = 0b11010001;
uint8_t clockAddressW = 0b11010000;
uint8_t to_address[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};

int main(void)
{
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62
 22a:	a3 97       	sbiw	r28, 0x23	; 35
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	f8 94       	cli
 230:	de bf       	out	0x3e, r29	; 62
 232:	0f be       	out	0x3f, r0	; 63
 234:	cd bf       	out	0x3d, r28	; 61
	initUSART();
 236:	0e 94 30 04 	call	0x860	; 0x860 <initUSART>
	initI2C();
 23a:	0e 94 53 00 	call	0xa6	; 0xa6 <initI2C>
	DDRB |= (1<<0);
 23e:	20 9a       	sbi	0x04, 0	; 4
	bool on = false;
	sei();
 240:	78 94       	sei
	nRF24L01 *rf = setup_rf();
 242:	0e 94 5c 00 	call	0xb8	; 0xb8 <setup_rf>
 246:	8c 01       	movw	r16, r24
	m90E26 *pIC = setup_powerIC();
 248:	0e 94 8e 00 	call	0x11c	; 0x11c <setup_powerIC>
	setup_timer();
 24c:	0e 94 a4 00 	call	0x148	; 0x148 <setup_timer>
	
	//set Chip select on power meter IC high
	PORTB |= (1<<0);
 250:	28 9a       	sbi	0x05, 0	; 5
	
	printString("Starting Program!\r\n");
 252:	8d e2       	ldi	r24, 0x2D	; 45
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	0e 94 49 04 	call	0x892	; 0x892 <printString>
	
	
	printString("Transmitting on Channel: 0x");
 25a:	81 e4       	ldi	r24, 0x41	; 65
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	0e 94 49 04 	call	0x892	; 0x892 <printString>
	printRFRegValue(RF_CH);
 262:	85 e0       	ldi	r24, 0x05	; 5
 264:	0e 94 be 00 	call	0x17c	; 0x17c <printRFRegValue>
	
	printString("RF Set up Value: ");
 268:	8d e5       	ldi	r24, 0x5D	; 93
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	0e 94 49 04 	call	0x892	; 0x892 <printString>
	printRFRegValue(RF_SETUP);
 270:	86 e0       	ldi	r24, 0x06	; 6
 272:	0e 94 be 00 	call	0x17c	; 0x17c <printRFRegValue>
	
	printString("pIC Reg Value 01H: ");
 276:	8f e6       	ldi	r24, 0x6F	; 111
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 49 04 	call	0x892	; 0x892 <printString>
	get_pIC_RegValue(0x01);
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 cc 00 	call	0x198	; 0x198 <get_pIC_RegValue>
	printString("pIC Reg Value 03H: ");
 284:	83 e8       	ldi	r24, 0x83	; 131
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	0e 94 49 04 	call	0x892	; 0x892 <printString>
	get_pIC_RegValue(0x03);
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	0e 94 cc 00 	call	0x198	; 0x198 <get_pIC_RegValue>
	printString("Metering Mode: ");
 292:	87 e9       	ldi	r24, 0x97	; 151
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 49 04 	call	0x892	; 0x892 <printString>
	get_pIC_RegValue(0x2B);
 29a:	8b e2       	ldi	r24, 0x2B	; 43
 29c:	0e 94 cc 00 	call	0x198	; 0x198 <get_pIC_RegValue>
	printString("Measurement Calibration start: ");
 2a0:	89 ee       	ldi	r24, 0xE9	; 233
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	0e 94 49 04 	call	0x892	; 0x892 <printString>
	get_pIC_RegValue(0x30);
 2a8:	80 e3       	ldi	r24, 0x30	; 48
 2aa:	0e 94 cc 00 	call	0x198	; 0x198 <get_pIC_RegValue>
	set_pIC_RegValue(0x30, 0x56, 0x78);
 2ae:	48 e7       	ldi	r20, 0x78	; 120
 2b0:	66 e5       	ldi	r22, 0x56	; 86
 2b2:	80 e3       	ldi	r24, 0x30	; 48
 2b4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set_pIC_RegValue>
	printString("New Measurement calibration start: ");
 2b8:	87 ea       	ldi	r24, 0xA7	; 167
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 49 04 	call	0x892	; 0x892 <printString>
	get_pIC_RegValue(0x30);
 2c0:	80 e3       	ldi	r24, 0x30	; 48
 2c2:	0e 94 cc 00 	call	0x198	; 0x198 <get_pIC_RegValue>
int main(void)
{
	initUSART();
	initI2C();
	DDRB |= (1<<0);
	bool on = false;
 2c6:	d1 2c       	mov	r13, r1
			
		}

		if (send_message) {
			send_message = false;
			on = !on;
 2c8:	cc 24       	eor	r12, r12
 2ca:	c3 94       	inc	r12
				message = "Holo Bibis";
				memcpy(msg.data, message, strlen(message) + 1);
			}
			else {
				message = "Te Amo!";
				memcpy(msg.data, message, strlen(message) + 1);
 2cc:	7e 01       	movw	r14, r28
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	e8 0e       	add	r14, r24
 2d2:	f1 1c       	adc	r15, r1
    while (1) 
    {
		
		
		
		if (rf_interrupt) {
 2d4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <rf_interrupt>
 2d8:	88 23       	and	r24, r24
 2da:	51 f0       	breq	.+20     	; 0x2f0 <main+0xce>
			rf_interrupt = false;
 2dc:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <rf_interrupt>
			int success = nRF24L01_transmit_success(rf);
 2e0:	c8 01       	movw	r24, r16
 2e2:	0e 94 df 03 	call	0x7be	; 0x7be <nRF24L01_transmit_success>
			if (success == 0){
 2e6:	89 2b       	or	r24, r25
 2e8:	19 f0       	breq	.+6      	; 0x2f0 <main+0xce>
				
			}
			else{
				nRF24L01_flush_transmit_message(rf);
 2ea:	c8 01       	movw	r24, r16
 2ec:	0e 94 45 02 	call	0x48a	; 0x48a <nRF24L01_flush_transmit_message>
				//printString("Message Sent Failed\r\n");
			}
			
		}

		if (send_message) {
 2f0:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
 2f4:	88 23       	and	r24, r24
 2f6:	71 f3       	breq	.-36     	; 0x2d4 <main+0xb2>
			send_message = false;
 2f8:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <__data_end>
			on = !on;
 2fc:	dc 24       	eor	r13, r12
			nRF24L01Message msg;
			char* message;
			if (on){
 2fe:	49 f0       	breq	.+18     	; 0x312 <main+0xf0>
				message = "Holo Bibis";
				memcpy(msg.data, message, strlen(message) + 1);
 300:	8b e0       	ldi	r24, 0x0B	; 11
 302:	eb ec       	ldi	r30, 0xCB	; 203
 304:	f1 e0       	ldi	r31, 0x01	; 1
 306:	d7 01       	movw	r26, r14
 308:	01 90       	ld	r0, Z+
 30a:	0d 92       	st	X+, r0
 30c:	8a 95       	dec	r24
 30e:	e1 f7       	brne	.-8      	; 0x308 <main+0xe6>
 310:	08 c0       	rjmp	.+16     	; 0x322 <main+0x100>
			}
			else {
				message = "Te Amo!";
				memcpy(msg.data, message, strlen(message) + 1);
 312:	88 e0       	ldi	r24, 0x08	; 8
 314:	e6 ed       	ldi	r30, 0xD6	; 214
 316:	f1 e0       	ldi	r31, 0x01	; 1
 318:	d7 01       	movw	r26, r14
 31a:	01 90       	ld	r0, Z+
 31c:	0d 92       	st	X+, r0
 31e:	8a 95       	dec	r24
 320:	e1 f7       	brne	.-8      	; 0x31a <main+0xf8>
			}
			msg.length = strlen((char *)msg.data) + 1;
 322:	f7 01       	movw	r30, r14
 324:	01 90       	ld	r0, Z+
 326:	00 20       	and	r0, r0
 328:	e9 f7       	brne	.-6      	; 0x324 <main+0x102>
 32a:	ee 19       	sub	r30, r14
 32c:	eb a3       	std	Y+35, r30	; 0x23
			nRF24L01_transmit(rf, to_address, &msg);
 32e:	ae 01       	movw	r20, r28
 330:	4f 5f       	subi	r20, 0xFF	; 255
 332:	5f 4f       	sbci	r21, 0xFF	; 255
 334:	66 e0       	ldi	r22, 0x06	; 6
 336:	71 e0       	ldi	r23, 0x01	; 1
 338:	c8 01       	movw	r24, r16
 33a:	0e 94 6f 03 	call	0x6de	; 0x6de <nRF24L01_transmit>
 33e:	ca cf       	rjmp	.-108    	; 0x2d4 <main+0xb2>

00000340 <__vector_11>:
	printString("H\r\n");
	
}

// each one second interrupt
ISR(TIMER1_COMPA_vect) {
 340:	1f 92       	push	r1
 342:	0f 92       	push	r0
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	0f 92       	push	r0
 348:	11 24       	eor	r1, r1
 34a:	2f 93       	push	r18
 34c:	3f 93       	push	r19
 34e:	4f 93       	push	r20
 350:	5f 93       	push	r21
 352:	6f 93       	push	r22
 354:	7f 93       	push	r23
 356:	8f 93       	push	r24
 358:	9f 93       	push	r25
 35a:	af 93       	push	r26
 35c:	bf 93       	push	r27
 35e:	ef 93       	push	r30
 360:	ff 93       	push	r31
	send_message = true;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
	//print_time();
	printString("Voltage: ");
 368:	8e ed       	ldi	r24, 0xDE	; 222
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	0e 94 49 04 	call	0x892	; 0x892 <printString>
	get_pIC_RegValue(0x49);
 370:	89 e4       	ldi	r24, 0x49	; 73
 372:	0e 94 cc 00 	call	0x198	; 0x198 <get_pIC_RegValue>
	printString(" Measurement Calibration start: ");
 376:	88 ee       	ldi	r24, 0xE8	; 232
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	0e 94 49 04 	call	0x892	; 0x892 <printString>
	get_pIC_RegValue(0x30);
 37e:	80 e3       	ldi	r24, 0x30	; 48
 380:	0e 94 cc 00 	call	0x198	; 0x198 <get_pIC_RegValue>
}
 384:	ff 91       	pop	r31
 386:	ef 91       	pop	r30
 388:	bf 91       	pop	r27
 38a:	af 91       	pop	r26
 38c:	9f 91       	pop	r25
 38e:	8f 91       	pop	r24
 390:	7f 91       	pop	r23
 392:	6f 91       	pop	r22
 394:	5f 91       	pop	r21
 396:	4f 91       	pop	r20
 398:	3f 91       	pop	r19
 39a:	2f 91       	pop	r18
 39c:	0f 90       	pop	r0
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	0f 90       	pop	r0
 3a2:	1f 90       	pop	r1
 3a4:	18 95       	reti

000003a6 <__vector_1>:

// nRF24L01 interrupt
ISR(INT0_vect) {
 3a6:	1f 92       	push	r1
 3a8:	0f 92       	push	r0
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	0f 92       	push	r0
 3ae:	11 24       	eor	r1, r1
 3b0:	8f 93       	push	r24
	rf_interrupt = true;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <rf_interrupt>
 3b8:	8f 91       	pop	r24
 3ba:	0f 90       	pop	r0
 3bc:	0f be       	out	0x3f, r0	; 63
 3be:	0f 90       	pop	r0
 3c0:	1f 90       	pop	r1
 3c2:	18 95       	reti

000003c4 <copy_address>:
 3c4:	fc 01       	movw	r30, r24
 3c6:	a6 2f       	mov	r26, r22
 3c8:	b7 2f       	mov	r27, r23
 3ca:	9c 01       	movw	r18, r24
 3cc:	2b 5f       	subi	r18, 0xFB	; 251
 3ce:	3f 4f       	sbci	r19, 0xFF	; 255
 3d0:	91 91       	ld	r25, Z+
 3d2:	9d 93       	st	X+, r25
 3d4:	e2 17       	cp	r30, r18
 3d6:	f3 07       	cpc	r31, r19
 3d8:	d9 f7       	brne	.-10     	; 0x3d0 <copy_address+0xc>
 3da:	08 95       	ret

000003dc <nRF24L01_init>:
 3dc:	80 e1       	ldi	r24, 0x10	; 16
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 75 04 	call	0x8ea	; 0x8ea <malloc>
 3e4:	20 e1       	ldi	r18, 0x10	; 16
 3e6:	fc 01       	movw	r30, r24
 3e8:	11 92       	st	Z+, r1
 3ea:	2a 95       	dec	r18
 3ec:	e9 f7       	brne	.-6      	; 0x3e8 <nRF24L01_init+0xc>
 3ee:	08 95       	ret

000003f0 <nRF24L01_send_command>:
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	ec 01       	movw	r28, r24
 3f6:	da 01       	movw	r26, r20
 3f8:	e8 81       	ld	r30, Y
 3fa:	f9 81       	ldd	r31, Y+1	; 0x01
 3fc:	50 81       	ld	r21, Z
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0a 80       	ldd	r0, Y+2	; 0x02
 404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	0a 94       	dec	r0
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40e:	80 95       	com	r24
 410:	85 23       	and	r24, r21
 412:	80 83       	st	Z, r24
 414:	6e bd       	out	0x2e, r22	; 46
 416:	0d b4       	in	r0, 0x2d	; 45
 418:	07 fe       	sbrs	r0, 7
 41a:	fd cf       	rjmp	.-6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41c:	8e b5       	in	r24, 0x2e	; 46
 41e:	8f 87       	std	Y+15, r24	; 0x0f
 420:	21 15       	cp	r18, r1
 422:	31 05       	cpc	r19, r1
 424:	79 f0       	breq	.+30     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 426:	fd 01       	movw	r30, r26
 428:	2a 0f       	add	r18, r26
 42a:	3b 1f       	adc	r19, r27
 42c:	df 01       	movw	r26, r30
 42e:	90 81       	ld	r25, Z
 430:	9e bd       	out	0x2e, r25	; 46
 432:	0d b4       	in	r0, 0x2d	; 45
 434:	07 fe       	sbrs	r0, 7
 436:	fd cf       	rjmp	.-6      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 438:	9e b5       	in	r25, 0x2e	; 46
 43a:	9c 93       	st	X, r25
 43c:	31 96       	adiw	r30, 0x01	; 1
 43e:	e2 17       	cp	r30, r18
 440:	f3 07       	cpc	r31, r19
 442:	a1 f7       	brne	.-24     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 444:	e8 81       	ld	r30, Y
 446:	f9 81       	ldd	r31, Y+1	; 0x01
 448:	20 81       	ld	r18, Z
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0a 80       	ldd	r0, Y+2	; 0x02
 450:	02 c0       	rjmp	.+4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	0a 94       	dec	r0
 458:	e2 f7       	brpl	.-8      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 45a:	82 2b       	or	r24, r18
 45c:	80 83       	st	Z, r24
 45e:	8f 85       	ldd	r24, Y+15	; 0x0f
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	08 95       	ret

00000466 <nRF24L01_write_register>:
 466:	60 62       	ori	r22, 0x20	; 32
 468:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <nRF24L01_send_command>
 46c:	08 95       	ret

0000046e <nRF24L01_read_register>:
 46e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <nRF24L01_send_command>
 472:	08 95       	ret

00000474 <nRF24L01_no_op>:
 474:	20 e0       	ldi	r18, 0x00	; 0
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	40 e0       	ldi	r20, 0x00	; 0
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	6f ef       	ldi	r22, 0xFF	; 255
 47e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <nRF24L01_send_command>
 482:	08 95       	ret

00000484 <nRF24L01_update_status>:
 484:	0e 94 3a 02 	call	0x474	; 0x474 <nRF24L01_no_op>
 488:	08 95       	ret

0000048a <nRF24L01_flush_transmit_message>:
 48a:	20 e0       	ldi	r18, 0x00	; 0
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	40 e0       	ldi	r20, 0x00	; 0
 490:	50 e0       	ldi	r21, 0x00	; 0
 492:	61 ee       	ldi	r22, 0xE1	; 225
 494:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <nRF24L01_send_command>
 498:	08 95       	ret

0000049a <nRF24L01_clear_interrupts>:
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	1f 92       	push	r1
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
 4a4:	20 e7       	ldi	r18, 0x70	; 112
 4a6:	29 83       	std	Y+1, r18	; 0x01
 4a8:	21 e0       	ldi	r18, 0x01	; 1
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	ae 01       	movw	r20, r28
 4ae:	4f 5f       	subi	r20, 0xFF	; 255
 4b0:	5f 4f       	sbci	r21, 0xFF	; 255
 4b2:	67 e0       	ldi	r22, 0x07	; 7
 4b4:	0e 94 33 02 	call	0x466	; 0x466 <nRF24L01_write_register>
 4b8:	0f 90       	pop	r0
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret

000004c0 <nRF24L01_begin>:
 4c0:	ff 92       	push	r15
 4c2:	0f 93       	push	r16
 4c4:	1f 93       	push	r17
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	1f 92       	push	r1
 4cc:	cd b7       	in	r28, 0x3d	; 61
 4ce:	de b7       	in	r29, 0x3e	; 62
 4d0:	8c 01       	movw	r16, r24
 4d2:	dc 01       	movw	r26, r24
 4d4:	ed 91       	ld	r30, X+
 4d6:	fc 91       	ld	r31, X
 4d8:	11 97       	sbiw	r26, 0x01	; 1
 4da:	42 91       	ld	r20, -Z
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	9c 01       	movw	r18, r24
 4e2:	12 96       	adiw	r26, 0x02	; 2
 4e4:	0c 90       	ld	r0, X
 4e6:	12 97       	sbiw	r26, 0x02	; 2
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <nRF24L01_begin+0x2e>
 4ea:	22 0f       	add	r18, r18
 4ec:	33 1f       	adc	r19, r19
 4ee:	0a 94       	dec	r0
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <nRF24L01_begin+0x2a>
 4f2:	24 2b       	or	r18, r20
 4f4:	20 83       	st	Z, r18
 4f6:	13 96       	adiw	r26, 0x03	; 3
 4f8:	ed 91       	ld	r30, X+
 4fa:	fc 91       	ld	r31, X
 4fc:	14 97       	sbiw	r26, 0x04	; 4
 4fe:	42 91       	ld	r20, -Z
 500:	9c 01       	movw	r18, r24
 502:	15 96       	adiw	r26, 0x05	; 5
 504:	0c 90       	ld	r0, X
 506:	15 97       	sbiw	r26, 0x05	; 5
 508:	02 c0       	rjmp	.+4      	; 0x50e <nRF24L01_begin+0x4e>
 50a:	22 0f       	add	r18, r18
 50c:	33 1f       	adc	r19, r19
 50e:	0a 94       	dec	r0
 510:	e2 f7       	brpl	.-8      	; 0x50a <nRF24L01_begin+0x4a>
 512:	24 2b       	or	r18, r20
 514:	20 83       	st	Z, r18
 516:	ed 91       	ld	r30, X+
 518:	fc 91       	ld	r31, X
 51a:	11 97       	sbiw	r26, 0x01	; 1
 51c:	40 81       	ld	r20, Z
 51e:	9c 01       	movw	r18, r24
 520:	12 96       	adiw	r26, 0x02	; 2
 522:	0c 90       	ld	r0, X
 524:	12 97       	sbiw	r26, 0x02	; 2
 526:	02 c0       	rjmp	.+4      	; 0x52c <nRF24L01_begin+0x6c>
 528:	22 0f       	add	r18, r18
 52a:	33 1f       	adc	r19, r19
 52c:	0a 94       	dec	r0
 52e:	e2 f7       	brpl	.-8      	; 0x528 <nRF24L01_begin+0x68>
 530:	24 2b       	or	r18, r20
 532:	20 83       	st	Z, r18
 534:	13 96       	adiw	r26, 0x03	; 3
 536:	ed 91       	ld	r30, X+
 538:	fc 91       	ld	r31, X
 53a:	14 97       	sbiw	r26, 0x04	; 4
 53c:	30 81       	ld	r19, Z
 53e:	ac 01       	movw	r20, r24
 540:	15 96       	adiw	r26, 0x05	; 5
 542:	0c 90       	ld	r0, X
 544:	15 97       	sbiw	r26, 0x05	; 5
 546:	02 c0       	rjmp	.+4      	; 0x54c <nRF24L01_begin+0x8c>
 548:	44 0f       	add	r20, r20
 54a:	55 1f       	adc	r21, r21
 54c:	0a 94       	dec	r0
 54e:	e2 f7       	brpl	.-8      	; 0x548 <nRF24L01_begin+0x88>
 550:	24 2f       	mov	r18, r20
 552:	20 95       	com	r18
 554:	23 23       	and	r18, r19
 556:	20 83       	st	Z, r18
 558:	2c b5       	in	r18, 0x2c	; 44
 55a:	20 61       	ori	r18, 0x10	; 16
 55c:	2c bd       	out	0x2c, r18	; 44
 55e:	2c b5       	in	r18, 0x2c	; 44
 560:	20 64       	ori	r18, 0x40	; 64
 562:	2c bd       	out	0x2c, r18	; 44
 564:	16 96       	adiw	r26, 0x06	; 6
 566:	ed 91       	ld	r30, X+
 568:	fc 91       	ld	r31, X
 56a:	17 97       	sbiw	r26, 0x07	; 7
 56c:	42 91       	ld	r20, -Z
 56e:	9c 01       	movw	r18, r24
 570:	18 96       	adiw	r26, 0x08	; 8
 572:	0c 90       	ld	r0, X
 574:	18 97       	sbiw	r26, 0x08	; 8
 576:	02 c0       	rjmp	.+4      	; 0x57c <nRF24L01_begin+0xbc>
 578:	22 0f       	add	r18, r18
 57a:	33 1f       	adc	r19, r19
 57c:	0a 94       	dec	r0
 57e:	e2 f7       	brpl	.-8      	; 0x578 <nRF24L01_begin+0xb8>
 580:	24 2b       	or	r18, r20
 582:	20 83       	st	Z, r18
 584:	19 96       	adiw	r26, 0x09	; 9
 586:	ed 91       	ld	r30, X+
 588:	fc 91       	ld	r31, X
 58a:	1a 97       	sbiw	r26, 0x0a	; 10
 58c:	42 91       	ld	r20, -Z
 58e:	9c 01       	movw	r18, r24
 590:	1b 96       	adiw	r26, 0x0b	; 11
 592:	0c 90       	ld	r0, X
 594:	1b 97       	sbiw	r26, 0x0b	; 11
 596:	02 c0       	rjmp	.+4      	; 0x59c <nRF24L01_begin+0xdc>
 598:	22 0f       	add	r18, r18
 59a:	33 1f       	adc	r19, r19
 59c:	0a 94       	dec	r0
 59e:	e2 f7       	brpl	.-8      	; 0x598 <nRF24L01_begin+0xd8>
 5a0:	24 2b       	or	r18, r20
 5a2:	20 83       	st	Z, r18
 5a4:	1c 96       	adiw	r26, 0x0c	; 12
 5a6:	ed 91       	ld	r30, X+
 5a8:	fc 91       	ld	r31, X
 5aa:	1d 97       	sbiw	r26, 0x0d	; 13
 5ac:	22 91       	ld	r18, -Z
 5ae:	1e 96       	adiw	r26, 0x0e	; 14
 5b0:	0c 90       	ld	r0, X
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <nRF24L01_begin+0xf8>
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	0a 94       	dec	r0
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <nRF24L01_begin+0xf4>
 5bc:	80 95       	com	r24
 5be:	82 23       	and	r24, r18
 5c0:	80 83       	st	Z, r24
 5c2:	8c b5       	in	r24, 0x2c	; 44
 5c4:	87 7f       	andi	r24, 0xF7	; 247
 5c6:	8c bd       	out	0x2c, r24	; 44
 5c8:	8c b5       	in	r24, 0x2c	; 44
 5ca:	8b 7f       	andi	r24, 0xFB	; 251
 5cc:	8c bd       	out	0x2c, r24	; 44
 5ce:	8c b5       	in	r24, 0x2c	; 44
 5d0:	81 60       	ori	r24, 0x01	; 1
 5d2:	8c bd       	out	0x2c, r24	; 44
 5d4:	8c b5       	in	r24, 0x2c	; 44
 5d6:	8d 7f       	andi	r24, 0xFD	; 253
 5d8:	8c bd       	out	0x2c, r24	; 44
 5da:	8d b5       	in	r24, 0x2d	; 45
 5dc:	8e 7f       	andi	r24, 0xFE	; 254
 5de:	8d bd       	out	0x2d, r24	; 45
 5e0:	8c b5       	in	r24, 0x2c	; 44
 5e2:	8f 7d       	andi	r24, 0xDF	; 223
 5e4:	8c bd       	out	0x2c, r24	; 44
 5e6:	20 e0       	ldi	r18, 0x00	; 0
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	40 e0       	ldi	r20, 0x00	; 0
 5ec:	50 e0       	ldi	r21, 0x00	; 0
 5ee:	62 ee       	ldi	r22, 0xE2	; 226
 5f0:	c8 01       	movw	r24, r16
 5f2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <nRF24L01_send_command>
 5f6:	20 e0       	ldi	r18, 0x00	; 0
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	40 e0       	ldi	r20, 0x00	; 0
 5fc:	50 e0       	ldi	r21, 0x00	; 0
 5fe:	61 ee       	ldi	r22, 0xE1	; 225
 600:	c8 01       	movw	r24, r16
 602:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <nRF24L01_send_command>
 606:	c8 01       	movw	r24, r16
 608:	0e 94 4d 02 	call	0x49a	; 0x49a <nRF24L01_clear_interrupts>
 60c:	8f e0       	ldi	r24, 0x0F	; 15
 60e:	89 83       	std	Y+1, r24	; 0x01
 610:	21 e0       	ldi	r18, 0x01	; 1
 612:	30 e0       	ldi	r19, 0x00	; 0
 614:	ae 01       	movw	r20, r28
 616:	4f 5f       	subi	r20, 0xFF	; 255
 618:	5f 4f       	sbci	r21, 0xFF	; 255
 61a:	60 e0       	ldi	r22, 0x00	; 0
 61c:	c8 01       	movw	r24, r16
 61e:	0e 94 33 02 	call	0x466	; 0x466 <nRF24L01_write_register>
 622:	0f 2e       	mov	r0, r31
 624:	ff e3       	ldi	r31, 0x3F	; 63
 626:	ff 2e       	mov	r15, r31
 628:	f0 2d       	mov	r31, r0
 62a:	f9 82       	std	Y+1, r15	; 0x01
 62c:	21 e0       	ldi	r18, 0x01	; 1
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	ae 01       	movw	r20, r28
 632:	4f 5f       	subi	r20, 0xFF	; 255
 634:	5f 4f       	sbci	r21, 0xFF	; 255
 636:	61 e0       	ldi	r22, 0x01	; 1
 638:	c8 01       	movw	r24, r16
 63a:	0e 94 33 02 	call	0x466	; 0x466 <nRF24L01_write_register>
 63e:	89 e0       	ldi	r24, 0x09	; 9
 640:	89 83       	std	Y+1, r24	; 0x01
 642:	21 e0       	ldi	r18, 0x01	; 1
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	ae 01       	movw	r20, r28
 648:	4f 5f       	subi	r20, 0xFF	; 255
 64a:	5f 4f       	sbci	r21, 0xFF	; 255
 64c:	66 e0       	ldi	r22, 0x06	; 6
 64e:	c8 01       	movw	r24, r16
 650:	0e 94 33 02 	call	0x466	; 0x466 <nRF24L01_write_register>
 654:	80 e6       	ldi	r24, 0x60	; 96
 656:	89 83       	std	Y+1, r24	; 0x01
 658:	21 e0       	ldi	r18, 0x01	; 1
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	ae 01       	movw	r20, r28
 65e:	4f 5f       	subi	r20, 0xFF	; 255
 660:	5f 4f       	sbci	r21, 0xFF	; 255
 662:	65 e0       	ldi	r22, 0x05	; 5
 664:	c8 01       	movw	r24, r16
 666:	0e 94 33 02 	call	0x466	; 0x466 <nRF24L01_write_register>
 66a:	f9 82       	std	Y+1, r15	; 0x01
 66c:	21 e0       	ldi	r18, 0x01	; 1
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	ae 01       	movw	r20, r28
 672:	4f 5f       	subi	r20, 0xFF	; 255
 674:	5f 4f       	sbci	r21, 0xFF	; 255
 676:	6c e1       	ldi	r22, 0x1C	; 28
 678:	c8 01       	movw	r24, r16
 67a:	0e 94 33 02 	call	0x466	; 0x466 <nRF24L01_write_register>
 67e:	84 e0       	ldi	r24, 0x04	; 4
 680:	89 83       	std	Y+1, r24	; 0x01
 682:	21 e0       	ldi	r18, 0x01	; 1
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	ae 01       	movw	r20, r28
 688:	4f 5f       	subi	r20, 0xFF	; 255
 68a:	5f 4f       	sbci	r21, 0xFF	; 255
 68c:	6d e1       	ldi	r22, 0x1D	; 29
 68e:	c8 01       	movw	r24, r16
 690:	0e 94 33 02 	call	0x466	; 0x466 <nRF24L01_write_register>
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	89 83       	std	Y+1, r24	; 0x01
 698:	21 e0       	ldi	r18, 0x01	; 1
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	ae 01       	movw	r20, r28
 69e:	4f 5f       	subi	r20, 0xFF	; 255
 6a0:	5f 4f       	sbci	r21, 0xFF	; 255
 6a2:	62 e0       	ldi	r22, 0x02	; 2
 6a4:	c8 01       	movw	r24, r16
 6a6:	0e 94 33 02 	call	0x466	; 0x466 <nRF24L01_write_register>
 6aa:	0f 90       	pop	r0
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	1f 91       	pop	r17
 6b2:	0f 91       	pop	r16
 6b4:	ff 90       	pop	r15
 6b6:	08 95       	ret

000006b8 <nRF24L01_clear_transmit_interrupts>:
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
 6bc:	1f 92       	push	r1
 6be:	cd b7       	in	r28, 0x3d	; 61
 6c0:	de b7       	in	r29, 0x3e	; 62
 6c2:	20 e3       	ldi	r18, 0x30	; 48
 6c4:	29 83       	std	Y+1, r18	; 0x01
 6c6:	21 e0       	ldi	r18, 0x01	; 1
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	ae 01       	movw	r20, r28
 6cc:	4f 5f       	subi	r20, 0xFF	; 255
 6ce:	5f 4f       	sbci	r21, 0xFF	; 255
 6d0:	67 e0       	ldi	r22, 0x07	; 7
 6d2:	0e 94 33 02 	call	0x466	; 0x466 <nRF24L01_write_register>
 6d6:	0f 90       	pop	r0
 6d8:	df 91       	pop	r29
 6da:	cf 91       	pop	r28
 6dc:	08 95       	ret

000006de <nRF24L01_transmit>:
 6de:	cf 92       	push	r12
 6e0:	df 92       	push	r13
 6e2:	ef 92       	push	r14
 6e4:	ff 92       	push	r15
 6e6:	0f 93       	push	r16
 6e8:	1f 93       	push	r17
 6ea:	cf 93       	push	r28
 6ec:	df 93       	push	r29
 6ee:	00 d0       	rcall	.+0      	; 0x6f0 <nRF24L01_transmit+0x12>
 6f0:	00 d0       	rcall	.+0      	; 0x6f2 <nRF24L01_transmit+0x14>
 6f2:	00 d0       	rcall	.+0      	; 0x6f4 <nRF24L01_transmit+0x16>
 6f4:	cd b7       	in	r28, 0x3d	; 61
 6f6:	de b7       	in	r29, 0x3e	; 62
 6f8:	8c 01       	movw	r16, r24
 6fa:	6b 01       	movw	r12, r22
 6fc:	7a 01       	movw	r14, r20
 6fe:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <nRF24L01_clear_transmit_interrupts>
 702:	be 01       	movw	r22, r28
 704:	6f 5f       	subi	r22, 0xFF	; 255
 706:	7f 4f       	sbci	r23, 0xFF	; 255
 708:	c6 01       	movw	r24, r12
 70a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <copy_address>
 70e:	25 e0       	ldi	r18, 0x05	; 5
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	ae 01       	movw	r20, r28
 714:	4f 5f       	subi	r20, 0xFF	; 255
 716:	5f 4f       	sbci	r21, 0xFF	; 255
 718:	60 e1       	ldi	r22, 0x10	; 16
 71a:	c8 01       	movw	r24, r16
 71c:	0e 94 33 02 	call	0x466	; 0x466 <nRF24L01_write_register>
 720:	be 01       	movw	r22, r28
 722:	6f 5f       	subi	r22, 0xFF	; 255
 724:	7f 4f       	sbci	r23, 0xFF	; 255
 726:	c6 01       	movw	r24, r12
 728:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <copy_address>
 72c:	25 e0       	ldi	r18, 0x05	; 5
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	ae 01       	movw	r20, r28
 732:	4f 5f       	subi	r20, 0xFF	; 255
 734:	5f 4f       	sbci	r21, 0xFF	; 255
 736:	6a e0       	ldi	r22, 0x0A	; 10
 738:	c8 01       	movw	r24, r16
 73a:	0e 94 33 02 	call	0x466	; 0x466 <nRF24L01_write_register>
 73e:	d7 01       	movw	r26, r14
 740:	92 96       	adiw	r26, 0x22	; 34
 742:	2c 91       	ld	r18, X
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	a7 01       	movw	r20, r14
 748:	4e 5f       	subi	r20, 0xFE	; 254
 74a:	5f 4f       	sbci	r21, 0xFF	; 255
 74c:	60 ea       	ldi	r22, 0xA0	; 160
 74e:	c8 01       	movw	r24, r16
 750:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <nRF24L01_send_command>
 754:	21 e0       	ldi	r18, 0x01	; 1
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	ae 01       	movw	r20, r28
 75a:	4a 5f       	subi	r20, 0xFA	; 250
 75c:	5f 4f       	sbci	r21, 0xFF	; 255
 75e:	60 e0       	ldi	r22, 0x00	; 0
 760:	c8 01       	movw	r24, r16
 762:	0e 94 37 02 	call	0x46e	; 0x46e <nRF24L01_read_register>
 766:	8e 81       	ldd	r24, Y+6	; 0x06
 768:	8e 7f       	andi	r24, 0xFE	; 254
 76a:	8e 83       	std	Y+6, r24	; 0x06
 76c:	21 e0       	ldi	r18, 0x01	; 1
 76e:	30 e0       	ldi	r19, 0x00	; 0
 770:	ae 01       	movw	r20, r28
 772:	4a 5f       	subi	r20, 0xFA	; 250
 774:	5f 4f       	sbci	r21, 0xFF	; 255
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	c8 01       	movw	r24, r16
 77a:	0e 94 33 02 	call	0x466	; 0x466 <nRF24L01_write_register>
 77e:	d8 01       	movw	r26, r16
 780:	13 96       	adiw	r26, 0x03	; 3
 782:	ed 91       	ld	r30, X+
 784:	fc 91       	ld	r31, X
 786:	14 97       	sbiw	r26, 0x04	; 4
 788:	20 81       	ld	r18, Z
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	15 96       	adiw	r26, 0x05	; 5
 790:	0c 90       	ld	r0, X
 792:	02 c0       	rjmp	.+4      	; 0x798 <nRF24L01_transmit+0xba>
 794:	88 0f       	add	r24, r24
 796:	99 1f       	adc	r25, r25
 798:	0a 94       	dec	r0
 79a:	e2 f7       	brpl	.-8      	; 0x794 <nRF24L01_transmit+0xb6>
 79c:	82 2b       	or	r24, r18
 79e:	80 83       	st	Z, r24
 7a0:	26 96       	adiw	r28, 0x06	; 6
 7a2:	0f b6       	in	r0, 0x3f	; 63
 7a4:	f8 94       	cli
 7a6:	de bf       	out	0x3e, r29	; 62
 7a8:	0f be       	out	0x3f, r0	; 63
 7aa:	cd bf       	out	0x3d, r28	; 61
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	1f 91       	pop	r17
 7b2:	0f 91       	pop	r16
 7b4:	ff 90       	pop	r15
 7b6:	ef 90       	pop	r14
 7b8:	df 90       	pop	r13
 7ba:	cf 90       	pop	r12
 7bc:	08 95       	ret

000007be <nRF24L01_transmit_success>:
 7be:	ef 92       	push	r14
 7c0:	ff 92       	push	r15
 7c2:	0f 93       	push	r16
 7c4:	1f 93       	push	r17
 7c6:	cf 93       	push	r28
 7c8:	df 93       	push	r29
 7ca:	1f 92       	push	r1
 7cc:	cd b7       	in	r28, 0x3d	; 61
 7ce:	de b7       	in	r29, 0x3e	; 62
 7d0:	8c 01       	movw	r16, r24
 7d2:	dc 01       	movw	r26, r24
 7d4:	13 96       	adiw	r26, 0x03	; 3
 7d6:	ed 91       	ld	r30, X+
 7d8:	fc 91       	ld	r31, X
 7da:	14 97       	sbiw	r26, 0x04	; 4
 7dc:	20 81       	ld	r18, Z
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	15 96       	adiw	r26, 0x05	; 5
 7e4:	0c 90       	ld	r0, X
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <nRF24L01_transmit_success+0x2e>
 7e8:	88 0f       	add	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	0a 94       	dec	r0
 7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <nRF24L01_transmit_success+0x2a>
 7f0:	80 95       	com	r24
 7f2:	82 23       	and	r24, r18
 7f4:	80 83       	st	Z, r24
 7f6:	c8 01       	movw	r24, r16
 7f8:	0e 94 42 02 	call	0x484	; 0x484 <nRF24L01_update_status>
 7fc:	f8 01       	movw	r30, r16
 7fe:	87 85       	ldd	r24, Z+15	; 0x0f
 800:	85 fd       	sbrc	r24, 5
 802:	07 c0       	rjmp	.+14     	; 0x812 <nRF24L01_transmit_success+0x54>
 804:	84 fd       	sbrc	r24, 4
 806:	08 c0       	rjmp	.+16     	; 0x818 <nRF24L01_transmit_success+0x5a>
 808:	68 94       	set
 80a:	ee 24       	eor	r14, r14
 80c:	e1 f8       	bld	r14, 1
 80e:	f1 2c       	mov	r15, r1
 810:	06 c0       	rjmp	.+12     	; 0x81e <nRF24L01_transmit_success+0x60>
 812:	e1 2c       	mov	r14, r1
 814:	f1 2c       	mov	r15, r1
 816:	03 c0       	rjmp	.+6      	; 0x81e <nRF24L01_transmit_success+0x60>
 818:	ee 24       	eor	r14, r14
 81a:	e3 94       	inc	r14
 81c:	f1 2c       	mov	r15, r1
 81e:	c8 01       	movw	r24, r16
 820:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <nRF24L01_clear_transmit_interrupts>
 824:	21 e0       	ldi	r18, 0x01	; 1
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	ae 01       	movw	r20, r28
 82a:	4f 5f       	subi	r20, 0xFF	; 255
 82c:	5f 4f       	sbci	r21, 0xFF	; 255
 82e:	60 e0       	ldi	r22, 0x00	; 0
 830:	c8 01       	movw	r24, r16
 832:	0e 94 37 02 	call	0x46e	; 0x46e <nRF24L01_read_register>
 836:	89 81       	ldd	r24, Y+1	; 0x01
 838:	81 60       	ori	r24, 0x01	; 1
 83a:	89 83       	std	Y+1, r24	; 0x01
 83c:	21 e0       	ldi	r18, 0x01	; 1
 83e:	30 e0       	ldi	r19, 0x00	; 0
 840:	ae 01       	movw	r20, r28
 842:	4f 5f       	subi	r20, 0xFF	; 255
 844:	5f 4f       	sbci	r21, 0xFF	; 255
 846:	60 e0       	ldi	r22, 0x00	; 0
 848:	c8 01       	movw	r24, r16
 84a:	0e 94 33 02 	call	0x466	; 0x466 <nRF24L01_write_register>
 84e:	c7 01       	movw	r24, r14
 850:	0f 90       	pop	r0
 852:	df 91       	pop	r29
 854:	cf 91       	pop	r28
 856:	1f 91       	pop	r17
 858:	0f 91       	pop	r16
 85a:	ff 90       	pop	r15
 85c:	ef 90       	pop	r14
 85e:	08 95       	ret

00000860 <initUSART>:
 860:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 864:	83 e3       	ldi	r24, 0x33	; 51
 866:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 86a:	e0 ec       	ldi	r30, 0xC0	; 192
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	80 81       	ld	r24, Z
 870:	8d 7f       	andi	r24, 0xFD	; 253
 872:	80 83       	st	Z, r24
 874:	88 e1       	ldi	r24, 0x18	; 24
 876:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 87a:	86 e0       	ldi	r24, 0x06	; 6
 87c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 880:	08 95       	ret

00000882 <transmitByte>:
 882:	e0 ec       	ldi	r30, 0xC0	; 192
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	90 81       	ld	r25, Z
 888:	95 ff       	sbrs	r25, 5
 88a:	fd cf       	rjmp	.-6      	; 0x886 <transmitByte+0x4>
 88c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 890:	08 95       	ret

00000892 <printString>:
 892:	0f 93       	push	r16
 894:	1f 93       	push	r17
 896:	cf 93       	push	r28
 898:	fc 01       	movw	r30, r24
 89a:	80 81       	ld	r24, Z
 89c:	88 23       	and	r24, r24
 89e:	59 f0       	breq	.+22     	; 0x8b6 <printString+0x24>
 8a0:	8f 01       	movw	r16, r30
 8a2:	c0 e0       	ldi	r28, 0x00	; 0
 8a4:	0e 94 41 04 	call	0x882	; 0x882 <transmitByte>
 8a8:	cf 5f       	subi	r28, 0xFF	; 255
 8aa:	f8 01       	movw	r30, r16
 8ac:	ec 0f       	add	r30, r28
 8ae:	f1 1d       	adc	r31, r1
 8b0:	80 81       	ld	r24, Z
 8b2:	81 11       	cpse	r24, r1
 8b4:	f7 cf       	rjmp	.-18     	; 0x8a4 <printString+0x12>
 8b6:	cf 91       	pop	r28
 8b8:	1f 91       	pop	r17
 8ba:	0f 91       	pop	r16
 8bc:	08 95       	ret

000008be <nibbleToHexCharacter>:
 8be:	8a 30       	cpi	r24, 0x0A	; 10
 8c0:	10 f4       	brcc	.+4      	; 0x8c6 <nibbleToHexCharacter+0x8>
 8c2:	80 5d       	subi	r24, 0xD0	; 208
 8c4:	08 95       	ret
 8c6:	89 5c       	subi	r24, 0xC9	; 201
 8c8:	08 95       	ret

000008ca <printHexByte>:
 8ca:	cf 93       	push	r28
 8cc:	c8 2f       	mov	r28, r24
 8ce:	82 95       	swap	r24
 8d0:	8f 70       	andi	r24, 0x0F	; 15
 8d2:	0e 94 5f 04 	call	0x8be	; 0x8be <nibbleToHexCharacter>
 8d6:	0e 94 41 04 	call	0x882	; 0x882 <transmitByte>
 8da:	8c 2f       	mov	r24, r28
 8dc:	8f 70       	andi	r24, 0x0F	; 15
 8de:	0e 94 5f 04 	call	0x8be	; 0x8be <nibbleToHexCharacter>
 8e2:	0e 94 41 04 	call	0x882	; 0x882 <transmitByte>
 8e6:	cf 91       	pop	r28
 8e8:	08 95       	ret

000008ea <malloc>:
 8ea:	0f 93       	push	r16
 8ec:	1f 93       	push	r17
 8ee:	cf 93       	push	r28
 8f0:	df 93       	push	r29
 8f2:	82 30       	cpi	r24, 0x02	; 2
 8f4:	91 05       	cpc	r25, r1
 8f6:	10 f4       	brcc	.+4      	; 0x8fc <malloc+0x12>
 8f8:	82 e0       	ldi	r24, 0x02	; 2
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <__flp>
 900:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <__flp+0x1>
 904:	20 e0       	ldi	r18, 0x00	; 0
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	a0 e0       	ldi	r26, 0x00	; 0
 90a:	b0 e0       	ldi	r27, 0x00	; 0
 90c:	30 97       	sbiw	r30, 0x00	; 0
 90e:	19 f1       	breq	.+70     	; 0x956 <__stack+0x57>
 910:	40 81       	ld	r20, Z
 912:	51 81       	ldd	r21, Z+1	; 0x01
 914:	02 81       	ldd	r16, Z+2	; 0x02
 916:	13 81       	ldd	r17, Z+3	; 0x03
 918:	48 17       	cp	r20, r24
 91a:	59 07       	cpc	r21, r25
 91c:	c8 f0       	brcs	.+50     	; 0x950 <__stack+0x51>
 91e:	84 17       	cp	r24, r20
 920:	95 07       	cpc	r25, r21
 922:	69 f4       	brne	.+26     	; 0x93e <__stack+0x3f>
 924:	10 97       	sbiw	r26, 0x00	; 0
 926:	31 f0       	breq	.+12     	; 0x934 <__stack+0x35>
 928:	12 96       	adiw	r26, 0x02	; 2
 92a:	0c 93       	st	X, r16
 92c:	12 97       	sbiw	r26, 0x02	; 2
 92e:	13 96       	adiw	r26, 0x03	; 3
 930:	1c 93       	st	X, r17
 932:	27 c0       	rjmp	.+78     	; 0x982 <__stack+0x83>
 934:	00 93 0e 02 	sts	0x020E, r16	; 0x80020e <__flp>
 938:	10 93 0f 02 	sts	0x020F, r17	; 0x80020f <__flp+0x1>
 93c:	22 c0       	rjmp	.+68     	; 0x982 <__stack+0x83>
 93e:	21 15       	cp	r18, r1
 940:	31 05       	cpc	r19, r1
 942:	19 f0       	breq	.+6      	; 0x94a <__stack+0x4b>
 944:	42 17       	cp	r20, r18
 946:	53 07       	cpc	r21, r19
 948:	18 f4       	brcc	.+6      	; 0x950 <__stack+0x51>
 94a:	9a 01       	movw	r18, r20
 94c:	bd 01       	movw	r22, r26
 94e:	ef 01       	movw	r28, r30
 950:	df 01       	movw	r26, r30
 952:	f8 01       	movw	r30, r16
 954:	db cf       	rjmp	.-74     	; 0x90c <__stack+0xd>
 956:	21 15       	cp	r18, r1
 958:	31 05       	cpc	r19, r1
 95a:	f9 f0       	breq	.+62     	; 0x99a <__stack+0x9b>
 95c:	28 1b       	sub	r18, r24
 95e:	39 0b       	sbc	r19, r25
 960:	24 30       	cpi	r18, 0x04	; 4
 962:	31 05       	cpc	r19, r1
 964:	80 f4       	brcc	.+32     	; 0x986 <__stack+0x87>
 966:	8a 81       	ldd	r24, Y+2	; 0x02
 968:	9b 81       	ldd	r25, Y+3	; 0x03
 96a:	61 15       	cp	r22, r1
 96c:	71 05       	cpc	r23, r1
 96e:	21 f0       	breq	.+8      	; 0x978 <__stack+0x79>
 970:	fb 01       	movw	r30, r22
 972:	93 83       	std	Z+3, r25	; 0x03
 974:	82 83       	std	Z+2, r24	; 0x02
 976:	04 c0       	rjmp	.+8      	; 0x980 <__stack+0x81>
 978:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <__flp+0x1>
 97c:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <__flp>
 980:	fe 01       	movw	r30, r28
 982:	32 96       	adiw	r30, 0x02	; 2
 984:	44 c0       	rjmp	.+136    	; 0xa0e <__stack+0x10f>
 986:	fe 01       	movw	r30, r28
 988:	e2 0f       	add	r30, r18
 98a:	f3 1f       	adc	r31, r19
 98c:	81 93       	st	Z+, r24
 98e:	91 93       	st	Z+, r25
 990:	22 50       	subi	r18, 0x02	; 2
 992:	31 09       	sbc	r19, r1
 994:	39 83       	std	Y+1, r19	; 0x01
 996:	28 83       	st	Y, r18
 998:	3a c0       	rjmp	.+116    	; 0xa0e <__stack+0x10f>
 99a:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <__brkval>
 99e:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <__brkval+0x1>
 9a2:	23 2b       	or	r18, r19
 9a4:	41 f4       	brne	.+16     	; 0x9b6 <__stack+0xb7>
 9a6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 9aa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 9ae:	30 93 0d 02 	sts	0x020D, r19	; 0x80020d <__brkval+0x1>
 9b2:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <__brkval>
 9b6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 9ba:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 9be:	21 15       	cp	r18, r1
 9c0:	31 05       	cpc	r19, r1
 9c2:	41 f4       	brne	.+16     	; 0x9d4 <__stack+0xd5>
 9c4:	2d b7       	in	r18, 0x3d	; 61
 9c6:	3e b7       	in	r19, 0x3e	; 62
 9c8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 9cc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 9d0:	24 1b       	sub	r18, r20
 9d2:	35 0b       	sbc	r19, r21
 9d4:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__brkval>
 9d8:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <__brkval+0x1>
 9dc:	e2 17       	cp	r30, r18
 9de:	f3 07       	cpc	r31, r19
 9e0:	a0 f4       	brcc	.+40     	; 0xa0a <__stack+0x10b>
 9e2:	2e 1b       	sub	r18, r30
 9e4:	3f 0b       	sbc	r19, r31
 9e6:	28 17       	cp	r18, r24
 9e8:	39 07       	cpc	r19, r25
 9ea:	78 f0       	brcs	.+30     	; 0xa0a <__stack+0x10b>
 9ec:	ac 01       	movw	r20, r24
 9ee:	4e 5f       	subi	r20, 0xFE	; 254
 9f0:	5f 4f       	sbci	r21, 0xFF	; 255
 9f2:	24 17       	cp	r18, r20
 9f4:	35 07       	cpc	r19, r21
 9f6:	48 f0       	brcs	.+18     	; 0xa0a <__stack+0x10b>
 9f8:	4e 0f       	add	r20, r30
 9fa:	5f 1f       	adc	r21, r31
 9fc:	50 93 0d 02 	sts	0x020D, r21	; 0x80020d <__brkval+0x1>
 a00:	40 93 0c 02 	sts	0x020C, r20	; 0x80020c <__brkval>
 a04:	81 93       	st	Z+, r24
 a06:	91 93       	st	Z+, r25
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <__stack+0x10f>
 a0a:	e0 e0       	ldi	r30, 0x00	; 0
 a0c:	f0 e0       	ldi	r31, 0x00	; 0
 a0e:	cf 01       	movw	r24, r30
 a10:	df 91       	pop	r29
 a12:	cf 91       	pop	r28
 a14:	1f 91       	pop	r17
 a16:	0f 91       	pop	r16
 a18:	08 95       	ret

00000a1a <free>:
 a1a:	cf 93       	push	r28
 a1c:	df 93       	push	r29
 a1e:	00 97       	sbiw	r24, 0x00	; 0
 a20:	09 f4       	brne	.+2      	; 0xa24 <free+0xa>
 a22:	81 c0       	rjmp	.+258    	; 0xb26 <free+0x10c>
 a24:	fc 01       	movw	r30, r24
 a26:	32 97       	sbiw	r30, 0x02	; 2
 a28:	13 82       	std	Z+3, r1	; 0x03
 a2a:	12 82       	std	Z+2, r1	; 0x02
 a2c:	a0 91 0e 02 	lds	r26, 0x020E	; 0x80020e <__flp>
 a30:	b0 91 0f 02 	lds	r27, 0x020F	; 0x80020f <__flp+0x1>
 a34:	10 97       	sbiw	r26, 0x00	; 0
 a36:	81 f4       	brne	.+32     	; 0xa58 <free+0x3e>
 a38:	20 81       	ld	r18, Z
 a3a:	31 81       	ldd	r19, Z+1	; 0x01
 a3c:	82 0f       	add	r24, r18
 a3e:	93 1f       	adc	r25, r19
 a40:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <__brkval>
 a44:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <__brkval+0x1>
 a48:	28 17       	cp	r18, r24
 a4a:	39 07       	cpc	r19, r25
 a4c:	51 f5       	brne	.+84     	; 0xaa2 <free+0x88>
 a4e:	f0 93 0d 02 	sts	0x020D, r31	; 0x80020d <__brkval+0x1>
 a52:	e0 93 0c 02 	sts	0x020C, r30	; 0x80020c <__brkval>
 a56:	67 c0       	rjmp	.+206    	; 0xb26 <free+0x10c>
 a58:	ed 01       	movw	r28, r26
 a5a:	20 e0       	ldi	r18, 0x00	; 0
 a5c:	30 e0       	ldi	r19, 0x00	; 0
 a5e:	ce 17       	cp	r28, r30
 a60:	df 07       	cpc	r29, r31
 a62:	40 f4       	brcc	.+16     	; 0xa74 <free+0x5a>
 a64:	4a 81       	ldd	r20, Y+2	; 0x02
 a66:	5b 81       	ldd	r21, Y+3	; 0x03
 a68:	9e 01       	movw	r18, r28
 a6a:	41 15       	cp	r20, r1
 a6c:	51 05       	cpc	r21, r1
 a6e:	f1 f0       	breq	.+60     	; 0xaac <free+0x92>
 a70:	ea 01       	movw	r28, r20
 a72:	f5 cf       	rjmp	.-22     	; 0xa5e <free+0x44>
 a74:	d3 83       	std	Z+3, r29	; 0x03
 a76:	c2 83       	std	Z+2, r28	; 0x02
 a78:	40 81       	ld	r20, Z
 a7a:	51 81       	ldd	r21, Z+1	; 0x01
 a7c:	84 0f       	add	r24, r20
 a7e:	95 1f       	adc	r25, r21
 a80:	c8 17       	cp	r28, r24
 a82:	d9 07       	cpc	r29, r25
 a84:	59 f4       	brne	.+22     	; 0xa9c <free+0x82>
 a86:	88 81       	ld	r24, Y
 a88:	99 81       	ldd	r25, Y+1	; 0x01
 a8a:	84 0f       	add	r24, r20
 a8c:	95 1f       	adc	r25, r21
 a8e:	02 96       	adiw	r24, 0x02	; 2
 a90:	91 83       	std	Z+1, r25	; 0x01
 a92:	80 83       	st	Z, r24
 a94:	8a 81       	ldd	r24, Y+2	; 0x02
 a96:	9b 81       	ldd	r25, Y+3	; 0x03
 a98:	93 83       	std	Z+3, r25	; 0x03
 a9a:	82 83       	std	Z+2, r24	; 0x02
 a9c:	21 15       	cp	r18, r1
 a9e:	31 05       	cpc	r19, r1
 aa0:	29 f4       	brne	.+10     	; 0xaac <free+0x92>
 aa2:	f0 93 0f 02 	sts	0x020F, r31	; 0x80020f <__flp+0x1>
 aa6:	e0 93 0e 02 	sts	0x020E, r30	; 0x80020e <__flp>
 aaa:	3d c0       	rjmp	.+122    	; 0xb26 <free+0x10c>
 aac:	e9 01       	movw	r28, r18
 aae:	fb 83       	std	Y+3, r31	; 0x03
 ab0:	ea 83       	std	Y+2, r30	; 0x02
 ab2:	49 91       	ld	r20, Y+
 ab4:	59 91       	ld	r21, Y+
 ab6:	c4 0f       	add	r28, r20
 ab8:	d5 1f       	adc	r29, r21
 aba:	ec 17       	cp	r30, r28
 abc:	fd 07       	cpc	r31, r29
 abe:	61 f4       	brne	.+24     	; 0xad8 <free+0xbe>
 ac0:	80 81       	ld	r24, Z
 ac2:	91 81       	ldd	r25, Z+1	; 0x01
 ac4:	84 0f       	add	r24, r20
 ac6:	95 1f       	adc	r25, r21
 ac8:	02 96       	adiw	r24, 0x02	; 2
 aca:	e9 01       	movw	r28, r18
 acc:	99 83       	std	Y+1, r25	; 0x01
 ace:	88 83       	st	Y, r24
 ad0:	82 81       	ldd	r24, Z+2	; 0x02
 ad2:	93 81       	ldd	r25, Z+3	; 0x03
 ad4:	9b 83       	std	Y+3, r25	; 0x03
 ad6:	8a 83       	std	Y+2, r24	; 0x02
 ad8:	e0 e0       	ldi	r30, 0x00	; 0
 ada:	f0 e0       	ldi	r31, 0x00	; 0
 adc:	12 96       	adiw	r26, 0x02	; 2
 ade:	8d 91       	ld	r24, X+
 ae0:	9c 91       	ld	r25, X
 ae2:	13 97       	sbiw	r26, 0x03	; 3
 ae4:	00 97       	sbiw	r24, 0x00	; 0
 ae6:	19 f0       	breq	.+6      	; 0xaee <free+0xd4>
 ae8:	fd 01       	movw	r30, r26
 aea:	dc 01       	movw	r26, r24
 aec:	f7 cf       	rjmp	.-18     	; 0xadc <free+0xc2>
 aee:	8d 91       	ld	r24, X+
 af0:	9c 91       	ld	r25, X
 af2:	11 97       	sbiw	r26, 0x01	; 1
 af4:	9d 01       	movw	r18, r26
 af6:	2e 5f       	subi	r18, 0xFE	; 254
 af8:	3f 4f       	sbci	r19, 0xFF	; 255
 afa:	82 0f       	add	r24, r18
 afc:	93 1f       	adc	r25, r19
 afe:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <__brkval>
 b02:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <__brkval+0x1>
 b06:	28 17       	cp	r18, r24
 b08:	39 07       	cpc	r19, r25
 b0a:	69 f4       	brne	.+26     	; 0xb26 <free+0x10c>
 b0c:	30 97       	sbiw	r30, 0x00	; 0
 b0e:	29 f4       	brne	.+10     	; 0xb1a <free+0x100>
 b10:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <__flp+0x1>
 b14:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <__flp>
 b18:	02 c0       	rjmp	.+4      	; 0xb1e <free+0x104>
 b1a:	13 82       	std	Z+3, r1	; 0x03
 b1c:	12 82       	std	Z+2, r1	; 0x02
 b1e:	b0 93 0d 02 	sts	0x020D, r27	; 0x80020d <__brkval+0x1>
 b22:	a0 93 0c 02 	sts	0x020C, r26	; 0x80020c <__brkval>
 b26:	df 91       	pop	r29
 b28:	cf 91       	pop	r28
 b2a:	08 95       	ret

00000b2c <_exit>:
 b2c:	f8 94       	cli

00000b2e <__stop_program>:
 b2e:	ff cf       	rjmp	.-2      	; 0xb2e <__stop_program>
