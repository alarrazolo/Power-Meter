
PowerMeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b2  00800100  00000778  0000080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000778  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  008002b2  008002b2  000009be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e2f  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cba  00000000  00000000  00003a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001275  00000000  00000000  00004759  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b0  00000000  00000000  000059d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085c  00000000  00000000  00005f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001533  00000000  00000000  000067dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00007d0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3b       	cpi	r26, 0xB2	; 178
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 eb       	ldi	r26, 0xB2	; 178
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3b       	cpi	r26, 0xB4	; 180
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 34 03 	call	0x668	; 0x668 <main>
  9e:	0c 94 ba 03 	jmp	0x774	; 0x774 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initI2C>:
//#ifndef F_CPU                          /* if not defined in Makefile... */
//#define F_CPU  1000000UL                     /* set a safe default baud rate */
//#endif

void initI2C(void) {
  TWBR = 32;                               /* set bit rate, see p. 242 */
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
                                     /* 8MHz / (16+2*TWBR*1) ~= 100kHz */
  TWCR |= (1 << TWEN);                                       /* enable */
  ac:	ec eb       	ldi	r30, 0xBC	; 188
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <i2cWaitForComplete>:
}

void i2cWaitForComplete(void) {
  loop_until_bit_is_set(TWCR, TWINT);
  b8:	ec eb       	ldi	r30, 0xBC	; 188
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 23       	and	r24, r24
  c0:	ec f7       	brge	.-6      	; 0xbc <i2cWaitForComplete+0x4>
}
  c2:	08 95       	ret

000000c4 <i2cStart>:

void i2cStart(void) {
  TWCR = (_BV(TWINT) | _BV(TWEN) | _BV(TWSTA));
  c4:	84 ea       	ldi	r24, 0xA4	; 164
  c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  i2cWaitForComplete();
  ca:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2cWaitForComplete>
  ce:	08 95       	ret

000000d0 <i2cStop>:
}

void i2cStop(void) {
  TWCR = (_BV(TWINT) | _BV(TWEN) | _BV(TWSTO));
  d0:	84 e9       	ldi	r24, 0x94	; 148
  d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d6:	08 95       	ret

000000d8 <i2cReadAck>:
}

uint8_t i2cReadAck(void) {
  TWCR = (_BV(TWINT) | _BV(TWEN) | _BV(TWEA));
  d8:	84 ec       	ldi	r24, 0xC4	; 196
  da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  i2cWaitForComplete();
  de:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2cWaitForComplete>
  return (TWDR);
  e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
  e6:	08 95       	ret

000000e8 <i2cReadNoAck>:

uint8_t i2cReadNoAck(void) {
  TWCR = (_BV(TWINT) | _BV(TWEN));
  e8:	84 e8       	ldi	r24, 0x84	; 132
  ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  i2cWaitForComplete();
  ee:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2cWaitForComplete>
  return (TWDR);
  f2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
  f6:	08 95       	ret

000000f8 <i2cSend>:

void i2cSend(uint8_t data) {
  TWDR = data;
  f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  TWCR = (_BV(TWINT) | _BV(TWEN));                  /* init and enable */
  fc:	84 e8       	ldi	r24, 0x84	; 132
  fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  i2cWaitForComplete();
 102:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2cWaitForComplete>
 106:	08 95       	ret

00000108 <clearBuff>:
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4);}
	
uint8_t clockAddressR = 0b11010001; // write bit for DS1307
uint8_t clockAddressW = 0b11010000; // read bit for DS1307

void clearBuff(char *buf){
 108:	dc 01       	movw	r26, r24
	uint8_t i = 0;
	while (buf[i]) {
 10a:	8c 91       	ld	r24, X
 10c:	88 23       	and	r24, r24
 10e:	51 f0       	breq	.+20     	; 0x124 <clearBuff+0x1c>
 110:	fd 01       	movw	r30, r26
 112:	90 e0       	ldi	r25, 0x00	; 0
		buf[i] = 0;
 114:	10 82       	st	Z, r1
		i++;
 116:	9f 5f       	subi	r25, 0xFF	; 255
uint8_t clockAddressR = 0b11010001; // write bit for DS1307
uint8_t clockAddressW = 0b11010000; // read bit for DS1307

void clearBuff(char *buf){
	uint8_t i = 0;
	while (buf[i]) {
 118:	fd 01       	movw	r30, r26
 11a:	e9 0f       	add	r30, r25
 11c:	f1 1d       	adc	r31, r1
 11e:	20 81       	ld	r18, Z
 120:	21 11       	cpse	r18, r1
 122:	f8 cf       	rjmp	.-16     	; 0x114 <clearBuff+0xc>
 124:	08 95       	ret

00000126 <formatTime>:
		i++;
	}
}

void formatTime(uint8_t byte, char *buf, int i){
	buf[i] = ('0' + ((byte / 10) % 10));                      // Tens
 126:	fb 01       	movw	r30, r22
 128:	e4 0f       	add	r30, r20
 12a:	f5 1f       	adc	r31, r21
 12c:	9d ec       	ldi	r25, 0xCD	; 205
 12e:	89 9f       	mul	r24, r25
 130:	21 2d       	mov	r18, r1
 132:	11 24       	eor	r1, r1
 134:	26 95       	lsr	r18
 136:	26 95       	lsr	r18
 138:	26 95       	lsr	r18
 13a:	29 9f       	mul	r18, r25
 13c:	91 2d       	mov	r25, r1
 13e:	11 24       	eor	r1, r1
 140:	96 95       	lsr	r25
 142:	96 95       	lsr	r25
 144:	96 95       	lsr	r25
 146:	99 0f       	add	r25, r25
 148:	39 2f       	mov	r19, r25
 14a:	33 0f       	add	r19, r19
 14c:	33 0f       	add	r19, r19
 14e:	93 0f       	add	r25, r19
 150:	32 2f       	mov	r19, r18
 152:	39 1b       	sub	r19, r25
 154:	93 2f       	mov	r25, r19
 156:	90 5d       	subi	r25, 0xD0	; 208
 158:	90 83       	st	Z, r25
	buf[++i] = ('0' + (byte % 10));                             // Ones
 15a:	22 0f       	add	r18, r18
 15c:	92 2f       	mov	r25, r18
 15e:	99 0f       	add	r25, r25
 160:	99 0f       	add	r25, r25
 162:	29 0f       	add	r18, r25
 164:	82 1b       	sub	r24, r18
 166:	80 5d       	subi	r24, 0xD0	; 208
 168:	81 83       	std	Z+1, r24	; 0x01
 16a:	08 95       	ret

0000016c <formatYear>:
}

void formatYear(uint16_t word, char *buf, int i){
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	ec 01       	movw	r28, r24
	buf[i] = ('0' + ((word / 1000) % 10));               // Thousands
	buf[i] = ('0' + ((word / 100) % 10));                 // Hundreds
	buf[i] = ('0' + ((word / 10) % 10));                      // Tens
 172:	46 0f       	add	r20, r22
 174:	57 1f       	adc	r21, r23
 176:	9c 01       	movw	r18, r24
 178:	ad ec       	ldi	r26, 0xCD	; 205
 17a:	bc ec       	ldi	r27, 0xCC	; 204
 17c:	0e 94 ab 03 	call	0x756	; 0x756 <__umulhisi3>
 180:	fc 01       	movw	r30, r24
 182:	f6 95       	lsr	r31
 184:	e7 95       	ror	r30
 186:	f6 95       	lsr	r31
 188:	e7 95       	ror	r30
 18a:	f6 95       	lsr	r31
 18c:	e7 95       	ror	r30
 18e:	9f 01       	movw	r18, r30
 190:	0e 94 ab 03 	call	0x756	; 0x756 <__umulhisi3>
 194:	96 95       	lsr	r25
 196:	87 95       	ror	r24
 198:	96 95       	lsr	r25
 19a:	87 95       	ror	r24
 19c:	96 95       	lsr	r25
 19e:	87 95       	ror	r24
 1a0:	9c 01       	movw	r18, r24
 1a2:	22 0f       	add	r18, r18
 1a4:	33 1f       	adc	r19, r19
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	82 0f       	add	r24, r18
 1b4:	93 1f       	adc	r25, r19
 1b6:	9f 01       	movw	r18, r30
 1b8:	28 1b       	sub	r18, r24
 1ba:	39 0b       	sbc	r19, r25
 1bc:	c9 01       	movw	r24, r18
 1be:	80 5d       	subi	r24, 0xD0	; 208
 1c0:	da 01       	movw	r26, r20
 1c2:	8c 93       	st	X, r24
	buf[++i] = ('0' + (word % 10));                             // Ones
 1c4:	cf 01       	movw	r24, r30
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	ee 0f       	add	r30, r30
 1cc:	ff 1f       	adc	r31, r31
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	ee 0f       	add	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	e8 0f       	add	r30, r24
 1d8:	f9 1f       	adc	r31, r25
 1da:	ce 1b       	sub	r28, r30
 1dc:	df 0b       	sbc	r29, r31
 1de:	c0 5d       	subi	r28, 0xD0	; 208
 1e0:	11 96       	adiw	r26, 0x01	; 1
 1e2:	cc 93       	st	X, r28
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <get_time>:

void get_time(char *buf){
 1ea:	9f 92       	push	r9
 1ec:	af 92       	push	r10
 1ee:	bf 92       	push	r11
 1f0:	cf 92       	push	r12
 1f2:	df 92       	push	r13
 1f4:	ef 92       	push	r14
 1f6:	ff 92       	push	r15
 1f8:	0f 93       	push	r16
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ec 01       	movw	r28, r24
	clearBuff(buf);
 202:	0e 94 84 00 	call	0x108	; 0x108 <clearBuff>
	int i = 0;
	char* timeflag;
	i2cStart();
 206:	0e 94 62 00 	call	0xc4	; 0xc4 <i2cStart>
	i2cSend(clockAddressW);
 20a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 20e:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2cSend>
	i2cSend(0x00);
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2cSend>
	i2cStart();
 218:	0e 94 62 00 	call	0xc4	; 0xc4 <i2cStart>
	i2cSend(clockAddressR);
 21c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <clockAddressR>
 220:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2cSend>
	
	uint8_t ss = bcd2bin(i2cReadAck() & 0x7F);		//seconds
 224:	0e 94 6c 00 	call	0xd8	; 0xd8 <i2cReadAck>
 228:	8f 77       	andi	r24, 0x7F	; 127
#include "i2c_RTC_DS1307.h"

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4);}
 22a:	98 2f       	mov	r25, r24
 22c:	92 95       	swap	r25
 22e:	9f 70       	andi	r25, 0x0F	; 15
 230:	29 2f       	mov	r18, r25
 232:	22 0f       	add	r18, r18
 234:	92 0f       	add	r25, r18
 236:	99 0f       	add	r25, r25
 238:	e8 2e       	mov	r14, r24
 23a:	e9 1a       	sub	r14, r25
	i2cSend(0x00);
	i2cStart();
	i2cSend(clockAddressR);
	
	uint8_t ss = bcd2bin(i2cReadAck() & 0x7F);		//seconds
	uint8_t mm = bcd2bin(i2cReadAck());		//minutes
 23c:	0e 94 6c 00 	call	0xd8	; 0xd8 <i2cReadAck>
#include "i2c_RTC_DS1307.h"

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4);}
 240:	98 2f       	mov	r25, r24
 242:	92 95       	swap	r25
 244:	9f 70       	andi	r25, 0x0F	; 15
 246:	29 2f       	mov	r18, r25
 248:	22 0f       	add	r18, r18
 24a:	92 0f       	add	r25, r18
 24c:	99 0f       	add	r25, r25
 24e:	d8 2e       	mov	r13, r24
 250:	d9 1a       	sub	r13, r25
	i2cStart();
	i2cSend(clockAddressR);
	
	uint8_t ss = bcd2bin(i2cReadAck() & 0x7F);		//seconds
	uint8_t mm = bcd2bin(i2cReadAck());		//minutes
	uint8_t hh = bcd2bin(i2cReadAck());		//hours
 252:	0e 94 6c 00 	call	0xd8	; 0xd8 <i2cReadAck>
#include "i2c_RTC_DS1307.h"

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4);}
 256:	98 2f       	mov	r25, r24
 258:	92 95       	swap	r25
 25a:	9f 70       	andi	r25, 0x0F	; 15
 25c:	29 2f       	mov	r18, r25
 25e:	22 0f       	add	r18, r18
 260:	92 0f       	add	r25, r18
 262:	99 0f       	add	r25, r25
 264:	f8 2e       	mov	r15, r24
 266:	f9 1a       	sub	r15, r25
	i2cSend(clockAddressR);
	
	uint8_t ss = bcd2bin(i2cReadAck() & 0x7F);		//seconds
	uint8_t mm = bcd2bin(i2cReadAck());		//minutes
	uint8_t hh = bcd2bin(i2cReadAck());		//hours
	bcd2bin(i2cReadAck());		//day of the week
 268:	0e 94 6c 00 	call	0xd8	; 0xd8 <i2cReadAck>
	uint8_t date = bcd2bin(i2cReadAck());		//day of the month
 26c:	0e 94 6c 00 	call	0xd8	; 0xd8 <i2cReadAck>
#include "i2c_RTC_DS1307.h"

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4);}
 270:	98 2f       	mov	r25, r24
 272:	92 95       	swap	r25
 274:	9f 70       	andi	r25, 0x0F	; 15
 276:	29 2f       	mov	r18, r25
 278:	22 0f       	add	r18, r18
 27a:	92 0f       	add	r25, r18
 27c:	99 0f       	add	r25, r25
 27e:	c8 2e       	mov	r12, r24
 280:	c9 1a       	sub	r12, r25
	uint8_t ss = bcd2bin(i2cReadAck() & 0x7F);		//seconds
	uint8_t mm = bcd2bin(i2cReadAck());		//minutes
	uint8_t hh = bcd2bin(i2cReadAck());		//hours
	bcd2bin(i2cReadAck());		//day of the week
	uint8_t date = bcd2bin(i2cReadAck());		//day of the month
	uint8_t month = bcd2bin(i2cReadAck());		//month
 282:	0e 94 6c 00 	call	0xd8	; 0xd8 <i2cReadAck>
#include "i2c_RTC_DS1307.h"

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4);}
 286:	98 2f       	mov	r25, r24
 288:	92 95       	swap	r25
 28a:	9f 70       	andi	r25, 0x0F	; 15
 28c:	29 2f       	mov	r18, r25
 28e:	22 0f       	add	r18, r18
 290:	92 0f       	add	r25, r18
 292:	99 0f       	add	r25, r25
 294:	98 2e       	mov	r9, r24
 296:	99 1a       	sub	r9, r25
	uint8_t mm = bcd2bin(i2cReadAck());		//minutes
	uint8_t hh = bcd2bin(i2cReadAck());		//hours
	bcd2bin(i2cReadAck());		//day of the week
	uint8_t date = bcd2bin(i2cReadAck());		//day of the month
	uint8_t month = bcd2bin(i2cReadAck());		//month
	uint16_t year = bcd2bin(i2cReadNoAck()) + 2000;		//year
 298:	0e 94 74 00 	call	0xe8	; 0xe8 <i2cReadNoAck>
 29c:	98 2f       	mov	r25, r24
 29e:	92 95       	swap	r25
 2a0:	9f 70       	andi	r25, 0x0F	; 15
 2a2:	29 2f       	mov	r18, r25
 2a4:	22 0f       	add	r18, r18
 2a6:	92 0f       	add	r25, r18
 2a8:	99 0f       	add	r25, r25
 2aa:	08 2f       	mov	r16, r24
 2ac:	09 1b       	sub	r16, r25
 2ae:	10 e0       	ldi	r17, 0x00	; 0
 2b0:	00 53       	subi	r16, 0x30	; 48
 2b2:	18 4f       	sbci	r17, 0xF8	; 248
	i2cStop();
 2b4:	0e 94 68 00 	call	0xd0	; 0xd0 <i2cStop>
	
	if (hh > 12){
 2b8:	8c e0       	ldi	r24, 0x0C	; 12
 2ba:	8f 15       	cp	r24, r15
 2bc:	48 f4       	brcc	.+18     	; 0x2d0 <get_time+0xe6>
		hh = hh - 12;
 2be:	e4 ef       	ldi	r30, 0xF4	; 244
 2c0:	fe 0e       	add	r15, r30
		timeflag = "PM";
 2c2:	0f 2e       	mov	r0, r31
 2c4:	f2 e0       	ldi	r31, 0x02	; 2
 2c6:	af 2e       	mov	r10, r31
 2c8:	f1 e0       	ldi	r31, 0x01	; 1
 2ca:	bf 2e       	mov	r11, r31
 2cc:	f0 2d       	mov	r31, r0
 2ce:	06 c0       	rjmp	.+12     	; 0x2dc <get_time+0xf2>
	}
	else {
		timeflag = "AM";
 2d0:	0f 2e       	mov	r0, r31
 2d2:	f5 e0       	ldi	r31, 0x05	; 5
 2d4:	af 2e       	mov	r10, r31
 2d6:	f1 e0       	ldi	r31, 0x01	; 1
 2d8:	bf 2e       	mov	r11, r31
 2da:	f0 2d       	mov	r31, r0
	}
	
	formatTime(hh, buf, i);
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	be 01       	movw	r22, r28
 2e2:	8f 2d       	mov	r24, r15
 2e4:	0e 94 93 00 	call	0x126	; 0x126 <formatTime>
	i += 2;
	buf[i++] = ':';
 2e8:	0f 2e       	mov	r0, r31
 2ea:	fa e3       	ldi	r31, 0x3A	; 58
 2ec:	ff 2e       	mov	r15, r31
 2ee:	f0 2d       	mov	r31, r0
 2f0:	fa 82       	std	Y+2, r15	; 0x02
	formatTime(mm, buf, i);
 2f2:	43 e0       	ldi	r20, 0x03	; 3
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	be 01       	movw	r22, r28
 2f8:	8d 2d       	mov	r24, r13
 2fa:	0e 94 93 00 	call	0x126	; 0x126 <formatTime>
	i += 2;
	buf[i++] = ':';
 2fe:	fd 82       	std	Y+5, r15	; 0x05
	formatTime(ss, buf, i);
 300:	46 e0       	ldi	r20, 0x06	; 6
 302:	50 e0       	ldi	r21, 0x00	; 0
 304:	be 01       	movw	r22, r28
 306:	8e 2d       	mov	r24, r14
 308:	0e 94 93 00 	call	0x126	; 0x126 <formatTime>
	i += 2;
	buf[i++] = ' ';
 30c:	80 e2       	ldi	r24, 0x20	; 32
 30e:	88 87       	std	Y+8, r24	; 0x08
	
	buf[i++] = timeflag[0];
 310:	f5 01       	movw	r30, r10
 312:	90 81       	ld	r25, Z
 314:	99 87       	std	Y+9, r25	; 0x09
	buf[i++] = timeflag[1];
 316:	91 81       	ldd	r25, Z+1	; 0x01
 318:	9a 87       	std	Y+10, r25	; 0x0a
	
	buf[i++] = ' ';
 31a:	8b 87       	std	Y+11, r24	; 0x0b
	formatTime(month, buf, i);
 31c:	4c e0       	ldi	r20, 0x0C	; 12
 31e:	50 e0       	ldi	r21, 0x00	; 0
 320:	be 01       	movw	r22, r28
 322:	89 2d       	mov	r24, r9
 324:	0e 94 93 00 	call	0x126	; 0x126 <formatTime>
	i += 2;
	buf[i++] = '/';
 328:	0f 2e       	mov	r0, r31
 32a:	ff e2       	ldi	r31, 0x2F	; 47
 32c:	ff 2e       	mov	r15, r31
 32e:	f0 2d       	mov	r31, r0
 330:	fe 86       	std	Y+14, r15	; 0x0e
	formatTime(date, buf, i);
 332:	4f e0       	ldi	r20, 0x0F	; 15
 334:	50 e0       	ldi	r21, 0x00	; 0
 336:	be 01       	movw	r22, r28
 338:	8c 2d       	mov	r24, r12
 33a:	0e 94 93 00 	call	0x126	; 0x126 <formatTime>
	i += 2;
	buf[i++] = '/';
 33e:	f9 8a       	std	Y+17, r15	; 0x11
	formatYear(year, buf, i);
 340:	42 e1       	ldi	r20, 0x12	; 18
 342:	50 e0       	ldi	r21, 0x00	; 0
 344:	be 01       	movw	r22, r28
 346:	c8 01       	movw	r24, r16
 348:	0e 94 b6 00 	call	0x16c	; 0x16c <formatYear>
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	ff 90       	pop	r15
 356:	ef 90       	pop	r14
 358:	df 90       	pop	r13
 35a:	cf 90       	pop	r12
 35c:	bf 90       	pop	r11
 35e:	af 90       	pop	r10
 360:	9f 90       	pop	r9
 362:	08 95       	ret

00000364 <send_Command>:
		return ('0' + nibble);
	}
	else {
		return ('A' + nibble - 10);
	}
}
 364:	cf 93       	push	r28
 366:	c8 2f       	mov	r28, r24
 368:	0e 94 62 00 	call	0xc4	; 0xc4 <i2cStart>
 36c:	8e e7       	ldi	r24, 0x7E	; 126
 36e:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2cSend>
 372:	8c 2f       	mov	r24, r28
 374:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2cSend>
 378:	8c 2f       	mov	r24, r28
 37a:	84 60       	ori	r24, 0x04	; 4
 37c:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2cSend>
 380:	8c 2f       	mov	r24, r28
 382:	8b 7f       	andi	r24, 0xFB	; 251
 384:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2cSend>
 388:	0e 94 68 00 	call	0xd0	; 0xd0 <i2cStop>
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <checkBF>:
 390:	cf 93       	push	r28
 392:	8a e0       	ldi	r24, 0x0A	; 10
 394:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 398:	8a e0       	ldi	r24, 0x0A	; 10
 39a:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 39e:	0e 94 62 00 	call	0xc4	; 0xc4 <i2cStart>
 3a2:	8e e7       	ldi	r24, 0x7E	; 126
 3a4:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2cSend>
 3a8:	88 e0       	ldi	r24, 0x08	; 8
 3aa:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2cSend>
 3ae:	0e 94 62 00 	call	0xc4	; 0xc4 <i2cStart>
 3b2:	8f e7       	ldi	r24, 0x7F	; 127
 3b4:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2cSend>
 3b8:	0e 94 74 00 	call	0xe8	; 0xe8 <i2cReadNoAck>
 3bc:	c8 2f       	mov	r28, r24
 3be:	0e 94 68 00 	call	0xd0	; 0xd0 <i2cStop>
 3c2:	cc 23       	and	r28, r28
 3c4:	34 f3       	brlt	.-52     	; 0x392 <checkBF+0x2>
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <set_Up_4bit_Mode>:
 3ca:	8f e2       	ldi	r24, 0x2F	; 47
 3cc:	95 e7       	ldi	r25, 0x75	; 117
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <set_Up_4bit_Mode+0x4>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <set_Up_4bit_Mode+0xa>
 3d4:	00 00       	nop
 3d6:	80 e3       	ldi	r24, 0x30	; 48
 3d8:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 3dc:	87 e0       	ldi	r24, 0x07	; 7
 3de:	90 e2       	ldi	r25, 0x20	; 32
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <set_Up_4bit_Mode+0x16>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <set_Up_4bit_Mode+0x1c>
 3e6:	00 00       	nop
 3e8:	80 e3       	ldi	r24, 0x30	; 48
 3ea:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 3ee:	87 ec       	ldi	r24, 0xC7	; 199
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <set_Up_4bit_Mode+0x28>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <set_Up_4bit_Mode+0x2e>
 3f8:	00 00       	nop
 3fa:	80 e3       	ldi	r24, 0x30	; 48
 3fc:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 400:	87 e0       	ldi	r24, 0x07	; 7
 402:	90 e2       	ldi	r25, 0x20	; 32
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
 40c:	80 e2       	ldi	r24, 0x20	; 32
 40e:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 412:	08 95       	ret

00000414 <configure_Control_Bytes>:
 414:	8a e6       	ldi	r24, 0x6A	; 106
 416:	8a 95       	dec	r24
 418:	f1 f7       	brne	.-4      	; 0x416 <configure_Control_Bytes+0x2>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <configure_Control_Bytes+0x8>
 41c:	80 e2       	ldi	r24, 0x20	; 32
 41e:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 422:	80 e8       	ldi	r24, 0x80	; 128
 424:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 428:	9a e6       	ldi	r25, 0x6A	; 106
 42a:	9a 95       	dec	r25
 42c:	f1 f7       	brne	.-4      	; 0x42a <configure_Control_Bytes+0x16>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <configure_Control_Bytes+0x1c>
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 436:	80 e8       	ldi	r24, 0x80	; 128
 438:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 43c:	8a e6       	ldi	r24, 0x6A	; 106
 43e:	8a 95       	dec	r24
 440:	f1 f7       	brne	.-4      	; 0x43e <configure_Control_Bytes+0x2a>
 442:	00 c0       	rjmp	.+0      	; 0x444 <configure_Control_Bytes+0x30>
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 44a:	80 e1       	ldi	r24, 0x10	; 16
 44c:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 450:	8f ec       	ldi	r24, 0xCF	; 207
 452:	9c e0       	ldi	r25, 0x0C	; 12
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <configure_Control_Bytes+0x40>
 458:	00 c0       	rjmp	.+0      	; 0x45a <configure_Control_Bytes+0x46>
 45a:	00 00       	nop
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 462:	80 e6       	ldi	r24, 0x60	; 96
 464:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 468:	9a e6       	ldi	r25, 0x6A	; 106
 46a:	9a 95       	dec	r25
 46c:	f1 f7       	brne	.-4      	; 0x46a <configure_Control_Bytes+0x56>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <configure_Control_Bytes+0x5c>
 470:	08 95       	ret

00000472 <enable_lcd>:
 472:	0e 94 c8 01 	call	0x390	; 0x390 <checkBF>
 476:	88 e0       	ldi	r24, 0x08	; 8
 478:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 47c:	88 ef       	ldi	r24, 0xF8	; 248
 47e:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 482:	08 95       	ret

00000484 <initLCD>:
 484:	0e 94 e5 01 	call	0x3ca	; 0x3ca <set_Up_4bit_Mode>
 488:	0e 94 0a 02 	call	0x414	; 0x414 <configure_Control_Bytes>
 48c:	0e 94 39 02 	call	0x472	; 0x472 <enable_lcd>
 490:	08 95       	ret

00000492 <clear_lcd>:
 492:	0e 94 c8 01 	call	0x390	; 0x390 <checkBF>
 496:	88 e0       	ldi	r24, 0x08	; 8
 498:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 49c:	88 e1       	ldi	r24, 0x18	; 24
 49e:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 4a2:	08 95       	ret

000004a4 <write>:

void write(char character){
 4a4:	cf 93       	push	r28
 4a6:	c8 2f       	mov	r28, r24
	checkBF();
 4a8:	0e 94 c8 01 	call	0x390	; 0x390 <checkBF>
	//uint8_t highNibble = ((uint8_t)character & 0xF0);
	//uint8_t lowNibble = (((uint8_t)character & 0x0F) << 4);
	uint8_t highNibble = (character & 0xF0);
	uint8_t lowNibble = ((character & 0x0F) << 4);
	send_Command((1 << BACKLIGHT) | (1 << RS) | highNibble);
 4ac:	8c 2f       	mov	r24, r28
 4ae:	80 7f       	andi	r24, 0xF0	; 240
 4b0:	89 60       	ori	r24, 0x09	; 9
 4b2:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
	send_Command((1 << BACKLIGHT) | (1 << RS) | lowNibble);
 4b6:	20 e1       	ldi	r18, 0x10	; 16
 4b8:	c2 9f       	mul	r28, r18
 4ba:	c0 01       	movw	r24, r0
 4bc:	11 24       	eor	r1, r1
 4be:	89 60       	ori	r24, 0x09	; 9
 4c0:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
}
 4c4:	cf 91       	pop	r28
 4c6:	08 95       	ret

000004c8 <set_cursor>:

void set_cursor(int line, int place){
 4c8:	0f 93       	push	r16
 4ca:	1f 93       	push	r17
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	d8 2f       	mov	r29, r24
 4d2:	c9 2f       	mov	r28, r25
 4d4:	06 2f       	mov	r16, r22
 4d6:	17 2f       	mov	r17, r23
	checkBF();
 4d8:	0e 94 c8 01 	call	0x390	; 0x390 <checkBF>
 4dc:	2d 2f       	mov	r18, r29
 4de:	3c 2f       	mov	r19, r28
 4e0:	24 30       	cpi	r18, 0x04	; 4
 4e2:	31 05       	cpc	r19, r1
 4e4:	14 f0       	brlt	.+4      	; 0x4ea <set_cursor+0x22>
 4e6:	23 e0       	ldi	r18, 0x03	; 3
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	c0 2f       	mov	r28, r16
 4ec:	d1 2f       	mov	r29, r17
 4ee:	c5 31       	cpi	r28, 0x15	; 21
 4f0:	d1 05       	cpc	r29, r1
 4f2:	14 f0       	brlt	.+4      	; 0x4f8 <set_cursor+0x30>
 4f4:	c4 e1       	ldi	r28, 0x14	; 20
 4f6:	d0 e0       	ldi	r29, 0x00	; 0
	if(line > 3) line = 3;
	if(place > 20) place = 20;
	
	if(line == 0){
 4f8:	21 15       	cp	r18, r1
 4fa:	31 05       	cpc	r19, r1
 4fc:	81 f4       	brne	.+32     	; 0x51e <set_cursor+0x56>
		uint8_t highNibble = ((0x00 + place) & 0xF0);
		uint8_t lowNibble = (((0x00 + place) & 0x0F) << 4);
		send_Command((1 << BACKLIGHT) | (1 << D7) | highNibble);
 4fe:	8c 2f       	mov	r24, r28
 500:	80 7f       	andi	r24, 0xF0	; 240
 502:	88 68       	ori	r24, 0x88	; 136
 504:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
		send_Command((1 << BACKLIGHT) | lowNibble);
 508:	ce 01       	movw	r24, r28
 50a:	82 95       	swap	r24
 50c:	92 95       	swap	r25
 50e:	90 7f       	andi	r25, 0xF0	; 240
 510:	98 27       	eor	r25, r24
 512:	80 7f       	andi	r24, 0xF0	; 240
 514:	98 27       	eor	r25, r24
 516:	88 60       	ori	r24, 0x08	; 8
 518:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 51c:	3e c0       	rjmp	.+124    	; 0x59a <set_cursor+0xd2>
	}
	else if(line == 1){
 51e:	21 30       	cpi	r18, 0x01	; 1
 520:	31 05       	cpc	r19, r1
 522:	89 f4       	brne	.+34     	; 0x546 <set_cursor+0x7e>
		uint8_t highNibble = ((0x40 + place) & 0xF0);
		uint8_t lowNibble = (((0x40 + place) & 0x0F) << 4);
		send_Command((1 << BACKLIGHT) | (1 << D7) | highNibble);
 524:	8c 2f       	mov	r24, r28
 526:	80 5c       	subi	r24, 0xC0	; 192
 528:	80 7f       	andi	r24, 0xF0	; 240
 52a:	88 68       	ori	r24, 0x88	; 136
 52c:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
		send_Command((1 << BACKLIGHT) | lowNibble);
 530:	ce 01       	movw	r24, r28
 532:	82 95       	swap	r24
 534:	92 95       	swap	r25
 536:	90 7f       	andi	r25, 0xF0	; 240
 538:	98 27       	eor	r25, r24
 53a:	80 7f       	andi	r24, 0xF0	; 240
 53c:	98 27       	eor	r25, r24
 53e:	88 60       	ori	r24, 0x08	; 8
 540:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 544:	2a c0       	rjmp	.+84     	; 0x59a <set_cursor+0xd2>
	}
	else if(line == 2){
 546:	22 30       	cpi	r18, 0x02	; 2
 548:	31 05       	cpc	r19, r1
 54a:	91 f4       	brne	.+36     	; 0x570 <set_cursor+0xa8>
		uint8_t highNibble = ((0x14 + place) & 0xF0);
		uint8_t lowNibble = (((0x14 + place) & 0x0F) << 4);
		send_Command((1 << BACKLIGHT) | (1 << D7) | highNibble);
 54c:	8c 2f       	mov	r24, r28
 54e:	8c 5e       	subi	r24, 0xEC	; 236
 550:	80 7f       	andi	r24, 0xF0	; 240
 552:	88 68       	ori	r24, 0x88	; 136
 554:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
		send_Command((1 << BACKLIGHT) | lowNibble);
 558:	ce 01       	movw	r24, r28
 55a:	44 96       	adiw	r24, 0x14	; 20
 55c:	82 95       	swap	r24
 55e:	92 95       	swap	r25
 560:	90 7f       	andi	r25, 0xF0	; 240
 562:	98 27       	eor	r25, r24
 564:	80 7f       	andi	r24, 0xF0	; 240
 566:	98 27       	eor	r25, r24
 568:	88 60       	ori	r24, 0x08	; 8
 56a:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
 56e:	15 c0       	rjmp	.+42     	; 0x59a <set_cursor+0xd2>
	}
	else if(line == 3){
 570:	23 30       	cpi	r18, 0x03	; 3
 572:	31 05       	cpc	r19, r1
 574:	91 f4       	brne	.+36     	; 0x59a <set_cursor+0xd2>
		uint8_t highNibble = ((0x54 + place) & 0xF0);
		uint8_t lowNibble = (((0x54 + place) & 0x0F) << 4);
		send_Command((1 << BACKLIGHT) | (1 << D7) | highNibble);
 576:	8c 2f       	mov	r24, r28
 578:	8c 5a       	subi	r24, 0xAC	; 172
 57a:	80 7f       	andi	r24, 0xF0	; 240
 57c:	88 68       	ori	r24, 0x88	; 136
 57e:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
		send_Command((1 << BACKLIGHT) | lowNibble);
 582:	ce 01       	movw	r24, r28
 584:	8c 5a       	subi	r24, 0xAC	; 172
 586:	9f 4f       	sbci	r25, 0xFF	; 255
 588:	82 95       	swap	r24
 58a:	92 95       	swap	r25
 58c:	90 7f       	andi	r25, 0xF0	; 240
 58e:	98 27       	eor	r25, r24
 590:	80 7f       	andi	r24, 0xF0	; 240
 592:	98 27       	eor	r25, r24
 594:	88 60       	ori	r24, 0x08	; 8
 596:	0e 94 b2 01 	call	0x364	; 0x364 <send_Command>
	}
}
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	08 95       	ret

000005a4 <lcd_print_string>:

void lcd_print_string(const char String[])
{
 5a4:	0f 93       	push	r16
 5a6:	1f 93       	push	r17
 5a8:	cf 93       	push	r28
 5aa:	fc 01       	movw	r30, r24
	uint8_t i = 0;
	while (String[i]) {
 5ac:	80 81       	ld	r24, Z
 5ae:	88 23       	and	r24, r24
 5b0:	59 f0       	breq	.+22     	; 0x5c8 <lcd_print_string+0x24>
 5b2:	8f 01       	movw	r16, r30
 5b4:	c0 e0       	ldi	r28, 0x00	; 0
		write(String[i]);
 5b6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <write>
		i++;
 5ba:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print_string(const char String[])
{
	uint8_t i = 0;
	while (String[i]) {
 5bc:	f8 01       	movw	r30, r16
 5be:	ec 0f       	add	r30, r28
 5c0:	f1 1d       	adc	r31, r1
 5c2:	80 81       	ld	r24, Z
 5c4:	81 11       	cpse	r24, r1
 5c6:	f7 cf       	rjmp	.-18     	; 0x5b6 <lcd_print_string+0x12>
		write(String[i]);
		i++;
	}
}
 5c8:	cf 91       	pop	r28
 5ca:	1f 91       	pop	r17
 5cc:	0f 91       	pop	r16
 5ce:	08 95       	ret

000005d0 <setup_timer>:
	lcd_print_string(data);
	
	lcd_print_string("FREQ: ");
	formatFrequency(get_pIC_RegValue(Freq), data);
	lcd_print_string(data);*/
}
 5d0:	e1 e8       	ldi	r30, 0x81	; 129
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	80 81       	ld	r24, Z
 5d6:	88 60       	ori	r24, 0x08	; 8
 5d8:	80 83       	st	Z, r24
 5da:	af e6       	ldi	r26, 0x6F	; 111
 5dc:	b0 e0       	ldi	r27, 0x00	; 0
 5de:	8c 91       	ld	r24, X
 5e0:	82 60       	ori	r24, 0x02	; 2
 5e2:	8c 93       	st	X, r24
 5e4:	82 e1       	ldi	r24, 0x12	; 18
 5e6:	9a e7       	ldi	r25, 0x7A	; 122
 5e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 5ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 5f0:	80 81       	ld	r24, Z
 5f2:	84 60       	ori	r24, 0x04	; 4
 5f4:	80 83       	st	Z, r24
 5f6:	08 95       	ret

000005f8 <print_time>:
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	cd b7       	in	r28, 0x3d	; 61
 5fe:	de b7       	in	r29, 0x3e	; 62
 600:	6e 97       	sbiw	r28, 0x1e	; 30
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	f8 94       	cli
 606:	de bf       	out	0x3e, r29	; 62
 608:	0f be       	out	0x3f, r0	; 63
 60a:	cd bf       	out	0x3d, r28	; 61
 60c:	ce 01       	movw	r24, r28
 60e:	01 96       	adiw	r24, 0x01	; 1
 610:	0e 94 f5 00 	call	0x1ea	; 0x1ea <get_time>
 614:	ce 01       	movw	r24, r28
 616:	01 96       	adiw	r24, 0x01	; 1
 618:	0e 94 95 03 	call	0x72a	; 0x72a <printString>
 61c:	6e 96       	adiw	r28, 0x1e	; 30
 61e:	0f b6       	in	r0, 0x3f	; 63
 620:	f8 94       	cli
 622:	de bf       	out	0x3e, r29	; 62
 624:	0f be       	out	0x3f, r0	; 63
 626:	cd bf       	out	0x3d, r28	; 61
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	08 95       	ret

0000062e <lcd_print_Time>:
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	cd b7       	in	r28, 0x3d	; 61
 634:	de b7       	in	r29, 0x3e	; 62
 636:	6e 97       	sbiw	r28, 0x1e	; 30
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	f8 94       	cli
 63c:	de bf       	out	0x3e, r29	; 62
 63e:	0f be       	out	0x3f, r0	; 63
 640:	cd bf       	out	0x3d, r28	; 61
 642:	ce 01       	movw	r24, r28
 644:	01 96       	adiw	r24, 0x01	; 1
 646:	0e 94 f5 00 	call	0x1ea	; 0x1ea <get_time>
 64a:	0e 94 49 02 	call	0x492	; 0x492 <clear_lcd>
 64e:	ce 01       	movw	r24, r28
 650:	01 96       	adiw	r24, 0x01	; 1
 652:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_print_string>
 656:	6e 96       	adiw	r28, 0x1e	; 30
 658:	0f b6       	in	r0, 0x3f	; 63
 65a:	f8 94       	cli
 65c:	de bf       	out	0x3e, r29	; 62
 65e:	0f be       	out	0x3f, r0	; 63
 660:	cd bf       	out	0x3d, r28	; 61
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	08 95       	ret

00000668 <main>:
 668:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <initUSART>
 66c:	0e 94 53 00 	call	0xa6	; 0xa6 <initI2C>
 670:	0e 94 42 02 	call	0x484	; 0x484 <initLCD>
 674:	78 94       	sei
 676:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <setup_timer>
 67a:	0e 94 49 02 	call	0x492	; 0x492 <clear_lcd>
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	0e 94 64 02 	call	0x4c8	; 0x4c8 <set_cursor>
 68a:	84 e4       	ldi	r24, 0x44	; 68
 68c:	91 e0       	ldi	r25, 0x01	; 1
 68e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_print_string>
 692:	c0 e0       	ldi	r28, 0x00	; 0
 694:	d0 e0       	ldi	r29, 0x00	; 0
 696:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <__data_end>
 69a:	88 23       	and	r24, r24
 69c:	e1 f3       	breq	.-8      	; 0x696 <main+0x2e>
 69e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <print_time>
 6a2:	0e 94 17 03 	call	0x62e	; 0x62e <lcd_print_Time>
 6a6:	82 e2       	ldi	r24, 0x22	; 34
 6a8:	91 e0       	ldi	r25, 0x01	; 1
 6aa:	0e 94 95 03 	call	0x72a	; 0x72a <printString>
 6ae:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <__data_end>
 6b2:	c5 30       	cpi	r28, 0x05	; 5
 6b4:	d1 05       	cpc	r29, r1
 6b6:	7c f7       	brge	.-34     	; 0x696 <main+0x2e>
 6b8:	21 96       	adiw	r28, 0x01	; 1
 6ba:	ed cf       	rjmp	.-38     	; 0x696 <main+0x2e>

000006bc <__vector_11>:

// each one second interrupt
ISR(TIMER1_COMPA_vect) {
 6bc:	1f 92       	push	r1
 6be:	0f 92       	push	r0
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	0f 92       	push	r0
 6c4:	11 24       	eor	r1, r1
 6c6:	8f 93       	push	r24
	send_message = true;
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <__data_end>
}
 6ce:	8f 91       	pop	r24
 6d0:	0f 90       	pop	r0
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	0f 90       	pop	r0
 6d6:	1f 90       	pop	r1
 6d8:	18 95       	reti

000006da <__vector_1>:

// nRF24L01 interrupt
ISR(INT0_vect) {
 6da:	1f 92       	push	r1
 6dc:	0f 92       	push	r0
 6de:	0f b6       	in	r0, 0x3f	; 63
 6e0:	0f 92       	push	r0
 6e2:	11 24       	eor	r1, r1
 6e4:	8f 93       	push	r24
	rf_interrupt = true;
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <rf_interrupt>
 6ec:	8f 91       	pop	r24
 6ee:	0f 90       	pop	r0
 6f0:	0f be       	out	0x3f, r0	; 63
 6f2:	0f 90       	pop	r0
 6f4:	1f 90       	pop	r1
 6f6:	18 95       	reti

000006f8 <initUSART>:
}

uint8_t receiveByte(void) {
  loop_until_bit_is_set(UCSR0A, RXC0);       /* Wait for incoming data */
  return UDR0;                                /* return register value */
}
 6f8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 6fc:	83 e3       	ldi	r24, 0x33	; 51
 6fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 702:	e0 ec       	ldi	r30, 0xC0	; 192
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	80 81       	ld	r24, Z
 708:	8d 7f       	andi	r24, 0xFD	; 253
 70a:	80 83       	st	Z, r24
 70c:	88 e1       	ldi	r24, 0x18	; 24
 70e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 712:	86 e0       	ldi	r24, 0x06	; 6
 714:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 718:	08 95       	ret

0000071a <transmitByte>:
 71a:	e0 ec       	ldi	r30, 0xC0	; 192
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	90 81       	ld	r25, Z
 720:	95 ff       	sbrs	r25, 5
 722:	fd cf       	rjmp	.-6      	; 0x71e <transmitByte+0x4>
 724:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 728:	08 95       	ret

0000072a <printString>:


                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
 72a:	0f 93       	push	r16
 72c:	1f 93       	push	r17
 72e:	cf 93       	push	r28
 730:	fc 01       	movw	r30, r24
  uint8_t i = 0;
  while (myString[i]) {
 732:	80 81       	ld	r24, Z
 734:	88 23       	and	r24, r24
 736:	59 f0       	breq	.+22     	; 0x74e <printString+0x24>
 738:	8f 01       	movw	r16, r30
 73a:	c0 e0       	ldi	r28, 0x00	; 0
    transmitByte(myString[i]);
 73c:	0e 94 8d 03 	call	0x71a	; 0x71a <transmitByte>
    i++;
 740:	cf 5f       	subi	r28, 0xFF	; 255

                       /* Here are a bunch of useful printing commands */

void printString(const char myString[]) {
  uint8_t i = 0;
  while (myString[i]) {
 742:	f8 01       	movw	r30, r16
 744:	ec 0f       	add	r30, r28
 746:	f1 1d       	adc	r31, r1
 748:	80 81       	ld	r24, Z
 74a:	81 11       	cpse	r24, r1
 74c:	f7 cf       	rjmp	.-18     	; 0x73c <printString+0x12>
    transmitByte(myString[i]);
    i++;
  }
}
 74e:	cf 91       	pop	r28
 750:	1f 91       	pop	r17
 752:	0f 91       	pop	r16
 754:	08 95       	ret

00000756 <__umulhisi3>:
 756:	a2 9f       	mul	r26, r18
 758:	b0 01       	movw	r22, r0
 75a:	b3 9f       	mul	r27, r19
 75c:	c0 01       	movw	r24, r0
 75e:	a3 9f       	mul	r26, r19
 760:	70 0d       	add	r23, r0
 762:	81 1d       	adc	r24, r1
 764:	11 24       	eor	r1, r1
 766:	91 1d       	adc	r25, r1
 768:	b2 9f       	mul	r27, r18
 76a:	70 0d       	add	r23, r0
 76c:	81 1d       	adc	r24, r1
 76e:	11 24       	eor	r1, r1
 770:	91 1d       	adc	r25, r1
 772:	08 95       	ret

00000774 <_exit>:
 774:	f8 94       	cli

00000776 <__stop_program>:
 776:	ff cf       	rjmp	.-2      	; 0x776 <__stop_program>
